// Generated file, do not edit by hand, see `src/generator.rs`

impl IconData {
    const LUCIDE_ACCESSIBILITY: Self = {
        #[inline(never)]
        fn lucide_accessibility(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "16" cy = "4" r = "1" /> < path d = "m18 19 1-7-5.87.94" /> < path d = "m5 8 3-3 5.5 3-2.21 3.1" /> < path d = "M4.24 14.48c-.19.58-.27 1.2-.23 1.84a5 5 0 0 0 5.31 4.67c.65-.04 1.25-.2 1.8-.46" /> < path d = "M13.76 17.52c.19-.58.27-1.2.23-1.84a5 5 0 0 0-5.31-4.67c-.65.04-1.25.2-1.8.46" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ACCESSIBILITY",
            html: lucide_accessibility,
        }
    };
    const LUCIDE_ACTIVITY: Self = {
        #[inline(never)]
        fn lucide_activity(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "22 12 18 12 15 21 9 3 6 12 2 12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ACTIVITY",
            html: lucide_activity,
        }
    };
    const LUCIDE_AIR_VENT: Self = {
        #[inline(never)]
        fn lucide_air_vent(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2" /> < path d = "M6 8h12" /> < path d = "M18.3 17.7a2.5 2.5 0 0 1-3.16 3.83 2.53 2.53 0 0 1-1.14-2V12" /> < path d = "M6.6 15.6A2 2 0 1 0 10 17v-5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_AIR_VENT",
            html: lucide_air_vent,
        }
    };
    const LUCIDE_AIRPLAY: Self = {
        #[inline(never)]
        fn lucide_airplay(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1" /> < polygon points = "12 15 17 21 7 21 12 15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_AIRPLAY",
            html: lucide_airplay,
        }
    };
    const LUCIDE_ALARM_CHECK: Self = {
        #[inline(never)]
        fn lucide_alarm_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 21a8 8 0 1 0 0-16 8 8 0 0 0 0 16z" /> < path d = "M5 3 2 6" /> < path d = "m22 6-3-3" /> < path d = "m6 19-2 2" /> < path d = "m18 19 2 2" /> < path d = "m9 13 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALARM_CHECK",
            html: lucide_alarm_check,
        }
    };
    const LUCIDE_ALARM_CLOCK_OFF: Self = {
        #[inline(never)]
        fn lucide_alarm_clock_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6.87 6.87a8 8 0 1 0 11.26 11.26" /> < path d = "M19.9 14.25A7.44 7.44 0 0 0 20 13a8 8 0 0 0-8-8 7.44 7.44 0 0 0-1.25.1" /> < path d = "m22 6-3-3" /> < path d = "m6 19-2 2" /> < path d = "m2 2 20 20" /> < path d = "M4 4 2 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALARM_CLOCK_OFF",
            html: lucide_alarm_clock_off,
        }
    };
    const LUCIDE_ALARM_CLOCK: Self = {
        #[inline(never)]
        fn lucide_alarm_clock(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "13" r = "8" /> < path d = "M12 9v4l2 2" /> < path d = "M5 3 2 6" /> < path d = "m22 6-3-3" /> < path d = "m6 19-2 2" /> < path d = "m18 19 2 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALARM_CLOCK",
            html: lucide_alarm_clock,
        }
    };
    const LUCIDE_ALARM_MINUS: Self = {
        #[inline(never)]
        fn lucide_alarm_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 21a8 8 0 1 0 0-16 8 8 0 0 0 0 16z" /> < path d = "M5 3 2 6" /> < path d = "m22 6-3-3" /> < path d = "m6 19-2 2" /> < path d = "m18 19 2 2" /> < path d = "M9 13h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALARM_MINUS",
            html: lucide_alarm_minus,
        }
    };
    const LUCIDE_ALARM_PLUS: Self = {
        #[inline(never)]
        fn lucide_alarm_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 21a8 8 0 1 0 0-16 8 8 0 0 0 0 16z" /> < path d = "M5 3 2 6" /> < path d = "m22 6-3-3" /> < path d = "m6 19-2 2" /> < path d = "m18 19 2 2" /> < path d = "M12 10v6" /> < path d = "M9 13h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALARM_PLUS",
            html: lucide_alarm_plus,
        }
    };
    const LUCIDE_ALBUM: Self = {
        #[inline(never)]
        fn lucide_album(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < polyline points = "11 3 11 11 14 8 17 11 17 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALBUM",
            html: lucide_album,
        }
    };
    const LUCIDE_ALERT_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_alert_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "12" y1 = "8" x2 = "12" y2 = "12" /> < line x1 = "12" y1 = "16" x2 = "12.01" y2 = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALERT_CIRCLE",
            html: lucide_alert_circle,
        }
    };
    const LUCIDE_ALERT_OCTAGON: Self = {
        #[inline(never)]
        fn lucide_alert_octagon(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2" /> < line x1 = "12" y1 = "8" x2 = "12" y2 = "12" /> < line x1 = "12" y1 = "16" x2 = "12.01" y2 = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALERT_OCTAGON",
            html: lucide_alert_octagon,
        }
    };
    const LUCIDE_ALERT_TRIANGLE: Self = {
        #[inline(never)]
        fn lucide_alert_triangle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z" /> < line x1 = "12" y1 = "9" x2 = "12" y2 = "13" /> < line x1 = "12" y1 = "17" x2 = "12.01" y2 = "17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALERT_TRIANGLE",
            html: lucide_alert_triangle,
        }
    };
    const LUCIDE_ALIGN_CENTER_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_align_center_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 12h20" /> < path d = "M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4" /> < path d = "M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4" /> < path d = "M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1" /> < path d = "M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_CENTER_HORIZONTAL",
            html: lucide_align_center_horizontal,
        }
    };
    const LUCIDE_ALIGN_CENTER_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_align_center_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 2v20" /> < path d = "M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4" /> < path d = "M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4" /> < path d = "M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1" /> < path d = "M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_CENTER_VERTICAL",
            html: lucide_align_center_vertical,
        }
    };
    const LUCIDE_ALIGN_CENTER: Self = {
        #[inline(never)]
        fn lucide_align_center(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "21" y1 = "6" x2 = "3" y2 = "6" /> < line x1 = "17" y1 = "12" x2 = "7" y2 = "12" /> < line x1 = "19" y1 = "18" x2 = "5" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_CENTER",
            html: lucide_align_center,
        }
    };
    const LUCIDE_ALIGN_END_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_align_end_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "2" width = "6" height = "16" rx = "2" /> < rect x = "14" y = "9" width = "6" height = "9" rx = "2" /> < path d = "M22 22H2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_END_HORIZONTAL",
            html: lucide_align_end_horizontal,
        }
    };
    const LUCIDE_ALIGN_END_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_align_end_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "4" width = "16" height = "6" rx = "2" /> < rect x = "9" y = "14" width = "9" height = "6" rx = "2" /> < path d = "M22 22V2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_END_VERTICAL",
            html: lucide_align_end_vertical,
        }
    };
    const LUCIDE_ALIGN_HORIZONTAL_DISTRIBUTE_CENTER: Self = {
        #[inline(never)]
        fn lucide_align_horizontal_distribute_center(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "5" width = "6" height = "14" rx = "2" /> < rect x = "14" y = "7" width = "6" height = "10" rx = "2" /> < path d = "M17 22v-5" /> < path d = "M17 7V2" /> < path d = "M7 22v-3" /> < path d = "M7 5V2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_HORIZONTAL_DISTRIBUTE_CENTER",
            html: lucide_align_horizontal_distribute_center,
        }
    };
    const LUCIDE_ALIGN_HORIZONTAL_DISTRIBUTE_END: Self = {
        #[inline(never)]
        fn lucide_align_horizontal_distribute_end(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "5" width = "6" height = "14" rx = "2" /> < rect x = "14" y = "7" width = "6" height = "10" rx = "2" /> < path d = "M10 2v20" /> < path d = "M20 2v20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_HORIZONTAL_DISTRIBUTE_END",
            html: lucide_align_horizontal_distribute_end,
        }
    };
    const LUCIDE_ALIGN_HORIZONTAL_DISTRIBUTE_START: Self = {
        #[inline(never)]
        fn lucide_align_horizontal_distribute_start(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "5" width = "6" height = "14" rx = "2" /> < rect x = "14" y = "7" width = "6" height = "10" rx = "2" /> < path d = "M4 2v20" /> < path d = "M14 2v20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_HORIZONTAL_DISTRIBUTE_START",
            html: lucide_align_horizontal_distribute_start,
        }
    };
    const LUCIDE_ALIGN_HORIZONTAL_JUSTIFY_CENTER: Self = {
        #[inline(never)]
        fn lucide_align_horizontal_justify_center(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "5" width = "6" height = "14" rx = "2" /> < rect x = "16" y = "7" width = "6" height = "10" rx = "2" /> < path d = "M12 2v20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_HORIZONTAL_JUSTIFY_CENTER",
            html: lucide_align_horizontal_justify_center,
        }
    };
    const LUCIDE_ALIGN_HORIZONTAL_JUSTIFY_END: Self = {
        #[inline(never)]
        fn lucide_align_horizontal_justify_end(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "5" width = "6" height = "14" rx = "2" /> < rect x = "12" y = "7" width = "6" height = "10" rx = "2" /> < path d = "M22 2v20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_HORIZONTAL_JUSTIFY_END",
            html: lucide_align_horizontal_justify_end,
        }
    };
    const LUCIDE_ALIGN_HORIZONTAL_JUSTIFY_START: Self = {
        #[inline(never)]
        fn lucide_align_horizontal_justify_start(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "6" y = "5" width = "6" height = "14" rx = "2" /> < rect x = "16" y = "7" width = "6" height = "10" rx = "2" /> < path d = "M2 2v20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_HORIZONTAL_JUSTIFY_START",
            html: lucide_align_horizontal_justify_start,
        }
    };
    const LUCIDE_ALIGN_HORIZONTAL_SPACE_AROUND: Self = {
        #[inline(never)]
        fn lucide_align_horizontal_space_around(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "9" y = "7" width = "6" height = "10" rx = "2" /> < path d = "M4 22V2" /> < path d = "M20 22V2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_HORIZONTAL_SPACE_AROUND",
            html: lucide_align_horizontal_space_around,
        }
    };
    const LUCIDE_ALIGN_HORIZONTAL_SPACE_BETWEEN: Self = {
        #[inline(never)]
        fn lucide_align_horizontal_space_between(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "5" width = "6" height = "14" rx = "2" /> < rect x = "15" y = "7" width = "6" height = "10" rx = "2" /> < path d = "M3 2v20" /> < path d = "M21 2v20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_HORIZONTAL_SPACE_BETWEEN",
            html: lucide_align_horizontal_space_between,
        }
    };
    const LUCIDE_ALIGN_JUSTIFY: Self = {
        #[inline(never)]
        fn lucide_align_justify(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "3" y1 = "6" x2 = "21" y2 = "6" /> < line x1 = "3" y1 = "12" x2 = "21" y2 = "12" /> < line x1 = "3" y1 = "18" x2 = "21" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_JUSTIFY",
            html: lucide_align_justify,
        }
    };
    const LUCIDE_ALIGN_LEFT: Self = {
        #[inline(never)]
        fn lucide_align_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "21" y1 = "6" x2 = "3" y2 = "6" /> < line x1 = "15" y1 = "12" x2 = "3" y2 = "12" /> < line x1 = "17" y1 = "18" x2 = "3" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_LEFT",
            html: lucide_align_left,
        }
    };
    const LUCIDE_ALIGN_RIGHT: Self = {
        #[inline(never)]
        fn lucide_align_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "21" y1 = "6" x2 = "3" y2 = "6" /> < line x1 = "21" y1 = "12" x2 = "9" y2 = "12" /> < line x1 = "21" y1 = "18" x2 = "7" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_RIGHT",
            html: lucide_align_right,
        }
    };
    const LUCIDE_ALIGN_START_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_align_start_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "6" width = "6" height = "16" rx = "2" /> < rect x = "14" y = "6" width = "6" height = "9" rx = "2" /> < path d = "M22 2H2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_START_HORIZONTAL",
            html: lucide_align_start_horizontal,
        }
    };
    const LUCIDE_ALIGN_START_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_align_start_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "6" y = "14" width = "9" height = "6" rx = "2" /> < rect x = "6" y = "4" width = "16" height = "6" rx = "2" /> < path d = "M2 2v20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_START_VERTICAL",
            html: lucide_align_start_vertical,
        }
    };
    const LUCIDE_ALIGN_VERTICAL_DISTRIBUTE_CENTER: Self = {
        #[inline(never)]
        fn lucide_align_vertical_distribute_center(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "5" y = "14" width = "14" height = "6" rx = "2" /> < rect x = "7" y = "4" width = "10" height = "6" rx = "2" /> < path d = "M22 7h-5" /> < path d = "M7 7H1" /> < path d = "M22 17h-3" /> < path d = "M5 17H2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_VERTICAL_DISTRIBUTE_CENTER",
            html: lucide_align_vertical_distribute_center,
        }
    };
    const LUCIDE_ALIGN_VERTICAL_DISTRIBUTE_END: Self = {
        #[inline(never)]
        fn lucide_align_vertical_distribute_end(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "5" y = "14" width = "14" height = "6" rx = "2" /> < rect x = "7" y = "4" width = "10" height = "6" rx = "2" /> < path d = "M2 20h20" /> < path d = "M2 10h20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_VERTICAL_DISTRIBUTE_END",
            html: lucide_align_vertical_distribute_end,
        }
    };
    const LUCIDE_ALIGN_VERTICAL_DISTRIBUTE_START: Self = {
        #[inline(never)]
        fn lucide_align_vertical_distribute_start(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "5" y = "14" width = "14" height = "6" rx = "2" /> < rect x = "7" y = "4" width = "10" height = "6" rx = "2" /> < path d = "M2 14h20" /> < path d = "M2 4h20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_VERTICAL_DISTRIBUTE_START",
            html: lucide_align_vertical_distribute_start,
        }
    };
    const LUCIDE_ALIGN_VERTICAL_JUSTIFY_CENTER: Self = {
        #[inline(never)]
        fn lucide_align_vertical_justify_center(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "5" y = "16" width = "14" height = "6" rx = "2" /> < rect x = "7" y = "2" width = "10" height = "6" rx = "2" /> < path d = "M2 12h20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_VERTICAL_JUSTIFY_CENTER",
            html: lucide_align_vertical_justify_center,
        }
    };
    const LUCIDE_ALIGN_VERTICAL_JUSTIFY_END: Self = {
        #[inline(never)]
        fn lucide_align_vertical_justify_end(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "5" y = "12" width = "14" height = "6" rx = "2" /> < rect x = "7" y = "2" width = "10" height = "6" rx = "2" /> < path d = "M2 22h20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_VERTICAL_JUSTIFY_END",
            html: lucide_align_vertical_justify_end,
        }
    };
    const LUCIDE_ALIGN_VERTICAL_JUSTIFY_START: Self = {
        #[inline(never)]
        fn lucide_align_vertical_justify_start(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "5" y = "16" width = "14" height = "6" rx = "2" /> < rect x = "7" y = "6" width = "10" height = "6" rx = "2" /> < path d = "M2 2h20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_VERTICAL_JUSTIFY_START",
            html: lucide_align_vertical_justify_start,
        }
    };
    const LUCIDE_ALIGN_VERTICAL_SPACE_AROUND: Self = {
        #[inline(never)]
        fn lucide_align_vertical_space_around(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "7" y = "9" width = "10" height = "6" rx = "2" /> < path d = "M22 20H2" /> < path d = "M22 4H2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_VERTICAL_SPACE_AROUND",
            html: lucide_align_vertical_space_around,
        }
    };
    const LUCIDE_ALIGN_VERTICAL_SPACE_BETWEEN: Self = {
        #[inline(never)]
        fn lucide_align_vertical_space_between(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "5" y = "15" width = "14" height = "6" rx = "2" /> < rect x = "7" y = "3" width = "10" height = "6" rx = "2" /> < path d = "M2 21h20" /> < path d = "M2 3h20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ALIGN_VERTICAL_SPACE_BETWEEN",
            html: lucide_align_vertical_space_between,
        }
    };
    const LUCIDE_ANCHOR: Self = {
        #[inline(never)]
        fn lucide_anchor(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "5" r = "3" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "8" /> < path d = "M5 12H2a10 10 0 0 0 20 0h-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ANCHOR",
            html: lucide_anchor,
        }
    };
    const LUCIDE_ANGRY: Self = {
        #[inline(never)]
        fn lucide_angry(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M16 16s-1.5-2-4-2-4 2-4 2" /> < path d = "M7.5 8 10 9" /> < path d = "m14 9 2.5-1" /> < path d = "M9 10h0" /> < path d = "M15 10h0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ANGRY",
            html: lucide_angry,
        }
    };
    const LUCIDE_ANNOYED: Self = {
        #[inline(never)]
        fn lucide_annoyed(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M8 15h8" /> < path d = "M8 9h2" /> < path d = "M14 9h2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ANNOYED",
            html: lucide_annoyed,
        }
    };
    const LUCIDE_APERTURE: Self = {
        #[inline(never)]
        fn lucide_aperture(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "14.31" y1 = "8" x2 = "20.05" y2 = "17.94" /> < line x1 = "9.69" y1 = "8" x2 = "21.17" y2 = "8" /> < line x1 = "7.38" y1 = "12" x2 = "13.12" y2 = "2.06" /> < line x1 = "9.69" y1 = "16" x2 = "3.95" y2 = "6.06" /> < line x1 = "14.31" y1 = "16" x2 = "2.83" y2 = "16" /> < line x1 = "16.62" y1 = "12" x2 = "10.88" y2 = "21.94" /> </ svg > }
        }
        Self {
            name: "LUCIDE_APERTURE",
            html: lucide_aperture,
        }
    };
    const LUCIDE_APPLE: Self = {
        #[inline(never)]
        fn lucide_apple(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z" /> < path d = "M10 2c1 .5 2 2 2 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_APPLE",
            html: lucide_apple,
        }
    };
    const LUCIDE_ARCHIVE_RESTORE: Self = {
        #[inline(never)]
        fn lucide_archive_restore(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "4" width = "20" height = "5" rx = "2" /> < path d = "M12 13v7" /> < path d = "m9 16 3-3 3 3" /> < path d = "M4 9v9a2 2 0 0 0 2 2h2" /> < path d = "M20 9v9a2 2 0 0 1-2 2h-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARCHIVE_RESTORE",
            html: lucide_archive_restore,
        }
    };
    const LUCIDE_ARCHIVE: Self = {
        #[inline(never)]
        fn lucide_archive(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "4" width = "20" height = "5" rx = "2" /> < path d = "M4 9v9a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9" /> < path d = "M10 13h4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARCHIVE",
            html: lucide_archive,
        }
    };
    const LUCIDE_ARMCHAIR: Self = {
        #[inline(never)]
        fn lucide_armchair(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3" /> < path d = "M3 11v5a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v2H7v-2a2 2 0 0 0-4 0Z" /> < path d = "M5 18v2" /> < path d = "M19 18v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARMCHAIR",
            html: lucide_armchair,
        }
    };
    const LUCIDE_ARROW_BIG_DOWN: Self = {
        #[inline(never)]
        fn lucide_arrow_big_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 3h6v11h4l-7 7-7-7h4z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_BIG_DOWN",
            html: lucide_arrow_big_down,
        }
    };
    const LUCIDE_ARROW_BIG_LEFT: Self = {
        #[inline(never)]
        fn lucide_arrow_big_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m3 12 7-7v4h11v6H10v4z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_BIG_LEFT",
            html: lucide_arrow_big_left,
        }
    };
    const LUCIDE_ARROW_BIG_RIGHT: Self = {
        #[inline(never)]
        fn lucide_arrow_big_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m21 12-7-7v4H3v6h11v4z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_BIG_RIGHT",
            html: lucide_arrow_big_right,
        }
    };
    const LUCIDE_ARROW_BIG_UP: Self = {
        #[inline(never)]
        fn lucide_arrow_big_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 21V10H5l7-7 7 7h-4v11z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_BIG_UP",
            html: lucide_arrow_big_up,
        }
    };
    const LUCIDE_ARROW_DOWN_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_arrow_down_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "8 12 12 16 16 12" /> < line x1 = "12" y1 = "8" x2 = "12" y2 = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_DOWN_CIRCLE",
            html: lucide_arrow_down_circle,
        }
    };
    const LUCIDE_ARROW_DOWN_LEFT: Self = {
        #[inline(never)]
        fn lucide_arrow_down_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "17" y1 = "7" x2 = "7" y2 = "17" /> < polyline points = "17 17 7 17 7 7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_DOWN_LEFT",
            html: lucide_arrow_down_left,
        }
    };
    const LUCIDE_ARROW_DOWN_RIGHT: Self = {
        #[inline(never)]
        fn lucide_arrow_down_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "7" y1 = "7" x2 = "17" y2 = "17" /> < polyline points = "17 7 17 17 7 17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_DOWN_RIGHT",
            html: lucide_arrow_down_right,
        }
    };
    const LUCIDE_ARROW_DOWN: Self = {
        #[inline(never)]
        fn lucide_arrow_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "12" y1 = "5" x2 = "12" y2 = "19" /> < polyline points = "19 12 12 19 5 12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_DOWN",
            html: lucide_arrow_down,
        }
    };
    const LUCIDE_ARROW_LEFT_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_arrow_left_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 8 8 12 12 16" /> < line x1 = "16" y1 = "12" x2 = "8" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_LEFT_CIRCLE",
            html: lucide_arrow_left_circle,
        }
    };
    const LUCIDE_ARROW_LEFT_RIGHT: Self = {
        #[inline(never)]
        fn lucide_arrow_left_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "17 11 21 7 17 3" /> < line x1 = "21" y1 = "7" x2 = "9" y2 = "7" /> < polyline points = "7 21 3 17 7 13" /> < line x1 = "15" y1 = "17" x2 = "3" y2 = "17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_LEFT_RIGHT",
            html: lucide_arrow_left_right,
        }
    };
    const LUCIDE_ARROW_LEFT: Self = {
        #[inline(never)]
        fn lucide_arrow_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "19" y1 = "12" x2 = "5" y2 = "12" /> < polyline points = "12 19 5 12 12 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_LEFT",
            html: lucide_arrow_left,
        }
    };
    const LUCIDE_ARROW_RIGHT_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_arrow_right_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 16 16 12 12 8" /> < line x1 = "8" y1 = "12" x2 = "16" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_RIGHT_CIRCLE",
            html: lucide_arrow_right_circle,
        }
    };
    const LUCIDE_ARROW_RIGHT: Self = {
        #[inline(never)]
        fn lucide_arrow_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "5" y1 = "12" x2 = "19" y2 = "12" /> < polyline points = "12 5 19 12 12 19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_RIGHT",
            html: lucide_arrow_right,
        }
    };
    const LUCIDE_ARROW_UP_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_arrow_up_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "16 12 12 8 8 12" /> < line x1 = "12" y1 = "16" x2 = "12" y2 = "8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_UP_CIRCLE",
            html: lucide_arrow_up_circle,
        }
    };
    const LUCIDE_ARROW_UP_DOWN: Self = {
        #[inline(never)]
        fn lucide_arrow_up_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "11 17 7 21 3 17" /> < line x1 = "7" y1 = "21" x2 = "7" y2 = "9" /> < polyline points = "21 7 17 3 13 7" /> < line x1 = "17" y1 = "15" x2 = "17" y2 = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_UP_DOWN",
            html: lucide_arrow_up_down,
        }
    };
    const LUCIDE_ARROW_UP_LEFT: Self = {
        #[inline(never)]
        fn lucide_arrow_up_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "17" y1 = "17" x2 = "7" y2 = "7" /> < polyline points = "7 17 7 7 17 7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_UP_LEFT",
            html: lucide_arrow_up_left,
        }
    };
    const LUCIDE_ARROW_UP_RIGHT: Self = {
        #[inline(never)]
        fn lucide_arrow_up_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "7" y1 = "17" x2 = "17" y2 = "7" /> < polyline points = "7 7 17 7 17 17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_UP_RIGHT",
            html: lucide_arrow_up_right,
        }
    };
    const LUCIDE_ARROW_UP: Self = {
        #[inline(never)]
        fn lucide_arrow_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "12" y1 = "19" x2 = "12" y2 = "5" /> < polyline points = "5 12 12 5 19 12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ARROW_UP",
            html: lucide_arrow_up,
        }
    };
    const LUCIDE_ASTERISK: Self = {
        #[inline(never)]
        fn lucide_asterisk(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 6v12" /> < path d = "M17.196 9 6.804 15" /> < path d = "m6.804 9 10.392 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ASTERISK",
            html: lucide_asterisk,
        }
    };
    const LUCIDE_AT_SIGN: Self = {
        #[inline(never)]
        fn lucide_at_sign(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "4" /> < path d = "M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94" /> </ svg > }
        }
        Self {
            name: "LUCIDE_AT_SIGN",
            html: lucide_at_sign,
        }
    };
    const LUCIDE_AWARD: Self = {
        #[inline(never)]
        fn lucide_award(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "8" r = "6" /> < path d = "M15.477 12.89 17 22l-5-3-5 3 1.523-9.11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_AWARD",
            html: lucide_award,
        }
    };
    const LUCIDE_AXE: Self = {
        #[inline(never)]
        fn lucide_axe(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m14 12-8.501 8.501a2.12 2.12 0 0 1-2.998 0h-.002a2.12 2.12 0 0 1 0-2.998L11 9.002" /> < path d = "m9 7 4-4 6 6h3l-.13.648a7.648 7.648 0 0 1-5.081 5.756L15 16v-3z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_AXE",
            html: lucide_axe,
        }
    };
    const LUCIDE_AXIS_3_D: Self = {
        #[inline(never)]
        fn lucide_axis_3_d(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 4v16h16" /> < path d = "m4 20 7-7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_AXIS_3_D",
            html: lucide_axis_3_d,
        }
    };
    const LUCIDE_BABY: Self = {
        #[inline(never)]
        fn lucide_baby(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 12h0" /> < path d = "M15 12h0" /> < path d = "M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5" /> < path d = "M19 6.3a9 9 0 0 1 1.8 3.9 2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BABY",
            html: lucide_baby,
        }
    };
    const LUCIDE_BACKPACK: Self = {
        #[inline(never)]
        fn lucide_backpack(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20V10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2Z" /> < path d = "M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2" /> < path d = "M8 21v-5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v5" /> < path d = "M8 10h8" /> < path d = "M8 18h8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BACKPACK",
            html: lucide_backpack,
        }
    };
    const LUCIDE_BAGGAGE_CLAIM: Self = {
        #[inline(never)]
        fn lucide_baggage_claim(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2" /> < path d = "M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10" /> < rect x = "8" y = "6" width = "13" height = "8" rx = "1" /> < circle cx = "18" cy = "20" r = "2" /> < circle cx = "9" cy = "20" r = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BAGGAGE_CLAIM",
            html: lucide_baggage_claim,
        }
    };
    const LUCIDE_BANANA: Self = {
        #[inline(never)]
        fn lucide_banana(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5" /> < path d = "M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BANANA",
            html: lucide_banana,
        }
    };
    const LUCIDE_BANKNOTE: Self = {
        #[inline(never)]
        fn lucide_banknote(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "6" width = "20" height = "12" rx = "2" /> < circle cx = "12" cy = "12" r = "2" /> < path d = "M6 12h.01M18 12h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BANKNOTE",
            html: lucide_banknote,
        }
    };
    const LUCIDE_BAR_CHART_2: Self = {
        #[inline(never)]
        fn lucide_bar_chart_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "18" y1 = "20" x2 = "18" y2 = "10" /> < line x1 = "12" y1 = "20" x2 = "12" y2 = "4" /> < line x1 = "6" y1 = "20" x2 = "6" y2 = "14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BAR_CHART_2",
            html: lucide_bar_chart_2,
        }
    };
    const LUCIDE_BAR_CHART_3: Self = {
        #[inline(never)]
        fn lucide_bar_chart_3(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 3v18h18" /> < path d = "M18 17V9" /> < path d = "M13 17V5" /> < path d = "M8 17v-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BAR_CHART_3",
            html: lucide_bar_chart_3,
        }
    };
    const LUCIDE_BAR_CHART_4: Self = {
        #[inline(never)]
        fn lucide_bar_chart_4(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 3v18h18" /> < path d = "M13 17V9" /> < path d = "M18 17V5" /> < path d = "M8 17v-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BAR_CHART_4",
            html: lucide_bar_chart_4,
        }
    };
    const LUCIDE_BAR_CHART_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_bar_chart_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 3v18h18" /> < path d = "M7 16h8" /> < path d = "M7 11h12" /> < path d = "M7 6h3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BAR_CHART_HORIZONTAL",
            html: lucide_bar_chart_horizontal,
        }
    };
    const LUCIDE_BAR_CHART: Self = {
        #[inline(never)]
        fn lucide_bar_chart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "12" y1 = "20" x2 = "12" y2 = "10" /> < line x1 = "18" y1 = "20" x2 = "18" y2 = "4" /> < line x1 = "6" y1 = "20" x2 = "6" y2 = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BAR_CHART",
            html: lucide_bar_chart,
        }
    };
    const LUCIDE_BASELINE: Self = {
        #[inline(never)]
        fn lucide_baseline(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16" /> < path d = "m6 16 6-12 6 12" /> < path d = "M8 12h8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BASELINE",
            html: lucide_baseline,
        }
    };
    const LUCIDE_BATH: Self = {
        #[inline(never)]
        fn lucide_bath(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 6 6.5 3.5a1.5 1.5 0 0 0-1-.5C4.683 3 4 3.683 4 4.5V17a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5" /> < line x1 = "10" y1 = "5" x2 = "8" y2 = "7" /> < line x1 = "2" y1 = "12" x2 = "22" y2 = "12" /> < line x1 = "7" y1 = "19" x2 = "7" y2 = "21" /> < line x1 = "17" y1 = "19" x2 = "17" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BATH",
            html: lucide_bath,
        }
    };
    const LUCIDE_BATTERY_CHARGING: Self = {
        #[inline(never)]
        fn lucide_battery_charging(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15 7h1a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-2" /> < path d = "M6 7H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h1" /> < path d = "m11 7-3 5h4l-3 5" /> < line x1 = "22" x2 = "22" y1 = "11" y2 = "13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BATTERY_CHARGING",
            html: lucide_battery_charging,
        }
    };
    const LUCIDE_BATTERY_FULL: Self = {
        #[inline(never)]
        fn lucide_battery_full(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "7" width = "16" height = "10" rx = "2" ry = "2" /> < line x1 = "22" x2 = "22" y1 = "11" y2 = "13" /> < line x1 = "6" x2 = "6" y1 = "11" y2 = "13" /> < line x1 = "10" x2 = "10" y1 = "11" y2 = "13" /> < line x1 = "14" x2 = "14" y1 = "11" y2 = "13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BATTERY_FULL",
            html: lucide_battery_full,
        }
    };
    const LUCIDE_BATTERY_LOW: Self = {
        #[inline(never)]
        fn lucide_battery_low(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "7" width = "16" height = "10" rx = "2" ry = "2" /> < line x1 = "22" x2 = "22" y1 = "11" y2 = "13" /> < line x1 = "6" x2 = "6" y1 = "11" y2 = "13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BATTERY_LOW",
            html: lucide_battery_low,
        }
    };
    const LUCIDE_BATTERY_MEDIUM: Self = {
        #[inline(never)]
        fn lucide_battery_medium(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "7" width = "16" height = "10" rx = "2" ry = "2" /> < line x1 = "22" x2 = "22" y1 = "11" y2 = "13" /> < line x1 = "6" x2 = "6" y1 = "11" y2 = "13" /> < line x1 = "10" x2 = "10" y1 = "11" y2 = "13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BATTERY_MEDIUM",
            html: lucide_battery_medium,
        }
    };
    const LUCIDE_BATTERY: Self = {
        #[inline(never)]
        fn lucide_battery(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "7" width = "16" height = "10" rx = "2" ry = "2" /> < line x1 = "22" x2 = "22" y1 = "11" y2 = "13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BATTERY",
            html: lucide_battery,
        }
    };
    const LUCIDE_BEAKER: Self = {
        #[inline(never)]
        fn lucide_beaker(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4.5 3h15" /> < path d = "M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3" /> < path d = "M6 14h12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BEAKER",
            html: lucide_beaker,
        }
    };
    const LUCIDE_BED_DOUBLE: Self = {
        #[inline(never)]
        fn lucide_bed_double(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8" /> < path d = "M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4" /> < path d = "M12 4v6" /> < path d = "M2 18h20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BED_DOUBLE",
            html: lucide_bed_double,
        }
    };
    const LUCIDE_BED_SINGLE: Self = {
        #[inline(never)]
        fn lucide_bed_single(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8" /> < path d = "M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4" /> < path d = "M3 18h18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BED_SINGLE",
            html: lucide_bed_single,
        }
    };
    const LUCIDE_BED: Self = {
        #[inline(never)]
        fn lucide_bed(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 4v16" /> < path d = "M2 8h18a2 2 0 0 1 2 2v10" /> < path d = "M2 17h20" /> < path d = "M6 8v9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BED",
            html: lucide_bed,
        }
    };
    const LUCIDE_BEER: Self = {
        #[inline(never)]
        fn lucide_beer(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17 11h1a3 3 0 0 1 0 6h-1" /> < path d = "M9 12v6" /> < path d = "M13 12v6" /> < path d = "M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z" /> < path d = "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BEER",
            html: lucide_beer,
        }
    };
    const LUCIDE_BELL_MINUS: Self = {
        #[inline(never)]
        fn lucide_bell_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M13.73 21a2 2 0 0 1-3.46 0" /> < path d = "M21 5h-6" /> < path d = "M18.021 9C18.29 15.193 21 17 21 17H3s3-2 3-9a6 6 0 0 1 7-5.916" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BELL_MINUS",
            html: lucide_bell_minus,
        }
    };
    const LUCIDE_BELL_OFF: Self = {
        #[inline(never)]
        fn lucide_bell_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M13.73 21a2 2 0 0 1-3.46 0" /> < path d = "M18.63 13A17.888 17.888 0 0 1 18 8" /> < path d = "M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14" /> < path d = "M18 8a6 6 0 0 0-9.33-5" /> < path d = "m2 2 20 20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BELL_OFF",
            html: lucide_bell_off,
        }
    };
    const LUCIDE_BELL_PLUS: Self = {
        #[inline(never)]
        fn lucide_bell_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18.387 12C19.198 15.799 21 17 21 17H3s3-2 3-9a6 6 0 0 1 7-5.916" /> < path d = "M13.73 21a2 2 0 0 1-3.46 0" /> < path d = "M18 2v6" /> < path d = "M21 5h-6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BELL_PLUS",
            html: lucide_bell_plus,
        }
    };
    const LUCIDE_BELL_RING: Self = {
        #[inline(never)]
        fn lucide_bell_ring(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9" /> < path d = "M13.73 21a2 2 0 0 1-3.46 0" /> < path d = "M2 8c0-2.2.7-4.3 2-6" /> < path d = "M22 8a10 10 0 0 0-2-6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BELL_RING",
            html: lucide_bell_ring,
        }
    };
    const LUCIDE_BELL: Self = {
        #[inline(never)]
        fn lucide_bell(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9" /> < path d = "M13.73 21a2 2 0 0 1-3.46 0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BELL",
            html: lucide_bell,
        }
    };
    const LUCIDE_BIKE: Self = {
        #[inline(never)]
        fn lucide_bike(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "5.5" cy = "17.5" r = "3.5" /> < circle cx = "18.5" cy = "17.5" r = "3.5" /> < path d = "M15 6a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm-3 11.5V14l-3-3 4-3 2 3h2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BIKE",
            html: lucide_bike,
        }
    };
    const LUCIDE_BINARY: Self = {
        #[inline(never)]
        fn lucide_binary(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 20h4" /> < path d = "M14 10h4" /> < path d = "M6 14h2v6" /> < path d = "M14 4h2v6" /> < rect x = "6" y = "4" width = "4" height = "6" /> < rect x = "14" y = "14" width = "4" height = "6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BINARY",
            html: lucide_binary,
        }
    };
    const LUCIDE_BITCOIN: Self = {
        #[inline(never)]
        fn lucide_bitcoin(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BITCOIN",
            html: lucide_bitcoin,
        }
    };
    const LUCIDE_BLUETOOTH_CONNECTED: Self = {
        #[inline(never)]
        fn lucide_bluetooth_connected(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m7 7 10 10-5 5V2l5 5L7 17" /> < line x1 = "18" y1 = "12" y2 = "12" x2 = "21" /> < line x1 = "3" y1 = "12" y2 = "12" x2 = "6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BLUETOOTH_CONNECTED",
            html: lucide_bluetooth_connected,
        }
    };
    const LUCIDE_BLUETOOTH_OFF: Self = {
        #[inline(never)]
        fn lucide_bluetooth_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m17 17-5 5V12l-5 5" /> < path d = "m2 2 20 20" /> < path d = "M14.5 9.5 17 7l-5-5v4.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BLUETOOTH_OFF",
            html: lucide_bluetooth_off,
        }
    };
    const LUCIDE_BLUETOOTH_SEARCHING: Self = {
        #[inline(never)]
        fn lucide_bluetooth_searching(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m7 7 10 10-5 5V2l5 5L7 17" /> < path d = "M20.83 14.83a4 4 0 0 0 0-5.66" /> < path d = "M18 12h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BLUETOOTH_SEARCHING",
            html: lucide_bluetooth_searching,
        }
    };
    const LUCIDE_BLUETOOTH: Self = {
        #[inline(never)]
        fn lucide_bluetooth(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m7 7 10 10-5 5V2l5 5L7 17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BLUETOOTH",
            html: lucide_bluetooth,
        }
    };
    const LUCIDE_BOLD: Self = {
        #[inline(never)]
        fn lucide_bold(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z" /> < path d = "M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOLD",
            html: lucide_bold,
        }
    };
    const LUCIDE_BOMB: Self = {
        #[inline(never)]
        fn lucide_bomb(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "11" cy = "13" r = "9" /> < path d = "m19.5 9.5 1.8-1.8a2.4 2.4 0 0 0 0-3.4l-1.6-1.6a2.41 2.41 0 0 0-3.4 0l-1.8 1.8" /> < path d = "m22 2-1.5 1.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOMB",
            html: lucide_bomb,
        }
    };
    const LUCIDE_BONE: Self = {
        #[inline(never)]
        fn lucide_bone(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18.6 9.82c-.52-.21-1.15-.25-1.54.15l-7.07 7.06c-.39.39-.36 1.03-.15 1.54.12.3.16.6.16.93a2.5 2.5 0 0 1-5 0c0-.26-.24-.5-.5-.5a2.5 2.5 0 1 1 .96-4.82c.5.21 1.14.25 1.53-.15l7.07-7.06c.39-.39.36-1.03.15-1.54-.12-.3-.21-.6-.21-.93a2.5 2.5 0 0 1 5 0c.01.26.24.49.5.5a2.5 2.5 0 1 1-.9 4.82Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BONE",
            html: lucide_bone,
        }
    };
    const LUCIDE_BOOK_OPEN_CHECK: Self = {
        #[inline(never)]
        fn lucide_book_open_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 3H2v15h7c1.7 0 3 1.3 3 3V7c0-2.2-1.8-4-4-4Z" /> < path d = "m16 12 2 2 4-4" /> < path d = "M22 6V3h-6c-2.2 0-4 1.8-4 4v14c0-1.7 1.3-3 3-3h7v-2.3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOOK_OPEN_CHECK",
            html: lucide_book_open_check,
        }
    };
    const LUCIDE_BOOK_OPEN: Self = {
        #[inline(never)]
        fn lucide_book_open(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z" /> < path d = "M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOOK_OPEN",
            html: lucide_book_open,
        }
    };
    const LUCIDE_BOOK: Self = {
        #[inline(never)]
        fn lucide_book(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 19.5A2.5 2.5 0 0 1 6.5 17H20" /> < path d = "M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOOK",
            html: lucide_book,
        }
    };
    const LUCIDE_BOOKMARK_MINUS: Self = {
        #[inline(never)]
        fn lucide_bookmark_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" /> < line x1 = "15" x2 = "9" y1 = "10" y2 = "10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOOKMARK_MINUS",
            html: lucide_bookmark_minus,
        }
    };
    const LUCIDE_BOOKMARK_PLUS: Self = {
        #[inline(never)]
        fn lucide_bookmark_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" /> < line x1 = "12" x2 = "12" y1 = "7" y2 = "13" /> < line x1 = "15" x2 = "9" y1 = "10" y2 = "10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOOKMARK_PLUS",
            html: lucide_bookmark_plus,
        }
    };
    const LUCIDE_BOOKMARK: Self = {
        #[inline(never)]
        fn lucide_bookmark(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOOKMARK",
            html: lucide_bookmark,
        }
    };
    const LUCIDE_BOT: Self = {
        #[inline(never)]
        fn lucide_bot(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "11" width = "18" height = "10" rx = "2" /> < circle cx = "12" cy = "5" r = "2" /> < path d = "M12 7v4" /> < line x1 = "8" y1 = "16" x2 = "8" y2 = "16" /> < line x1 = "16" y1 = "16" x2 = "16" y2 = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOT",
            html: lucide_bot,
        }
    };
    const LUCIDE_BOX_SELECT: Self = {
        #[inline(never)]
        fn lucide_box_select(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 3a2 2 0 0 0-2 2" /> < path d = "M19 3a2 2 0 0 1 2 2" /> < path d = "M21 19a2 2 0 0 1-2 2" /> < path d = "M5 21a2 2 0 0 1-2-2" /> < path d = "M9 3h1" /> < path d = "M9 21h1" /> < path d = "M14 3h1" /> < path d = "M14 21h1" /> < path d = "M3 9v1" /> < path d = "M21 9v1" /> < path d = "M3 14v1" /> < path d = "M21 14v1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOX_SELECT",
            html: lucide_box_select,
        }
    };
    const LUCIDE_BOX: Self = {
        #[inline(never)]
        fn lucide_box(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" /> < polyline points = "3.29 7 12 12 20.71 7" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOX",
            html: lucide_box,
        }
    };
    const LUCIDE_BOXES: Self = {
        #[inline(never)]
        fn lucide_boxes(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z" /> < path d = "m7 16.5-4.74-2.85" /> < path d = "m7 16.5 5-3" /> < path d = "M7 16.5v5.17" /> < path d = "M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z" /> < path d = "m17 16.5-5-3" /> < path d = "m17 16.5 4.74-2.85" /> < path d = "M17 16.5v5.17" /> < path d = "M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z" /> < path d = "M12 8 7.26 5.15" /> < path d = "m12 8 4.74-2.85" /> < path d = "M12 13.5V8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BOXES",
            html: lucide_boxes,
        }
    };
    const LUCIDE_BRIEFCASE: Self = {
        #[inline(never)]
        fn lucide_briefcase(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "7" width = "20" height = "14" rx = "2" ry = "2" /> < path d = "M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BRIEFCASE",
            html: lucide_briefcase,
        }
    };
    const LUCIDE_BRUSH: Self = {
        #[inline(never)]
        fn lucide_brush(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m9.06 11.9 8.07-8.06a2.85 2.85 0 1 1 4.03 4.03l-8.06 8.08" /> < path d = "M7.07 14.94c-1.66 0-3 1.35-3 3.02 0 1.33-2.5 1.52-2 2.02 1.08 1.1 2.49 2.02 4 2.02 2.2 0 4-1.8 4-4.04a3.01 3.01 0 0 0-3-3.02z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BRUSH",
            html: lucide_brush,
        }
    };
    const LUCIDE_BUG: Self = {
        #[inline(never)]
        fn lucide_bug(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect width = "8" height = "14" x = "8" y = "6" rx = "4" /> < path d = "m19 7-3 2" /> < path d = "m5 7 3 2" /> < path d = "m19 19-3-2" /> < path d = "m5 19 3-2" /> < path d = "M20 13h-4" /> < path d = "M4 13h4" /> < path d = "m10 4 1 2" /> < path d = "m14 4-1 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BUG",
            html: lucide_bug,
        }
    };
    const LUCIDE_BUILDING_2: Self = {
        #[inline(never)]
        fn lucide_building_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 22V4c0-.27 0-.55.07-.82a1.477 1.477 0 0 1 1.1-1.11C7.46 2 8.73 2 9 2h7c.27 0 .55 0 .82.07a1.477 1.477 0 0 1 1.11 1.1c.07.28.07.56.07.83v18H6Z" /> < path d = "M2 14v6c0 1.1.9 2 2 2h2V12H4c-.27 0-.55 0-.82.07-.27.07-.52.2-.72.4-.19.19-.32.44-.39.71A3.4 3.4 0 0 0 2 14Z" /> < path d = "M20.82 9.07A3.4 3.4 0 0 0 20 9h-2v13h2a2 2 0 0 0 2-2v-9c0-.28 0-.55-.07-.82-.07-.27-.2-.52-.4-.72-.19-.19-.44-.32-.71-.39Z" /> < path d = "M10 6h4" /> < path d = "M10 10h4" /> < path d = "M10 14h4" /> < path d = "M10 18h4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BUILDING_2",
            html: lucide_building_2,
        }
    };
    const LUCIDE_BUILDING: Self = {
        #[inline(never)]
        fn lucide_building(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "2" width = "16" height = "20" rx = "2" ry = "2" /> < path d = "M9 22v-4h6v4" /> < path d = "M8 6h.01" /> < path d = "M16 6h.01" /> < path d = "M12 6h.01" /> < path d = "M12 10h.01" /> < path d = "M12 14h.01" /> < path d = "M16 10h.01" /> < path d = "M16 14h.01" /> < path d = "M8 10h.01" /> < path d = "M8 14h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BUILDING",
            html: lucide_building,
        }
    };
    const LUCIDE_BUS: Self = {
        #[inline(never)]
        fn lucide_bus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M19 17h2l.64-2.54c.24-.959.24-1.962 0-2.92l-1.07-4.27A3 3 0 0 0 17.66 5H4a2 2 0 0 0-2 2v10h2" /> < path d = "M14 17H9" /> < circle cx = "6.5" cy = "17.5" r = "2.5" /> < circle cx = "16.5" cy = "17.5" r = "2.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_BUS",
            html: lucide_bus,
        }
    };
    const LUCIDE_CAKE: Self = {
        #[inline(never)]
        fn lucide_cake(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8" /> < path d = "M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1" /> < path d = "M2 21h20" /> < path d = "M7 8v2" /> < path d = "M12 8v2" /> < path d = "M17 8v2" /> < path d = "M7 4h.01" /> < path d = "M12 4h.01" /> < path d = "M17 4h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CAKE",
            html: lucide_cake,
        }
    };
    const LUCIDE_CALCULATOR: Self = {
        #[inline(never)]
        fn lucide_calculator(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "2" width = "16" height = "20" rx = "2" /> < line x1 = "8" x2 = "16" y1 = "6" y2 = "6" /> < line x1 = "16" x2 = "16" y1 = "14" y2 = "18" /> < path d = "M16 10h.01" /> < path d = "M12 10h.01" /> < path d = "M8 10h.01" /> < path d = "M12 14h.01" /> < path d = "M8 14h.01" /> < path d = "M12 18h.01" /> < path d = "M8 18h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALCULATOR",
            html: lucide_calculator,
        }
    };
    const LUCIDE_CALENDAR_CHECK_2: Self = {
        #[inline(never)]
        fn lucide_calendar_check_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "6" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "6" /> < line x1 = "3" y1 = "10" x2 = "21" y2 = "10" /> < path d = "m16 20 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_CHECK_2",
            html: lucide_calendar_check_2,
        }
    };
    const LUCIDE_CALENDAR_CHECK: Self = {
        #[inline(never)]
        fn lucide_calendar_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "4" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "6" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "6" /> < line x1 = "3" y1 = "10" x2 = "21" y2 = "10" /> < path d = "m9 16 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_CHECK",
            html: lucide_calendar_check,
        }
    };
    const LUCIDE_CALENDAR_CLOCK: Self = {
        #[inline(never)]
        fn lucide_calendar_clock(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5" /> < path d = "M16 2v4" /> < path d = "M8 2v4" /> < path d = "M3 10h5" /> < path d = "M17.5 17.5 16 16.25V14" /> < path d = "M22 16a6 6 0 1 1-12 0 6 6 0 0 1 12 0Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_CLOCK",
            html: lucide_calendar_clock,
        }
    };
    const LUCIDE_CALENDAR_DAYS: Self = {
        #[inline(never)]
        fn lucide_calendar_days(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "4" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "6" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "6" /> < line x1 = "3" y1 = "10" x2 = "21" y2 = "10" /> < path d = "M8 14h.01" /> < path d = "M12 14h.01" /> < path d = "M16 14h.01" /> < path d = "M8 18h.01" /> < path d = "M12 18h.01" /> < path d = "M16 18h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_DAYS",
            html: lucide_calendar_days,
        }
    };
    const LUCIDE_CALENDAR_HEART: Self = {
        #[inline(never)]
        fn lucide_calendar_heart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 10V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h7" /> < path d = "M16 2v4" /> < path d = "M8 2v4" /> < path d = "M3 10h18" /> < path d = "M21.29 14.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 22l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_HEART",
            html: lucide_calendar_heart,
        }
    };
    const LUCIDE_CALENDAR_MINUS: Self = {
        #[inline(never)]
        fn lucide_calendar_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "6" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "6" /> < line x1 = "3" y1 = "10" x2 = "21" y2 = "10" /> < line x1 = "16" y1 = "19" x2 = "22" y2 = "19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_MINUS",
            html: lucide_calendar_minus,
        }
    };
    const LUCIDE_CALENDAR_OFF: Self = {
        #[inline(never)]
        fn lucide_calendar_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4.18 4.18A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18" /> < path d = "M21 15.5V6a2 2 0 0 0-2-2H9.5" /> < path d = "M16 2v4" /> < path d = "M3 10h7" /> < path d = "M21 10h-5.5" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_OFF",
            html: lucide_calendar_off,
        }
    };
    const LUCIDE_CALENDAR_PLUS: Self = {
        #[inline(never)]
        fn lucide_calendar_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "6" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "6" /> < line x1 = "3" y1 = "10" x2 = "21" y2 = "10" /> < line x1 = "19" y1 = "16" x2 = "19" y2 = "22" /> < line x1 = "16" y1 = "19" x2 = "22" y2 = "19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_PLUS",
            html: lucide_calendar_plus,
        }
    };
    const LUCIDE_CALENDAR_RANGE: Self = {
        #[inline(never)]
        fn lucide_calendar_range(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "4" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "6" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "6" /> < line x1 = "3" y1 = "10" x2 = "21" y2 = "10" /> < path d = "M17 14h-6" /> < path d = "M13 18H7" /> < path d = "M7 14h.01" /> < path d = "M17 18h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_RANGE",
            html: lucide_calendar_range,
        }
    };
    const LUCIDE_CALENDAR_SEARCH: Self = {
        #[inline(never)]
        fn lucide_calendar_search(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 12V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h7.5" /> < path d = "M16 2v4" /> < path d = "M8 2v4" /> < path d = "M3 10h18" /> < path d = "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6v0Z" /> < path d = "m22 22-1.5-1.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_SEARCH",
            html: lucide_calendar_search,
        }
    };
    const LUCIDE_CALENDAR_X_2: Self = {
        #[inline(never)]
        fn lucide_calendar_x_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "6" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "6" /> < line x1 = "3" y1 = "10" x2 = "21" y2 = "10" /> < line x1 = "17" y1 = "17" x2 = "22" y2 = "22" /> < line x1 = "17" y1 = "22" x2 = "22" y2 = "17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_X_2",
            html: lucide_calendar_x_2,
        }
    };
    const LUCIDE_CALENDAR_X: Self = {
        #[inline(never)]
        fn lucide_calendar_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "4" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "6" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "6" /> < line x1 = "3" y1 = "10" x2 = "21" y2 = "10" /> < line x1 = "10" y1 = "14" x2 = "14" y2 = "18" /> < line x1 = "14" y1 = "14" x2 = "10" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR_X",
            html: lucide_calendar_x,
        }
    };
    const LUCIDE_CALENDAR: Self = {
        #[inline(never)]
        fn lucide_calendar(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "4" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "6" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "6" /> < line x1 = "3" y1 = "10" x2 = "21" y2 = "10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CALENDAR",
            html: lucide_calendar,
        }
    };
    const LUCIDE_CAMERA_OFF: Self = {
        #[inline(never)]
        fn lucide_camera_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> < path d = "M7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16" /> < path d = "M9.5 4h5L17 7h3a2 2 0 0 1 2 2v7.5" /> < path d = "M14.121 15.121A3 3 0 1 1 9.88 10.88" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CAMERA_OFF",
            html: lucide_camera_off,
        }
    };
    const LUCIDE_CAMERA: Self = {
        #[inline(never)]
        fn lucide_camera(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z" /> < circle cx = "12" cy = "13" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CAMERA",
            html: lucide_camera,
        }
    };
    const LUCIDE_CAR: Self = {
        #[inline(never)]
        fn lucide_car(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14 16H9m10 0h3v-3.15a1 1 0 0 0-.84-.99L16 11l-2.7-3.6a1 1 0 0 0-.8-.4H5.24a2 2 0 0 0-1.8 1.1l-.8 1.63A6 6 0 0 0 2 12.42V16h2" /> < circle cx = "6.5" cy = "16.5" r = "2.5" /> < circle cx = "16.5" cy = "16.5" r = "2.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CAR",
            html: lucide_car,
        }
    };
    const LUCIDE_CARROT: Self = {
        #[inline(never)]
        fn lucide_carrot(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46" /> < path d = "M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z" /> < path d = "M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CARROT",
            html: lucide_carrot,
        }
    };
    const LUCIDE_CAST: Self = {
        #[inline(never)]
        fn lucide_cast(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6" /> < path d = "M2 12a9 9 0 0 1 8 8" /> < path d = "M2 16a5 5 0 0 1 4 4" /> < line x1 = "2" y1 = "20" x2 = "2.01" y2 = "20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CAST",
            html: lucide_cast,
        }
    };
    const LUCIDE_CHECK_CIRCLE_2: Self = {
        #[inline(never)]
        fn lucide_check_circle_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" /> < path d = "m9 12 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHECK_CIRCLE_2",
            html: lucide_check_circle_2,
        }
    };
    const LUCIDE_CHECK_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_check_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 11.08V12a10 10 0 1 1-5.93-9.14" /> < polyline points = "22 4 12 14.01 9 11.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHECK_CIRCLE",
            html: lucide_check_circle,
        }
    };
    const LUCIDE_CHECK_SQUARE: Self = {
        #[inline(never)]
        fn lucide_check_square(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "9 11 12 14 22 4" /> < path d = "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHECK_SQUARE",
            html: lucide_check_square,
        }
    };
    const LUCIDE_CHECK: Self = {
        #[inline(never)]
        fn lucide_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "20 6 9 17 4 12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHECK",
            html: lucide_check,
        }
    };
    const LUCIDE_CHEF_HAT: Self = {
        #[inline(never)]
        fn lucide_chef_hat(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 13.87A4 4 0 0 1 7.41 6a5.11 5.11 0 0 1 1.05-1.54 5 5 0 0 1 7.08 0A5.11 5.11 0 0 1 16.59 6 4 4 0 0 1 18 13.87V21H6Z" /> < line x1 = "6" y1 = "17" x2 = "18" y2 = "17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEF_HAT",
            html: lucide_chef_hat,
        }
    };
    const LUCIDE_CHERRY: Self = {
        #[inline(never)]
        fn lucide_cherry(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z" /> < path d = "M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z" /> < path d = "M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12" /> < path d = "M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHERRY",
            html: lucide_cherry,
        }
    };
    const LUCIDE_CHEVRON_DOWN: Self = {
        #[inline(never)]
        fn lucide_chevron_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "6 9 12 15 18 9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRON_DOWN",
            html: lucide_chevron_down,
        }
    };
    const LUCIDE_CHEVRON_FIRST: Self = {
        #[inline(never)]
        fn lucide_chevron_first(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "17 18 11 12 17 6" /> < path d = "M7 6v12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRON_FIRST",
            html: lucide_chevron_first,
        }
    };
    const LUCIDE_CHEVRON_LAST: Self = {
        #[inline(never)]
        fn lucide_chevron_last(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "7 18 13 12 7 6" /> < path d = "M17 6v12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRON_LAST",
            html: lucide_chevron_last,
        }
    };
    const LUCIDE_CHEVRON_LEFT: Self = {
        #[inline(never)]
        fn lucide_chevron_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "15 18 9 12 15 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRON_LEFT",
            html: lucide_chevron_left,
        }
    };
    const LUCIDE_CHEVRON_RIGHT: Self = {
        #[inline(never)]
        fn lucide_chevron_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "9 18 15 12 9 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRON_RIGHT",
            html: lucide_chevron_right,
        }
    };
    const LUCIDE_CHEVRON_UP: Self = {
        #[inline(never)]
        fn lucide_chevron_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "18 15 12 9 6 15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRON_UP",
            html: lucide_chevron_up,
        }
    };
    const LUCIDE_CHEVRONS_DOWN_UP: Self = {
        #[inline(never)]
        fn lucide_chevrons_down_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m7 20 5-5 5 5" /> < path d = "m7 4 5 5 5-5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRONS_DOWN_UP",
            html: lucide_chevrons_down_up,
        }
    };
    const LUCIDE_CHEVRONS_DOWN: Self = {
        #[inline(never)]
        fn lucide_chevrons_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "7 13 12 18 17 13" /> < polyline points = "7 6 12 11 17 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRONS_DOWN",
            html: lucide_chevrons_down,
        }
    };
    const LUCIDE_CHEVRONS_LEFT_RIGHT: Self = {
        #[inline(never)]
        fn lucide_chevrons_left_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m9 7-5 5 5 5" /> < path d = "m15 7 5 5-5 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRONS_LEFT_RIGHT",
            html: lucide_chevrons_left_right,
        }
    };
    const LUCIDE_CHEVRONS_LEFT: Self = {
        #[inline(never)]
        fn lucide_chevrons_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "11 17 6 12 11 7" /> < polyline points = "18 17 13 12 18 7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRONS_LEFT",
            html: lucide_chevrons_left,
        }
    };
    const LUCIDE_CHEVRONS_RIGHT_LEFT: Self = {
        #[inline(never)]
        fn lucide_chevrons_right_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m20 17-5-5 5-5" /> < path d = "m4 17 5-5-5-5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRONS_RIGHT_LEFT",
            html: lucide_chevrons_right_left,
        }
    };
    const LUCIDE_CHEVRONS_RIGHT: Self = {
        #[inline(never)]
        fn lucide_chevrons_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "13 17 18 12 13 7" /> < polyline points = "6 17 11 12 6 7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRONS_RIGHT",
            html: lucide_chevrons_right,
        }
    };
    const LUCIDE_CHEVRONS_UP_DOWN: Self = {
        #[inline(never)]
        fn lucide_chevrons_up_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m7 15 5 5 5-5" /> < path d = "m7 9 5-5 5 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRONS_UP_DOWN",
            html: lucide_chevrons_up_down,
        }
    };
    const LUCIDE_CHEVRONS_UP: Self = {
        #[inline(never)]
        fn lucide_chevrons_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "17 11 12 6 7 11" /> < polyline points = "17 18 12 13 7 18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHEVRONS_UP",
            html: lucide_chevrons_up,
        }
    };
    const LUCIDE_CHROME: Self = {
        #[inline(never)]
        fn lucide_chrome(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < circle cx = "12" cy = "12" r = "4" /> < line x1 = "21.17" y1 = "8" x2 = "12" y2 = "8" /> < line x1 = "3.95" y1 = "6.06" x2 = "8.54" y2 = "14" /> < line x1 = "10.88" y1 = "21.94" x2 = "15.46" y2 = "14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CHROME",
            html: lucide_chrome,
        }
    };
    const LUCIDE_CIGARETTE_OFF: Self = {
        #[inline(never)]
        fn lucide_cigarette_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> < path d = "M12 12H2v4h14" /> < path d = "M22 12v4" /> < path d = "M18 12h-.5" /> < path d = "M7 12v4" /> < path d = "M18 8c0-2.5-2-2.5-2-5" /> < path d = "M22 8c0-2.5-2-2.5-2-5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CIGARETTE_OFF",
            html: lucide_cigarette_off,
        }
    };
    const LUCIDE_CIGARETTE: Self = {
        #[inline(never)]
        fn lucide_cigarette(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 12H2v4h16" /> < path d = "M22 12v4" /> < path d = "M7 12v4" /> < path d = "M18 8c0-2.5-2-2.5-2-5" /> < path d = "M22 8c0-2.5-2-2.5-2-5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CIGARETTE",
            html: lucide_cigarette,
        }
    };
    const LUCIDE_CIRCLE_DOT: Self = {
        #[inline(never)]
        fn lucide_circle_dot(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < circle cx = "12" cy = "12" r = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CIRCLE_DOT",
            html: lucide_circle_dot,
        }
    };
    const LUCIDE_CIRCLE_ELLIPSIS: Self = {
        #[inline(never)]
        fn lucide_circle_ellipsis(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M17 12h.01" /> < path d = "M12 12h.01" /> < path d = "M7 12h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CIRCLE_ELLIPSIS",
            html: lucide_circle_ellipsis,
        }
    };
    const LUCIDE_CIRCLE_SLASHED: Self = {
        #[inline(never)]
        fn lucide_circle_slashed(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M22 2 2 22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CIRCLE_SLASHED",
            html: lucide_circle_slashed,
        }
    };
    const LUCIDE_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CIRCLE",
            html: lucide_circle,
        }
    };
    const LUCIDE_CITRUS: Self = {
        #[inline(never)]
        fn lucide_citrus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5.51 18.49a12 12 0 0 0 16.12.78c.49-.41.49-1.15.03-1.6L6.34 2.33a1.08 1.08 0 0 0-1.6.03A12 12 0 0 0 5.5 18.5Z" /> < path d = "M8.34 15.66a8 8 0 0 0 10.4.78c.54-.4.54-1.16.06-1.64L9.2 5.2c-.48-.48-1.25-.48-1.64.06a8 8 0 0 0 .78 10.4Z" /> < path d = "m14 10-5.5 5.5" /> < path d = "M14 10v8" /> < path d = "M14 10H6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CITRUS",
            html: lucide_citrus,
        }
    };
    const LUCIDE_CLAPPERBOARD: Self = {
        #[inline(never)]
        fn lucide_clapperboard(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 11v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8H4Z" /> < path d = "m4 11-.88-2.87a2 2 0 0 1 1.33-2.5l11.48-3.5a2 2 0 0 1 2.5 1.32l.87 2.87L4 11.01Z" /> < path d = "m6.6 4.99 3.38 4.2" /> < path d = "m11.86 3.38 3.38 4.2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLAPPERBOARD",
            html: lucide_clapperboard,
        }
    };
    const LUCIDE_CLIPBOARD_CHECK: Self = {
        #[inline(never)]
        fn lucide_clipboard_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "8" y = "2" width = "8" height = "4" rx = "1" ry = "1" /> < path d = "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> < path d = "m9 14 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLIPBOARD_CHECK",
            html: lucide_clipboard_check,
        }
    };
    const LUCIDE_CLIPBOARD_COPY: Self = {
        #[inline(never)]
        fn lucide_clipboard_copy(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "8" y = "2" width = "8" height = "4" rx = "1" ry = "1" /> < path d = "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2" /> < path d = "M16 4h2a2 2 0 0 1 2 2v4" /> < path d = "M21 14H11" /> < path d = "m15 10-4 4 4 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLIPBOARD_COPY",
            html: lucide_clipboard_copy,
        }
    };
    const LUCIDE_CLIPBOARD_EDIT: Self = {
        #[inline(never)]
        fn lucide_clipboard_edit(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "8" y = "2" width = "8" height = "4" rx = "1" ry = "1" /> < path d = "M10.42 12.61a2.1 2.1 0 1 1 2.97 2.97L7.95 21 4 22l.99-3.95 5.43-5.44Z" /> < path d = "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5" /> < path d = "M4 13.5V6a2 2 0 0 1 2-2h2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLIPBOARD_EDIT",
            html: lucide_clipboard_edit,
        }
    };
    const LUCIDE_CLIPBOARD_LIST: Self = {
        #[inline(never)]
        fn lucide_clipboard_list(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "8" y = "2" width = "8" height = "4" rx = "1" ry = "1" /> < path d = "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> < path d = "M12 11h4" /> < path d = "M12 16h4" /> < path d = "M8 11h.01" /> < path d = "M8 16h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLIPBOARD_LIST",
            html: lucide_clipboard_list,
        }
    };
    const LUCIDE_CLIPBOARD_SIGNATURE: Self = {
        #[inline(never)]
        fn lucide_clipboard_signature(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "8" y = "2" width = "8" height = "4" rx = "1" ry = "1" /> < path d = "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5" /> < path d = "M16 4h2a2 2 0 0 1 1.73 1" /> < path d = "M18.42 9.61a2.1 2.1 0 1 1 2.97 2.97L16.95 17 13 18l.99-3.95 4.43-4.44Z" /> < path d = "M8 18h1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLIPBOARD_SIGNATURE",
            html: lucide_clipboard_signature,
        }
    };
    const LUCIDE_CLIPBOARD_TYPE: Self = {
        #[inline(never)]
        fn lucide_clipboard_type(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "8" y = "2" width = "8" height = "4" rx = "1" ry = "1" /> < path d = "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> < path d = "M9 12v-1h6v1" /> < path d = "M11 17h2" /> < path d = "M12 11v6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLIPBOARD_TYPE",
            html: lucide_clipboard_type,
        }
    };
    const LUCIDE_CLIPBOARD_X: Self = {
        #[inline(never)]
        fn lucide_clipboard_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "8" y = "2" width = "8" height = "4" rx = "1" ry = "1" /> < path d = "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> < path d = "m15 11-6 6" /> < path d = "m9 11 6 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLIPBOARD_X",
            html: lucide_clipboard_x,
        }
    };
    const LUCIDE_CLIPBOARD: Self = {
        #[inline(never)]
        fn lucide_clipboard(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "8" y = "2" width = "8" height = "4" rx = "1" ry = "1" /> < path d = "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLIPBOARD",
            html: lucide_clipboard,
        }
    };
    const LUCIDE_CLOCK_1: Self = {
        #[inline(never)]
        fn lucide_clock_1(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 14.5 8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_1",
            html: lucide_clock_1,
        }
    };
    const LUCIDE_CLOCK_10: Self = {
        #[inline(never)]
        fn lucide_clock_10(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 8 10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_10",
            html: lucide_clock_10,
        }
    };
    const LUCIDE_CLOCK_11: Self = {
        #[inline(never)]
        fn lucide_clock_11(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 9.5 8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_11",
            html: lucide_clock_11,
        }
    };
    const LUCIDE_CLOCK_12: Self = {
        #[inline(never)]
        fn lucide_clock_12(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_12",
            html: lucide_clock_12,
        }
    };
    const LUCIDE_CLOCK_2: Self = {
        #[inline(never)]
        fn lucide_clock_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 16 10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_2",
            html: lucide_clock_2,
        }
    };
    const LUCIDE_CLOCK_3: Self = {
        #[inline(never)]
        fn lucide_clock_3(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 16.5 12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_3",
            html: lucide_clock_3,
        }
    };
    const LUCIDE_CLOCK_4: Self = {
        #[inline(never)]
        fn lucide_clock_4(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 16 14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_4",
            html: lucide_clock_4,
        }
    };
    const LUCIDE_CLOCK_5: Self = {
        #[inline(never)]
        fn lucide_clock_5(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 14.5 16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_5",
            html: lucide_clock_5,
        }
    };
    const LUCIDE_CLOCK_6: Self = {
        #[inline(never)]
        fn lucide_clock_6(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 12 16.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_6",
            html: lucide_clock_6,
        }
    };
    const LUCIDE_CLOCK_7: Self = {
        #[inline(never)]
        fn lucide_clock_7(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 9.5 16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_7",
            html: lucide_clock_7,
        }
    };
    const LUCIDE_CLOCK_8: Self = {
        #[inline(never)]
        fn lucide_clock_8(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 8 14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_8",
            html: lucide_clock_8,
        }
    };
    const LUCIDE_CLOCK_9: Self = {
        #[inline(never)]
        fn lucide_clock_9(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 7.5 12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK_9",
            html: lucide_clock_9,
        }
    };
    const LUCIDE_CLOCK: Self = {
        #[inline(never)]
        fn lucide_clock(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polyline points = "12 6 12 12 16 14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOCK",
            html: lucide_clock,
        }
    };
    const LUCIDE_CLOUD_COG: Self = {
        #[inline(never)]
        fn lucide_cloud_cog(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 16.2A4.5 4.5 0 0 0 17.5 8h-1.8A7 7 0 1 0 4 14.9" /> < circle cx = "12" cy = "17" r = "3" /> < path d = "M12 13v1" /> < path d = "M12 20v1" /> < path d = "M16 17h-1" /> < path d = "M9 17H8" /> < path d = "m15 14-.88.88" /> < path d = "M9.88 19.12 9 20" /> < path d = "m15 20-.88-.88" /> < path d = "M9.88 14.88 9 14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_COG",
            html: lucide_cloud_cog,
        }
    };
    const LUCIDE_CLOUD_DRIZZLE: Self = {
        #[inline(never)]
        fn lucide_cloud_drizzle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> < path d = "M8 19v1" /> < path d = "M8 14v1" /> < path d = "M16 19v1" /> < path d = "M16 14v1" /> < path d = "M12 21v1" /> < path d = "M12 16v1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_DRIZZLE",
            html: lucide_cloud_drizzle,
        }
    };
    const LUCIDE_CLOUD_FOG: Self = {
        #[inline(never)]
        fn lucide_cloud_fog(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> < path d = "M16 17H7" /> < path d = "M17 21H9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_FOG",
            html: lucide_cloud_fog,
        }
    };
    const LUCIDE_CLOUD_HAIL: Self = {
        #[inline(never)]
        fn lucide_cloud_hail(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> < path d = "M16 14v2" /> < path d = "M8 14v2" /> < path d = "M16 20h.01" /> < path d = "M8 20h.01" /> < path d = "M12 16v2" /> < path d = "M12 22h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_HAIL",
            html: lucide_cloud_hail,
        }
    };
    const LUCIDE_CLOUD_LIGHTNING: Self = {
        #[inline(never)]
        fn lucide_cloud_lightning(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973" /> < path d = "m13 12-3 5h4l-3 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_LIGHTNING",
            html: lucide_cloud_lightning,
        }
    };
    const LUCIDE_CLOUD_MOON_RAIN: Self = {
        #[inline(never)]
        fn lucide_cloud_moon_rain(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10.083 9A6.002 6.002 0 0 1 16 4a4.243 4.243 0 0 0 6 6c0 2.22-1.206 4.16-3 5.197" /> < path d = "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24" /> < path d = "M11 20v2" /> < path d = "M7 19v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_MOON_RAIN",
            html: lucide_cloud_moon_rain,
        }
    };
    const LUCIDE_CLOUD_MOON: Self = {
        #[inline(never)]
        fn lucide_cloud_moon(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z" /> < path d = "M10.083 9A6.002 6.002 0 0 1 16 4a4.243 4.243 0 0 0 6 6c0 2.22-1.206 4.16-3 5.197" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_MOON",
            html: lucide_cloud_moon,
        }
    };
    const LUCIDE_CLOUD_OFF: Self = {
        #[inline(never)]
        fn lucide_cloud_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m2 2 20 20" /> < path d = "M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193" /> < path d = "M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_OFF",
            html: lucide_cloud_off,
        }
    };
    const LUCIDE_CLOUD_RAIN_WIND: Self = {
        #[inline(never)]
        fn lucide_cloud_rain_wind(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> < path d = "m9.2 22 3-7" /> < path d = "m9 13-3 7" /> < path d = "m17 13-3 7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_RAIN_WIND",
            html: lucide_cloud_rain_wind,
        }
    };
    const LUCIDE_CLOUD_RAIN: Self = {
        #[inline(never)]
        fn lucide_cloud_rain(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> < path d = "M16 14v6" /> < path d = "M8 14v6" /> < path d = "M12 16v6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_RAIN",
            html: lucide_cloud_rain,
        }
    };
    const LUCIDE_CLOUD_SNOW: Self = {
        #[inline(never)]
        fn lucide_cloud_snow(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> < path d = "M8 15h.01" /> < path d = "M8 19h.01" /> < path d = "M12 17h.01" /> < path d = "M12 21h.01" /> < path d = "M16 15h.01" /> < path d = "M16 19h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_SNOW",
            html: lucide_cloud_snow,
        }
    };
    const LUCIDE_CLOUD_SUN_RAIN: Self = {
        #[inline(never)]
        fn lucide_cloud_sun_rain(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 2v2" /> < path d = "m4.93 4.93 1.41 1.41" /> < path d = "M20 12h2" /> < path d = "m19.07 4.93-1.41 1.41" /> < path d = "M15.947 12.65a4 4 0 0 0-5.925-4.128" /> < path d = "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24" /> < path d = "M11 20v2" /> < path d = "M7 19v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_SUN_RAIN",
            html: lucide_cloud_sun_rain,
        }
    };
    const LUCIDE_CLOUD_SUN: Self = {
        #[inline(never)]
        fn lucide_cloud_sun(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 2v2" /> < path d = "m4.93 4.93 1.41 1.41" /> < path d = "M20 12h2" /> < path d = "m19.07 4.93-1.41 1.41" /> < path d = "M15.947 12.65a4 4 0 0 0-5.925-4.128" /> < path d = "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD_SUN",
            html: lucide_cloud_sun,
        }
    };
    const LUCIDE_CLOUD: Self = {
        #[inline(never)]
        fn lucide_cloud(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUD",
            html: lucide_cloud,
        }
    };
    const LUCIDE_CLOUDY: Self = {
        #[inline(never)]
        fn lucide_cloudy(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z" /> < path d = "M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOUDY",
            html: lucide_cloudy,
        }
    };
    const LUCIDE_CLOVER: Self = {
        #[inline(never)]
        fn lucide_clover(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16.2 3.8a2.7 2.7 0 0 0-3.81 0l-.4.38-.4-.4a2.7 2.7 0 0 0-3.82 0C6.73 4.85 6.67 6.64 8 8l4 4 4-4c1.33-1.36 1.27-3.15.2-4.2z" /> < path d = "M8 8c-1.36-1.33-3.15-1.27-4.2-.2a2.7 2.7 0 0 0 0 3.81l.38.4-.4.4a2.7 2.7 0 0 0 0 3.82C4.85 17.27 6.64 17.33 8 16" /> < path d = "M16 16c1.36 1.33 3.15 1.27 4.2.2a2.7 2.7 0 0 0 0-3.81l-.38-.4.4-.4a2.7 2.7 0 0 0 0-3.82C19.15 6.73 17.36 6.67 16 8" /> < path d = "M7.8 20.2a2.7 2.7 0 0 0 3.81 0l.4-.38.4.4a2.7 2.7 0 0 0 3.82 0c1.06-1.06 1.12-2.85-.21-4.21l-4-4-4 4c-1.33 1.36-1.27 3.15-.2 4.2z" /> < path d = "m7 17-5 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CLOVER",
            html: lucide_clover,
        }
    };
    const LUCIDE_CODE_2: Self = {
        #[inline(never)]
        fn lucide_code_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m18 16 4-4-4-4" /> < path d = "m6 8-4 4 4 4" /> < path d = "m14.5 4-5 16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CODE_2",
            html: lucide_code_2,
        }
    };
    const LUCIDE_CODE: Self = {
        #[inline(never)]
        fn lucide_code(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "16 18 22 12 16 6" /> < polyline points = "8 6 2 12 8 18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CODE",
            html: lucide_code,
        }
    };
    const LUCIDE_CODEPEN: Self = {
        #[inline(never)]
        fn lucide_codepen(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "15.5" /> < polyline points = "22 8.5 12 15.5 2 8.5" /> < polyline points = "2 15.5 12 8.5 22 15.5" /> < line x1 = "12" y1 = "2" x2 = "12" y2 = "8.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CODEPEN",
            html: lucide_codepen,
        }
    };
    const LUCIDE_CODESANDBOX: Self = {
        #[inline(never)]
        fn lucide_codesandbox(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" /> < polyline points = "7.5 4.21 12 6.81 16.5 4.21" /> < polyline points = "7.5 19.79 7.5 14.6 3 12" /> < polyline points = "21 12 16.5 14.6 16.5 19.79" /> < polyline points = "3.27 6.96 12 12.01 20.73 6.96" /> < line x1 = "12" y1 = "22.08" x2 = "12" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CODESANDBOX",
            html: lucide_codesandbox,
        }
    };
    const LUCIDE_COFFEE: Self = {
        #[inline(never)]
        fn lucide_coffee(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17 8h1a4 4 0 1 1 0 8h-1" /> < path d = "M3 8h14v9a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4Z" /> < line x1 = "6" y1 = "2" x2 = "6" y2 = "4" /> < line x1 = "10" y1 = "2" x2 = "10" y2 = "4" /> < line x1 = "14" y1 = "2" x2 = "14" y2 = "4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COFFEE",
            html: lucide_coffee,
        }
    };
    const LUCIDE_COG: Self = {
        #[inline(never)]
        fn lucide_cog(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z" /> < path d = "M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" /> < path d = "M12 2v2" /> < path d = "M12 22v-2" /> < path d = "m17 20.66-1-1.73" /> < path d = "M11 10.27 7 3.34" /> < path d = "m20.66 17-1.73-1" /> < path d = "m3.34 7 1.73 1" /> < path d = "M14 12h8" /> < path d = "M2 12h2" /> < path d = "m20.66 7-1.73 1" /> < path d = "m3.34 17 1.73-1" /> < path d = "m17 3.34-1 1.73" /> < path d = "m11 13.73-4 6.93" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COG",
            html: lucide_cog,
        }
    };
    const LUCIDE_COINS: Self = {
        #[inline(never)]
        fn lucide_coins(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "8" cy = "8" r = "6" /> < path d = "M18.09 10.37A6 6 0 1 1 10.34 18" /> < path d = "M7 6h1v4" /> < path d = "m16.71 13.88.7.71-2.82 2.82" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COINS",
            html: lucide_coins,
        }
    };
    const LUCIDE_COLUMNS: Self = {
        #[inline(never)]
        fn lucide_columns(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "12" y1 = "3" x2 = "12" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COLUMNS",
            html: lucide_columns,
        }
    };
    const LUCIDE_COMMAND: Self = {
        #[inline(never)]
        fn lucide_command(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COMMAND",
            html: lucide_command,
        }
    };
    const LUCIDE_COMPASS: Self = {
        #[inline(never)]
        fn lucide_compass(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polygon points = "16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COMPASS",
            html: lucide_compass,
        }
    };
    const LUCIDE_COMPONENT: Self = {
        #[inline(never)]
        fn lucide_component(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5.5 8.5 9 12l-3.5 3.5L2 12l3.5-3.5Z" /> < path d = "m12 2 3.5 3.5L12 9 8.5 5.5 12 2Z" /> < path d = "M18.5 8.5 22 12l-3.5 3.5L15 12l3.5-3.5Z" /> < path d = "m12 15 3.5 3.5L12 22l-3.5-3.5L12 15Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COMPONENT",
            html: lucide_component,
        }
    };
    const LUCIDE_CONCIERGE_BELL: Self = {
        #[inline(never)]
        fn lucide_concierge_bell(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 18a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2H2v-2Z" /> < path d = "M20 16a8 8 0 1 0-16 0" /> < path d = "M12 4v4" /> < path d = "M10 4h4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CONCIERGE_BELL",
            html: lucide_concierge_bell,
        }
    };
    const LUCIDE_CONTACT: Self = {
        #[inline(never)]
        fn lucide_contact(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17 18a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2" /> < rect x = "3" y = "4" width = "18" height = "18" rx = "2" /> < circle cx = "12" cy = "10" r = "2" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "4" /> < line x1 = "16" y1 = "2" x2 = "16" y2 = "4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CONTACT",
            html: lucide_contact,
        }
    };
    const LUCIDE_CONTRAST: Self = {
        #[inline(never)]
        fn lucide_contrast(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M12 18a6 6 0 0 0 0-12v12z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CONTRAST",
            html: lucide_contrast,
        }
    };
    const LUCIDE_COOKIE: Self = {
        #[inline(never)]
        fn lucide_cookie(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5" /> < path d = "M8.5 8.5v.01" /> < path d = "M16 15.5v.01" /> < path d = "M12 12v.01" /> < path d = "M11 17v.01" /> < path d = "M7 14v.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COOKIE",
            html: lucide_cookie,
        }
    };
    const LUCIDE_COPY: Self = {
        #[inline(never)]
        fn lucide_copy(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "9" y = "9" width = "13" height = "13" rx = "2" ry = "2" /> < path d = "M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COPY",
            html: lucide_copy,
        }
    };
    const LUCIDE_COPYLEFT: Self = {
        #[inline(never)]
        fn lucide_copyleft(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M9 9.35a4 4 0 1 1 0 5.3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COPYLEFT",
            html: lucide_copyleft,
        }
    };
    const LUCIDE_COPYRIGHT: Self = {
        #[inline(never)]
        fn lucide_copyright(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M15 9.354a4 4 0 1 0 0 5.292" /> </ svg > }
        }
        Self {
            name: "LUCIDE_COPYRIGHT",
            html: lucide_copyright,
        }
    };
    const LUCIDE_CORNER_DOWN_LEFT: Self = {
        #[inline(never)]
        fn lucide_corner_down_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "9 10 4 15 9 20" /> < path d = "M20 4v7a4 4 0 0 1-4 4H4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CORNER_DOWN_LEFT",
            html: lucide_corner_down_left,
        }
    };
    const LUCIDE_CORNER_DOWN_RIGHT: Self = {
        #[inline(never)]
        fn lucide_corner_down_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "15 10 20 15 15 20" /> < path d = "M4 4v7a4 4 0 0 0 4 4h12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CORNER_DOWN_RIGHT",
            html: lucide_corner_down_right,
        }
    };
    const LUCIDE_CORNER_LEFT_DOWN: Self = {
        #[inline(never)]
        fn lucide_corner_left_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "14 15 9 20 4 15" /> < path d = "M20 4h-7a4 4 0 0 0-4 4v12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CORNER_LEFT_DOWN",
            html: lucide_corner_left_down,
        }
    };
    const LUCIDE_CORNER_LEFT_UP: Self = {
        #[inline(never)]
        fn lucide_corner_left_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "14 9 9 4 4 9" /> < path d = "M20 20h-7a4 4 0 0 1-4-4V4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CORNER_LEFT_UP",
            html: lucide_corner_left_up,
        }
    };
    const LUCIDE_CORNER_RIGHT_DOWN: Self = {
        #[inline(never)]
        fn lucide_corner_right_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "10 15 15 20 20 15" /> < path d = "M4 4h7a4 4 0 0 1 4 4v12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CORNER_RIGHT_DOWN",
            html: lucide_corner_right_down,
        }
    };
    const LUCIDE_CORNER_RIGHT_UP: Self = {
        #[inline(never)]
        fn lucide_corner_right_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "10 9 15 4 20 9" /> < path d = "M4 20h7a4 4 0 0 0 4-4V4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CORNER_RIGHT_UP",
            html: lucide_corner_right_up,
        }
    };
    const LUCIDE_CORNER_UP_LEFT: Self = {
        #[inline(never)]
        fn lucide_corner_up_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "9 14 4 9 9 4" /> < path d = "M20 20v-7a4 4 0 0 0-4-4H4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CORNER_UP_LEFT",
            html: lucide_corner_up_left,
        }
    };
    const LUCIDE_CORNER_UP_RIGHT: Self = {
        #[inline(never)]
        fn lucide_corner_up_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "15 14 20 9 15 4" /> < path d = "M4 20v-7a4 4 0 0 1 4-4h12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CORNER_UP_RIGHT",
            html: lucide_corner_up_right,
        }
    };
    const LUCIDE_CPU: Self = {
        #[inline(never)]
        fn lucide_cpu(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "4" width = "16" height = "16" rx = "2" ry = "2" /> < rect x = "9" y = "9" width = "6" height = "6" /> < line x1 = "9" y1 = "2" x2 = "9" y2 = "4" /> < line x1 = "15" y1 = "2" x2 = "15" y2 = "4" /> < line x1 = "9" y1 = "21" x2 = "9" y2 = "22" /> < line x1 = "15" y1 = "20" x2 = "15" y2 = "22" /> < line x1 = "20" y1 = "9" x2 = "22" y2 = "9" /> < line x1 = "20" y1 = "14" x2 = "22" y2 = "14" /> < line x1 = "2" y1 = "9" x2 = "4" y2 = "9" /> < line x1 = "2" y1 = "14" x2 = "4" y2 = "14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CPU",
            html: lucide_cpu,
        }
    };
    const LUCIDE_CREDIT_CARD: Self = {
        #[inline(never)]
        fn lucide_credit_card(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "5" width = "20" height = "14" rx = "2" /> < line x1 = "2" y1 = "10" x2 = "22" y2 = "10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CREDIT_CARD",
            html: lucide_credit_card,
        }
    };
    const LUCIDE_CROISSANT: Self = {
        #[inline(never)]
        fn lucide_croissant(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m4.6 13.11 5.79-3.21c1.89-1.05 4.79 1.78 3.71 3.71l-3.22 5.81C8.8 23.16.79 15.23 4.6 13.11Z" /> < path d = "m10.5 9.5-1-2.29C9.2 6.48 8.8 6 8 6H4.5C2.79 6 2 6.5 2 8.5a7.71 7.71 0 0 0 2 4.83" /> < path d = "M8 6c0-1.55.24-4-2-4-2 0-2.5 2.17-2.5 4" /> < path d = "m14.5 13.5 2.29 1c.73.3 1.21.7 1.21 1.5v3.5c0 1.71-.5 2.5-2.5 2.5a7.71 7.71 0 0 1-4.83-2" /> < path d = "M18 16c1.55 0 4-.24 4 2 0 2-2.17 2.5-4 2.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CROISSANT",
            html: lucide_croissant,
        }
    };
    const LUCIDE_CROP: Self = {
        #[inline(never)]
        fn lucide_crop(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 2v14a2 2 0 0 0 2 2h14" /> < path d = "M18 22V8a2 2 0 0 0-2-2H2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CROP",
            html: lucide_crop,
        }
    };
    const LUCIDE_CROSS: Self = {
        #[inline(never)]
        fn lucide_cross(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 2a2 2 0 0 0-2 2v5H4a2 2 0 0 0-2 2v2c0 1.1.9 2 2 2h5v5c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2v-5h5a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-5V4a2 2 0 0 0-2-2h-2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CROSS",
            html: lucide_cross,
        }
    };
    const LUCIDE_CROSSHAIR: Self = {
        #[inline(never)]
        fn lucide_crosshair(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "22" y1 = "12" x2 = "18" y2 = "12" /> < line x1 = "6" y1 = "12" x2 = "2" y2 = "12" /> < line x1 = "12" y1 = "6" x2 = "12" y2 = "2" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CROSSHAIR",
            html: lucide_crosshair,
        }
    };
    const LUCIDE_CROWN: Self = {
        #[inline(never)]
        fn lucide_crown(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m2 4 3 12h14l3-12-6 7-4-7-4 7-6-7zm3 16h14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CROWN",
            html: lucide_crown,
        }
    };
    const LUCIDE_CUP_SODA: Self = {
        #[inline(never)]
        fn lucide_cup_soda(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8" /> < path d = "M5 8h14" /> < path d = "M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0" /> < path d = "m12 8 1-6h2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CUP_SODA",
            html: lucide_cup_soda,
        }
    };
    const LUCIDE_CURLY_BRACES: Self = {
        #[inline(never)]
        fn lucide_curly_braces(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1" /> < path d = "M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CURLY_BRACES",
            html: lucide_curly_braces,
        }
    };
    const LUCIDE_CURRENCY: Self = {
        #[inline(never)]
        fn lucide_currency(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "8" /> < line x1 = "3" y1 = "3" x2 = "6" y2 = "6" /> < line x1 = "21" y1 = "3" x2 = "18" y2 = "6" /> < line x1 = "3" y1 = "21" x2 = "6" y2 = "18" /> < line x1 = "21" y1 = "21" x2 = "18" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_CURRENCY",
            html: lucide_currency,
        }
    };
    const LUCIDE_DATABASE: Self = {
        #[inline(never)]
        fn lucide_database(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < ellipse cx = "12" cy = "5" rx = "9" ry = "3" /> < path d = "M21 12c0 1.66-4 3-9 3s-9-1.34-9-3" /> < path d = "M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DATABASE",
            html: lucide_database,
        }
    };
    const LUCIDE_DELETE: Self = {
        #[inline(never)]
        fn lucide_delete(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z" /> < line x1 = "18" y1 = "9" x2 = "12" y2 = "15" /> < line x1 = "12" y1 = "9" x2 = "18" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DELETE",
            html: lucide_delete,
        }
    };
    const LUCIDE_DIAMOND: Self = {
        #[inline(never)]
        fn lucide_diamond(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "12" y = "1" width = "15.56" height = "15.56" rx = "2.41" transform = "rotate(45 12 1)" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DIAMOND",
            html: lucide_diamond,
        }
    };
    const LUCIDE_DICE_1: Self = {
        #[inline(never)]
        fn lucide_dice_1(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < path d = "M12 12h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DICE_1",
            html: lucide_dice_1,
        }
    };
    const LUCIDE_DICE_2: Self = {
        #[inline(never)]
        fn lucide_dice_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < path d = "M15 9h.01" /> < path d = "M9 15h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DICE_2",
            html: lucide_dice_2,
        }
    };
    const LUCIDE_DICE_3: Self = {
        #[inline(never)]
        fn lucide_dice_3(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < path d = "M16 8h.01" /> < path d = "M12 12h.01" /> < path d = "M8 16h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DICE_3",
            html: lucide_dice_3,
        }
    };
    const LUCIDE_DICE_4: Self = {
        #[inline(never)]
        fn lucide_dice_4(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < path d = "M16 8h.01" /> < path d = "M8 8h.01" /> < path d = "M8 16h.01" /> < path d = "M16 16h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DICE_4",
            html: lucide_dice_4,
        }
    };
    const LUCIDE_DICE_5: Self = {
        #[inline(never)]
        fn lucide_dice_5(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < path d = "M16 8h.01" /> < path d = "M8 8h.01" /> < path d = "M8 16h.01" /> < path d = "M16 16h.01" /> < path d = "M12 12h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DICE_5",
            html: lucide_dice_5,
        }
    };
    const LUCIDE_DICE_6: Self = {
        #[inline(never)]
        fn lucide_dice_6(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < path d = "M16 8h.01" /> < path d = "M16 12h.01" /> < path d = "M16 16h.01" /> < path d = "M8 8h.01" /> < path d = "M8 12h.01" /> < path d = "M8 16h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DICE_6",
            html: lucide_dice_6,
        }
    };
    const LUCIDE_DICES: Self = {
        #[inline(never)]
        fn lucide_dices(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "10" width = "12" height = "12" rx = "2" ry = "2" /> < path d = "m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6" /> < path d = "M6 18h.01" /> < path d = "M10 14h.01" /> < path d = "M15 6h.01" /> < path d = "M18 9h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DICES",
            html: lucide_dices,
        }
    };
    const LUCIDE_DIFF: Self = {
        #[inline(never)]
        fn lucide_diff(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 3v14" /> < path d = "M5 10h14" /> < path d = "M5 21h14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DIFF",
            html: lucide_diff,
        }
    };
    const LUCIDE_DISC: Self = {
        #[inline(never)]
        fn lucide_disc(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < circle cx = "12" cy = "12" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DISC",
            html: lucide_disc,
        }
    };
    const LUCIDE_DIVIDE_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_divide_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "8" y1 = "12" x2 = "16" y2 = "12" /> < line x1 = "12" y1 = "16" x2 = "12" y2 = "16" /> < line x1 = "12" y1 = "8" x2 = "12" y2 = "8" /> < circle cx = "12" cy = "12" r = "10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DIVIDE_CIRCLE",
            html: lucide_divide_circle,
        }
    };
    const LUCIDE_DIVIDE_SQUARE: Self = {
        #[inline(never)]
        fn lucide_divide_square(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "8" y1 = "12" x2 = "16" y2 = "12" /> < line x1 = "12" y1 = "16" x2 = "12" y2 = "16" /> < line x1 = "12" y1 = "8" x2 = "12" y2 = "8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DIVIDE_SQUARE",
            html: lucide_divide_square,
        }
    };
    const LUCIDE_DIVIDE: Self = {
        #[inline(never)]
        fn lucide_divide(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "6" r = "1" /> < line x1 = "5" y1 = "12" x2 = "19" y2 = "12" /> < circle cx = "12" cy = "18" r = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DIVIDE",
            html: lucide_divide,
        }
    };
    const LUCIDE_DOLLAR_SIGN: Self = {
        #[inline(never)]
        fn lucide_dollar_sign(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "12" y1 = "2" x2 = "12" y2 = "22" /> < path d = "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DOLLAR_SIGN",
            html: lucide_dollar_sign,
        }
    };
    const LUCIDE_DOWNLOAD_CLOUD: Self = {
        #[inline(never)]
        fn lucide_download_cloud(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> < path d = "M12 12v9" /> < path d = "m8 17 4 4 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DOWNLOAD_CLOUD",
            html: lucide_download_cloud,
        }
    };
    const LUCIDE_DOWNLOAD: Self = {
        #[inline(never)]
        fn lucide_download(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" /> < polyline points = "7 10 12 15 17 10" /> < line x1 = "12" y1 = "15" x2 = "12" y2 = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DOWNLOAD",
            html: lucide_download,
        }
    };
    const LUCIDE_DRIBBBLE: Self = {
        #[inline(never)]
        fn lucide_dribbble(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94" /> < path d = "M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32" /> < path d = "M8.56 2.75c4.37 6 6 9.42 8 17.72" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DRIBBBLE",
            html: lucide_dribbble,
        }
    };
    const LUCIDE_DROPLET: Self = {
        #[inline(never)]
        fn lucide_droplet(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DROPLET",
            html: lucide_droplet,
        }
    };
    const LUCIDE_DROPLETS: Self = {
        #[inline(never)]
        fn lucide_droplets(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z" /> < path d = "M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DROPLETS",
            html: lucide_droplets,
        }
    };
    const LUCIDE_DRUMSTICK: Self = {
        #[inline(never)]
        fn lucide_drumstick(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15.45 15.4c-2.13.65-4.3.32-5.7-1.1-2.29-2.27-1.76-6.5 1.17-9.42 2.93-2.93 7.15-3.46 9.43-1.18 1.41 1.41 1.74 3.57 1.1 5.71-1.4-.51-3.26-.02-4.64 1.36-1.38 1.38-1.87 3.23-1.36 4.63z" /> < path d = "m11.25 15.6-2.16 2.16a2.5 2.5 0 1 1-4.56 1.73 2.49 2.49 0 0 1-1.41-4.24 2.5 2.5 0 0 1 3.14-.32l2.16-2.16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_DRUMSTICK",
            html: lucide_drumstick,
        }
    };
    const LUCIDE_EAR_OFF: Self = {
        #[inline(never)]
        fn lucide_ear_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46" /> < path d = "M6 8.5c0-.75.13-1.47.36-2.14" /> < path d = "M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76" /> < path d = "M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EAR_OFF",
            html: lucide_ear_off,
        }
    };
    const LUCIDE_EAR: Self = {
        #[inline(never)]
        fn lucide_ear(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0" /> < path d = "M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EAR",
            html: lucide_ear,
        }
    };
    const LUCIDE_EDIT_2: Self = {
        #[inline(never)]
        fn lucide_edit_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EDIT_2",
            html: lucide_edit_2,
        }
    };
    const LUCIDE_EDIT_3: Self = {
        #[inline(never)]
        fn lucide_edit_3(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 20h9" /> < path d = "M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EDIT_3",
            html: lucide_edit_3,
        }
    };
    const LUCIDE_EDIT: Self = {
        #[inline(never)]
        fn lucide_edit(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" /> < path d = "M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EDIT",
            html: lucide_edit,
        }
    };
    const LUCIDE_EGG_FRIED: Self = {
        #[inline(never)]
        fn lucide_egg_fried(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "11.5" cy = "12.5" r = "3.5" /> < path d = "M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EGG_FRIED",
            html: lucide_egg_fried,
        }
    };
    const LUCIDE_EGG: Self = {
        #[inline(never)]
        fn lucide_egg(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 22c6.23-.05 7.87-5.57 7.5-10-.36-4.34-3.95-9.96-7.5-10-3.55.04-7.14 5.66-7.5 10-.37 4.43 1.27 9.95 7.5 10z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EGG",
            html: lucide_egg,
        }
    };
    const LUCIDE_EQUAL_NOT: Self = {
        #[inline(never)]
        fn lucide_equal_not(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "5" y1 = "9" x2 = "19" y2 = "9" /> < line x1 = "5" y1 = "15" x2 = "19" y2 = "15" /> < line x1 = "19" y1 = "5" x2 = "5" y2 = "19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EQUAL_NOT",
            html: lucide_equal_not,
        }
    };
    const LUCIDE_EQUAL: Self = {
        #[inline(never)]
        fn lucide_equal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "5" y1 = "9" x2 = "19" y2 = "9" /> < line x1 = "5" y1 = "15" x2 = "19" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EQUAL",
            html: lucide_equal,
        }
    };
    const LUCIDE_ERASER: Self = {
        #[inline(never)]
        fn lucide_eraser(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m7 21-4.3-4.3c-1-1-1-2.5 0-3.4l9.6-9.6c1-1 2.5-1 3.4 0l5.6 5.6c1 1 1 2.5 0 3.4L13 21" /> < path d = "M22 21H7" /> < path d = "m5 11 9 9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ERASER",
            html: lucide_eraser,
        }
    };
    const LUCIDE_EURO: Self = {
        #[inline(never)]
        fn lucide_euro(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 10h12" /> < path d = "M4 14h9" /> < path d = "M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EURO",
            html: lucide_euro,
        }
    };
    const LUCIDE_EXPAND: Self = {
        #[inline(never)]
        fn lucide_expand(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m21 21-6-6m6 6v-4.8m0 4.8h-4.8" /> < path d = "M3 16.2V21m0 0h4.8M3 21l6-6" /> < path d = "M21 7.8V3m0 0h-4.8M21 3l-6 6" /> < path d = "M3 7.8V3m0 0h4.8M3 3l6 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EXPAND",
            html: lucide_expand,
        }
    };
    const LUCIDE_EXTERNAL_LINK: Self = {
        #[inline(never)]
        fn lucide_external_link(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6" /> < polyline points = "15 3 21 3 21 9" /> < line x1 = "10" y1 = "14" x2 = "21" y2 = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EXTERNAL_LINK",
            html: lucide_external_link,
        }
    };
    const LUCIDE_EYE_OFF: Self = {
        #[inline(never)]
        fn lucide_eye_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9.88 9.88a3 3 0 1 0 4.24 4.24" /> < path d = "M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68" /> < path d = "M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EYE_OFF",
            html: lucide_eye_off,
        }
    };
    const LUCIDE_EYE: Self = {
        #[inline(never)]
        fn lucide_eye(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z" /> < circle cx = "12" cy = "12" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_EYE",
            html: lucide_eye,
        }
    };
    const LUCIDE_FACEBOOK: Self = {
        #[inline(never)]
        fn lucide_facebook(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FACEBOOK",
            html: lucide_facebook,
        }
    };
    const LUCIDE_FACTORY: Self = {
        #[inline(never)]
        fn lucide_factory(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 20a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8l-7 5V8l-7 5V4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z" /> < path d = "M17 18h1" /> < path d = "M12 18h1" /> < path d = "M7 18h1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FACTORY",
            html: lucide_factory,
        }
    };
    const LUCIDE_FAN: Self = {
        #[inline(never)]
        fn lucide_fan(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z" /> < path d = "M12 12v.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FAN",
            html: lucide_fan,
        }
    };
    const LUCIDE_FAST_FORWARD: Self = {
        #[inline(never)]
        fn lucide_fast_forward(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "13 19 22 12 13 5 13 19" /> < polygon points = "2 19 11 12 2 5 2 19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FAST_FORWARD",
            html: lucide_fast_forward,
        }
    };
    const LUCIDE_FEATHER: Self = {
        #[inline(never)]
        fn lucide_feather(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z" /> < line x1 = "16" y1 = "8" x2 = "2" y2 = "22" /> < line x1 = "17.5" y1 = "15" x2 = "9" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FEATHER",
            html: lucide_feather,
        }
    };
    const LUCIDE_FIGMA: Self = {
        #[inline(never)]
        fn lucide_figma(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z" /> < path d = "M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z" /> < path d = "M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z" /> < path d = "M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z" /> < path d = "M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FIGMA",
            html: lucide_figma,
        }
    };
    const LUCIDE_FILE_ARCHIVE: Self = {
        #[inline(never)]
        fn lucide_file_archive(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22V4c0-.5.2-1 .6-1.4C5 2.2 5.5 2 6 2h8.5L20 7.5V20c0 .5-.2 1-.6 1.4-.4.4-.9.6-1.4.6h-2" /> < polyline points = "14 2 14 8 20 8" /> < circle cx = "10" cy = "20" r = "2" /> < path d = "M10 7V6" /> < path d = "M10 12v-1" /> < path d = "M10 18v-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_ARCHIVE",
            html: lucide_file_archive,
        }
    };
    const LUCIDE_FILE_AUDIO_2: Self = {
        #[inline(never)]
        fn lucide_file_audio_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v2" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M2 17v-3a4 4 0 0 1 8 0v3" /> < circle cx = "9" cy = "17" r = "1" /> < circle cx = "3" cy = "17" r = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_AUDIO_2",
            html: lucide_file_audio_2,
        }
    };
    const LUCIDE_FILE_AUDIO: Self = {
        #[inline(never)]
        fn lucide_file_audio(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17.5 22h.5c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M10 20v-1a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0Z" /> < path d = "M6 20v-1a2 2 0 1 0-4 0v1a2 2 0 1 0 4 0Z" /> < path d = "M2 19v-3a6 6 0 0 1 12 0v3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_AUDIO",
            html: lucide_file_audio,
        }
    };
    const LUCIDE_FILE_AXIS_3_D: Self = {
        #[inline(never)]
        fn lucide_file_axis_3_d(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M8 10v8h8" /> < path d = "m8 18 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_AXIS_3_D",
            html: lucide_file_axis_3_d,
        }
    };
    const LUCIDE_FILE_BADGE_2: Self = {
        #[inline(never)]
        fn lucide_file_badge_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < path d = "M12 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" /> < path d = "m14 12.5 1 5.5-3-1-3 1 1-5.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_BADGE_2",
            html: lucide_file_badge_2,
        }
    };
    const LUCIDE_FILE_BADGE: Self = {
        #[inline(never)]
        fn lucide_file_badge(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 7V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2h-6" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" /> < path d = "M7 16.5 8 22l-3-1-3 1 1-5.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_BADGE",
            html: lucide_file_badge,
        }
    };
    const LUCIDE_FILE_BAR_CHART_2: Self = {
        #[inline(never)]
        fn lucide_file_bar_chart_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M12 18v-6" /> < path d = "M8 18v-1" /> < path d = "M16 18v-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_BAR_CHART_2",
            html: lucide_file_bar_chart_2,
        }
    };
    const LUCIDE_FILE_BAR_CHART: Self = {
        #[inline(never)]
        fn lucide_file_bar_chart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M12 18v-4" /> < path d = "M8 18v-2" /> < path d = "M16 18v-6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_BAR_CHART",
            html: lucide_file_bar_chart,
        }
    };
    const LUCIDE_FILE_BOX: Self = {
        #[inline(never)]
        fn lucide_file_box(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 22H18a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M2.97 13.12c-.6.36-.97 1.02-.97 1.74v3.28c0 .72.37 1.38.97 1.74l3 1.83c.63.39 1.43.39 2.06 0l3-1.83c.6-.36.97-1.02.97-1.74v-3.28c0-.72-.37-1.38-.97-1.74l-3-1.83a1.97 1.97 0 0 0-2.06 0l-3 1.83Z" /> < path d = "m7 17-4.74-2.85" /> < path d = "m7 17 4.74-2.85" /> < path d = "M7 17v5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_BOX",
            html: lucide_file_box,
        }
    };
    const LUCIDE_FILE_CHECK_2: Self = {
        #[inline(never)]
        fn lucide_file_check_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "m3 15 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_CHECK_2",
            html: lucide_file_check_2,
        }
    };
    const LUCIDE_FILE_CHECK: Self = {
        #[inline(never)]
        fn lucide_file_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "m9 15 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_CHECK",
            html: lucide_file_check,
        }
    };
    const LUCIDE_FILE_CLOCK: Self = {
        #[inline(never)]
        fn lucide_file_clock(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 22h2c.5 0 1-.2 1.4-.6.4-.4.6-.9.6-1.4V7.5L14.5 2H6c-.5 0-1 .2-1.4.6C4.2 3 4 3.5 4 4v3" /> < polyline points = "14 2 14 8 20 8" /> < circle cx = "8" cy = "16" r = "6" /> < path d = "M9.5 17.5 8 16.25V14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_CLOCK",
            html: lucide_file_clock,
        }
    };
    const LUCIDE_FILE_CODE: Self = {
        #[inline(never)]
        fn lucide_file_code(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "m9 18 3-3-3-3" /> < path d = "m5 12-3 3 3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_CODE",
            html: lucide_file_code,
        }
    };
    const LUCIDE_FILE_COG_2: Self = {
        #[inline(never)]
        fn lucide_file_cog_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < circle cx = "12" cy = "15" r = "2" /> < path d = "M12 12v1" /> < path d = "M12 17v1" /> < path d = "m14.6 13.5-.87.5" /> < path d = "m10.27 16-.87.5" /> < path d = "m14.6 16.5-.87-.5" /> < path d = "m10.27 14-.87-.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_COG_2",
            html: lucide_file_cog_2,
        }
    };
    const LUCIDE_FILE_COG: Self = {
        #[inline(never)]
        fn lucide_file_cog(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 6V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4" /> < polyline points = "14 2 14 8 20 8" /> < circle cx = "6" cy = "14" r = "3" /> < path d = "M6 10v1" /> < path d = "M6 17v1" /> < path d = "M10 14H9" /> < path d = "M3 14H2" /> < path d = "m9 11-.88.88" /> < path d = "M3.88 16.12 3 17" /> < path d = "m9 17-.88-.88" /> < path d = "M3.88 11.88 3 11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_COG",
            html: lucide_file_cog,
        }
    };
    const LUCIDE_FILE_DIFF: Self = {
        #[inline(never)]
        fn lucide_file_diff(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < path d = "M12 13V7" /> < path d = "M9 10h6" /> < path d = "M9 17h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_DIFF",
            html: lucide_file_diff,
        }
    };
    const LUCIDE_FILE_DIGIT: Self = {
        #[inline(never)]
        fn lucide_file_digit(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M10 12h2v6" /> < rect x = "2" y = "12" width = "4" height = "6" /> < path d = "M10 18h4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_DIGIT",
            html: lucide_file_digit,
        }
    };
    const LUCIDE_FILE_DOWN: Self = {
        #[inline(never)]
        fn lucide_file_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M12 18v-6" /> < path d = "m9 15 3 3 3-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_DOWN",
            html: lucide_file_down,
        }
    };
    const LUCIDE_FILE_EDIT: Self = {
        #[inline(never)]
        fn lucide_file_edit(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 13.5V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2h-5.5" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M10.42 12.61a2.1 2.1 0 1 1 2.97 2.97L7.95 21 4 22l.99-3.95 5.43-5.44Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_EDIT",
            html: lucide_file_edit,
        }
    };
    const LUCIDE_FILE_HEART: Self = {
        #[inline(never)]
        fn lucide_file_heart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 6V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M10.29 10.7a2.43 2.43 0 0 0-2.66-.52c-.29.12-.56.3-.78.53l-.35.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L6.5 18l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_HEART",
            html: lucide_file_heart,
        }
    };
    const LUCIDE_FILE_IMAGE: Self = {
        #[inline(never)]
        fn lucide_file_image(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < circle cx = "10" cy = "13" r = "2" /> < path d = "m20 17-1.09-1.09a2 2 0 0 0-2.82 0L10 22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_IMAGE",
            html: lucide_file_image,
        }
    };
    const LUCIDE_FILE_INPUT: Self = {
        #[inline(never)]
        fn lucide_file_input(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M2 15h10" /> < path d = "m9 18 3-3-3-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_INPUT",
            html: lucide_file_input,
        }
    };
    const LUCIDE_FILE_JSON_2: Self = {
        #[inline(never)]
        fn lucide_file_json_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1" /> < path d = "M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_JSON_2",
            html: lucide_file_json_2,
        }
    };
    const LUCIDE_FILE_JSON: Self = {
        #[inline(never)]
        fn lucide_file_json(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1" /> < path d = "M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_JSON",
            html: lucide_file_json,
        }
    };
    const LUCIDE_FILE_KEY_2: Self = {
        #[inline(never)]
        fn lucide_file_key_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 10V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4" /> < polyline points = "14 2 14 8 20 8" /> < circle cx = "4" cy = "16" r = "2" /> < path d = "m10 10-4.5 4.5" /> < path d = "m9 11 1 1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_KEY_2",
            html: lucide_file_key_2,
        }
    };
    const LUCIDE_FILE_KEY: Self = {
        #[inline(never)]
        fn lucide_file_key(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < circle cx = "10" cy = "16" r = "2" /> < path d = "m16 10-4.5 4.5" /> < path d = "m15 11 1 1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_KEY",
            html: lucide_file_key,
        }
    };
    const LUCIDE_FILE_LINE_CHART: Self = {
        #[inline(never)]
        fn lucide_file_line_chart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "m16 13-3.5 3.5-2-2L8 17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_LINE_CHART",
            html: lucide_file_line_chart,
        }
    };
    const LUCIDE_FILE_LOCK_2: Self = {
        #[inline(never)]
        fn lucide_file_lock_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 5V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4" /> < polyline points = "14 2 14 8 20 8" /> < rect x = "2" y = "13" width = "8" height = "5" rx = "1" /> < path d = "M8 13v-2a2 2 0 1 0-4 0v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_LOCK_2",
            html: lucide_file_lock_2,
        }
    };
    const LUCIDE_FILE_LOCK: Self = {
        #[inline(never)]
        fn lucide_file_lock(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < rect x = "8" y = "12" width = "8" height = "6" rx = "1" /> < path d = "M15 12v-2a3 3 0 1 0-6 0v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_LOCK",
            html: lucide_file_lock,
        }
    };
    const LUCIDE_FILE_MINUS_2: Self = {
        #[inline(never)]
        fn lucide_file_minus_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M3 15h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_MINUS_2",
            html: lucide_file_minus_2,
        }
    };
    const LUCIDE_FILE_MINUS: Self = {
        #[inline(never)]
        fn lucide_file_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < line x1 = "9" y1 = "15" x2 = "15" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_MINUS",
            html: lucide_file_minus,
        }
    };
    const LUCIDE_FILE_OUTPUT: Self = {
        #[inline(never)]
        fn lucide_file_output(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M2 15h10" /> < path d = "m5 12-3 3 3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_OUTPUT",
            html: lucide_file_output,
        }
    };
    const LUCIDE_FILE_PIE_CHART: Self = {
        #[inline(never)]
        fn lucide_file_pie_chart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 22h2a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M4.04 11.71a5.84 5.84 0 1 0 8.2 8.29" /> < path d = "M13.83 16A5.83 5.83 0 0 0 8 10.17V16h5.83Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_PIE_CHART",
            html: lucide_file_pie_chart,
        }
    };
    const LUCIDE_FILE_PLUS_2: Self = {
        #[inline(never)]
        fn lucide_file_plus_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M3 15h6" /> < path d = "M6 12v6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_PLUS_2",
            html: lucide_file_plus_2,
        }
    };
    const LUCIDE_FILE_PLUS: Self = {
        #[inline(never)]
        fn lucide_file_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < line x1 = "12" y1 = "18" x2 = "12" y2 = "12" /> < line x1 = "9" y1 = "15" x2 = "15" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_PLUS",
            html: lucide_file_plus,
        }
    };
    const LUCIDE_FILE_QUESTION: Self = {
        #[inline(never)]
        fn lucide_file_question(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < path d = "M10 10.3c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2" /> < path d = "M12 17h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_QUESTION",
            html: lucide_file_question,
        }
    };
    const LUCIDE_FILE_SCAN: Self = {
        #[inline(never)]
        fn lucide_file_scan(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 10V7.5L14.5 2H6a2 2 0 0 0-2 2v16c0 1.1.9 2 2 2h4.5" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M16 22a2 2 0 0 1-2-2" /> < path d = "M20 22a2 2 0 0 0 2-2" /> < path d = "M20 14a2 2 0 0 1 2 2" /> < path d = "M16 14a2 2 0 0 0-2 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_SCAN",
            html: lucide_file_scan,
        }
    };
    const LUCIDE_FILE_SEARCH_2: Self = {
        #[inline(never)]
        fn lucide_file_search_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < circle cx = "11.5" cy = "14.5" r = "2.5" /> < path d = "M13.25 16.25 15 18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_SEARCH_2",
            html: lucide_file_search_2,
        }
    };
    const LUCIDE_FILE_SEARCH: Self = {
        #[inline(never)]
        fn lucide_file_search(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M5 17a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" /> < path d = "m9 18-1.5-1.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_SEARCH",
            html: lucide_file_search,
        }
    };
    const LUCIDE_FILE_SIGNATURE: Self = {
        #[inline(never)]
        fn lucide_file_signature(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 19.5v.5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h8.5L18 5.5" /> < path d = "M8 18h1" /> < path d = "M18.42 9.61a2.1 2.1 0 1 1 2.97 2.97L16.95 17 13 18l.99-3.95 4.43-4.44Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_SIGNATURE",
            html: lucide_file_signature,
        }
    };
    const LUCIDE_FILE_SPREADSHEET: Self = {
        #[inline(never)]
        fn lucide_file_spreadsheet(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M8 13h2" /> < path d = "M8 17h2" /> < path d = "M14 13h2" /> < path d = "M14 17h2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_SPREADSHEET",
            html: lucide_file_spreadsheet,
        }
    };
    const LUCIDE_FILE_SYMLINK: Self = {
        #[inline(never)]
        fn lucide_file_symlink(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v7" /> < polyline points = "14 2 14 8 20 8" /> < path d = "m10 18 3-3-3-3" /> < path d = "M4 18v-1a2 2 0 0 1 2-2h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_SYMLINK",
            html: lucide_file_symlink,
        }
    };
    const LUCIDE_FILE_TERMINAL: Self = {
        #[inline(never)]
        fn lucide_file_terminal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "m8 16 2-2-2-2" /> < path d = "M12 18h4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_TERMINAL",
            html: lucide_file_terminal,
        }
    };
    const LUCIDE_FILE_TEXT: Self = {
        #[inline(never)]
        fn lucide_file_text(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < line x1 = "16" y1 = "13" x2 = "8" y2 = "13" /> < line x1 = "16" y1 = "17" x2 = "8" y2 = "17" /> < line x1 = "10" y1 = "9" x2 = "8" y2 = "9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_TEXT",
            html: lucide_file_text,
        }
    };
    const LUCIDE_FILE_TYPE_2: Self = {
        #[inline(never)]
        fn lucide_file_type_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M2 13v-1h6v1" /> < path d = "M4 18h2" /> < path d = "M5 12v6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_TYPE_2",
            html: lucide_file_type_2,
        }
    };
    const LUCIDE_FILE_TYPE: Self = {
        #[inline(never)]
        fn lucide_file_type(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M9 13v-1h6v1" /> < path d = "M11 18h2" /> < path d = "M12 12v6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_TYPE",
            html: lucide_file_type,
        }
    };
    const LUCIDE_FILE_UP: Self = {
        #[inline(never)]
        fn lucide_file_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M12 12v6" /> < path d = "m15 15-3-3-3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_UP",
            html: lucide_file_up,
        }
    };
    const LUCIDE_FILE_VIDEO_2: Self = {
        #[inline(never)]
        fn lucide_file_video_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 8V4a2 2 0 0 1 2-2h8.5L20 7.5V20a2 2 0 0 1-2 2H4" /> < polyline points = "14 2 14 8 20 8" /> < path d = "m10 15.5 4 2.5v-6l-4 2.5" /> < rect x = "2" y = "12" width = "8" height = "6" rx = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_VIDEO_2",
            html: lucide_file_video_2,
        }
    };
    const LUCIDE_FILE_VIDEO: Self = {
        #[inline(never)]
        fn lucide_file_video(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "m10 11 5 3-5 3v-6Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_VIDEO",
            html: lucide_file_video,
        }
    };
    const LUCIDE_FILE_VOLUME_2: Self = {
        #[inline(never)]
        fn lucide_file_volume_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < path d = "M11.5 13.5c.32.4.5.94.5 1.5s-.18 1.1-.5 1.5" /> < path d = "M15 12c.64.8 1 1.87 1 3s-.36 2.2-1 3" /> < path d = "M8 15h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_VOLUME_2",
            html: lucide_file_volume_2,
        }
    };
    const LUCIDE_FILE_VOLUME: Self = {
        #[inline(never)]
        fn lucide_file_volume(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v3" /> < polyline points = "14 2 14 8 20 8" /> < path d = "m7 10-3 2H2v4h2l3 2v-8Z" /> < path d = "M11 11c.64.8 1 1.87 1 3s-.36 2.2-1 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_VOLUME",
            html: lucide_file_volume,
        }
    };
    const LUCIDE_FILE_WARNING: Self = {
        #[inline(never)]
        fn lucide_file_warning(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < path d = "M12 9v4" /> < path d = "M12 17h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_WARNING",
            html: lucide_file_warning,
        }
    };
    const LUCIDE_FILE_X_2: Self = {
        #[inline(never)]
        fn lucide_file_x_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h14a2 2 0 0 0 2-2V7.5L14.5 2H6a2 2 0 0 0-2 2v4" /> < path d = "M14 2v6h6" /> < path d = "m3 12.5 5 5" /> < path d = "m8 12.5-5 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_X_2",
            html: lucide_file_x_2,
        }
    };
    const LUCIDE_FILE_X: Self = {
        #[inline(never)]
        fn lucide_file_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> < line x1 = "9.5" y1 = "12.5" x2 = "14.5" y2 = "17.5" /> < line x1 = "14.5" y1 = "12.5" x2 = "9.5" y2 = "17.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE_X",
            html: lucide_file_x,
        }
    };
    const LUCIDE_FILE: Self = {
        #[inline(never)]
        fn lucide_file(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z" /> < polyline points = "14 2 14 8 20 8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILE",
            html: lucide_file,
        }
    };
    const LUCIDE_FILES: Self = {
        #[inline(never)]
        fn lucide_files(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15.5 2H8.6c-.4 0-.8.2-1.1.5-.3.3-.5.7-.5 1.1v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8c.4 0 .8-.2 1.1-.5.3-.3.5-.7.5-1.1V6.5L15.5 2z" /> < path d = "M3 7.6v12.8c0 .4.2.8.5 1.1.3.3.7.5 1.1.5h9.8" /> < path d = "M15 2v5h5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILES",
            html: lucide_files,
        }
    };
    const LUCIDE_FILM: Self = {
        #[inline(never)]
        fn lucide_film(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "2" width = "20" height = "20" rx = "2.18" ry = "2.18" /> < line x1 = "7" y1 = "2" x2 = "7" y2 = "22" /> < line x1 = "17" y1 = "2" x2 = "17" y2 = "22" /> < line x1 = "2" y1 = "12" x2 = "22" y2 = "12" /> < line x1 = "2" y1 = "7" x2 = "7" y2 = "7" /> < line x1 = "2" y1 = "17" x2 = "7" y2 = "17" /> < line x1 = "17" y1 = "17" x2 = "22" y2 = "17" /> < line x1 = "17" y1 = "7" x2 = "22" y2 = "7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILM",
            html: lucide_film,
        }
    };
    const LUCIDE_FILTER: Self = {
        #[inline(never)]
        fn lucide_filter(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FILTER",
            html: lucide_filter,
        }
    };
    const LUCIDE_FINGERPRINT: Self = {
        #[inline(never)]
        fn lucide_fingerprint(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 12C2 6.5 6.5 2 12 2a10 10 0 0 1 8 4" /> < path d = "M5 19.5C5.5 18 6 15 6 12c0-.7.12-1.37.34-2" /> < path d = "M17.29 21.02c.12-.6.43-2.3.5-3.02" /> < path d = "M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4" /> < path d = "M8.65 22c.21-.66.45-1.32.57-2" /> < path d = "M14 13.12c0 2.38 0 6.38-1 8.88" /> < path d = "M2 16h.01" /> < path d = "M21.8 16c.2-2 .131-5.354 0-6" /> < path d = "M9 6.8a6 6 0 0 1 9 5.2c0 .47 0 1.17-.02 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FINGERPRINT",
            html: lucide_fingerprint,
        }
    };
    const LUCIDE_FLAG_OFF: Self = {
        #[inline(never)]
        fn lucide_flag_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 2c3 0 5 2 8 2s4-1 4-1v11" /> < path d = "M4 22V4" /> < path d = "M4 15s1-1 4-1 5 2 8 2" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLAG_OFF",
            html: lucide_flag_off,
        }
    };
    const LUCIDE_FLAG_TRIANGLE_LEFT: Self = {
        #[inline(never)]
        fn lucide_flag_triangle_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17 22V2L7 7l10 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLAG_TRIANGLE_LEFT",
            html: lucide_flag_triangle_left,
        }
    };
    const LUCIDE_FLAG_TRIANGLE_RIGHT: Self = {
        #[inline(never)]
        fn lucide_flag_triangle_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 22V2l10 5-10 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLAG_TRIANGLE_RIGHT",
            html: lucide_flag_triangle_right,
        }
    };
    const LUCIDE_FLAG: Self = {
        #[inline(never)]
        fn lucide_flag(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z" /> < line x1 = "4" y1 = "22" x2 = "4" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLAG",
            html: lucide_flag,
        }
    };
    const LUCIDE_FLAME: Self = {
        #[inline(never)]
        fn lucide_flame(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLAME",
            html: lucide_flame,
        }
    };
    const LUCIDE_FLASHLIGHT_OFF: Self = {
        #[inline(never)]
        fn lucide_flashlight_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4" /> < path d = "M7 2h11v4c0 2-2 2-2 4v1" /> < line x1 = "11" y1 = "6" x2 = "18" y2 = "6" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLASHLIGHT_OFF",
            html: lucide_flashlight_off,
        }
    };
    const LUCIDE_FLASHLIGHT: Self = {
        #[inline(never)]
        fn lucide_flashlight(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z" /> < line x1 = "6" y1 = "6" x2 = "18" y2 = "6" /> < line x1 = "12" y1 = "12" x2 = "12" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLASHLIGHT",
            html: lucide_flashlight,
        }
    };
    const LUCIDE_FLASK_CONICAL: Self = {
        #[inline(never)]
        fn lucide_flask_conical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 2v8L4.72 20.55a1 1 0 0 0 .9 1.45h12.76a1 1 0 0 0 .9-1.45L14 10V2" /> < path d = "M8.5 2h7" /> < path d = "M7 16h10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLASK_CONICAL",
            html: lucide_flask_conical,
        }
    };
    const LUCIDE_FLASK_ROUND: Self = {
        #[inline(never)]
        fn lucide_flask_round(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 2v7.31" /> < path d = "M14 9.3V1.99" /> < path d = "M8.5 2h7" /> < path d = "M14 9.3a6.5 6.5 0 1 1-4 0" /> < path d = "M5.58 16.5h12.85" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLASK_ROUND",
            html: lucide_flask_round,
        }
    };
    const LUCIDE_FLIP_HORIZONTAL_2: Self = {
        #[inline(never)]
        fn lucide_flip_horizontal_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m3 7 5 5-5 5V7" /> < path d = "m21 7-5 5 5 5V7" /> < path d = "M12 20v2" /> < path d = "M12 14v2" /> < path d = "M12 8v2" /> < path d = "M12 2v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLIP_HORIZONTAL_2",
            html: lucide_flip_horizontal_2,
        }
    };
    const LUCIDE_FLIP_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_flip_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3" /> < path d = "M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3" /> < path d = "M12 20v2" /> < path d = "M12 14v2" /> < path d = "M12 8v2" /> < path d = "M12 2v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLIP_HORIZONTAL",
            html: lucide_flip_horizontal,
        }
    };
    const LUCIDE_FLIP_VERTICAL_2: Self = {
        #[inline(never)]
        fn lucide_flip_vertical_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m17 3-5 5-5-5h10" /> < path d = "m17 21-5-5-5 5h10" /> < path d = "M4 12H2" /> < path d = "M10 12H8" /> < path d = "M16 12h-2" /> < path d = "M22 12h-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLIP_VERTICAL_2",
            html: lucide_flip_vertical_2,
        }
    };
    const LUCIDE_FLIP_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_flip_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3" /> < path d = "M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3" /> < path d = "M4 12H2" /> < path d = "M10 12H8" /> < path d = "M16 12h-2" /> < path d = "M22 12h-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLIP_VERTICAL",
            html: lucide_flip_vertical,
        }
    };
    const LUCIDE_FLOWER_2: Self = {
        #[inline(never)]
        fn lucide_flower_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1" /> < circle cx = "12" cy = "8" r = "2" /> < path d = "M12 10v12" /> < path d = "M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z" /> < path d = "M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLOWER_2",
            html: lucide_flower_2,
        }
    };
    const LUCIDE_FLOWER: Self = {
        #[inline(never)]
        fn lucide_flower(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 7.5a4.5 4.5 0 1 1 4.5 4.5M12 7.5A4.5 4.5 0 1 0 7.5 12M12 7.5V9m-4.5 3a4.5 4.5 0 1 0 4.5 4.5M7.5 12H9m7.5 0a4.5 4.5 0 1 1-4.5 4.5m4.5-4.5H15m-3 4.5V15" /> < circle cx = "12" cy = "12" r = "3" /> < path d = "m8 16 1.5-1.5" /> < path d = "M14.5 9.5 16 8" /> < path d = "m8 8 1.5 1.5" /> < path d = "M14.5 14.5 16 16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FLOWER",
            html: lucide_flower,
        }
    };
    const LUCIDE_FOCUS: Self = {
        #[inline(never)]
        fn lucide_focus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "3" /> < path d = "M3 7V5a2 2 0 0 1 2-2h2" /> < path d = "M17 3h2a2 2 0 0 1 2 2v2" /> < path d = "M21 17v2a2 2 0 0 1-2 2h-2" /> < path d = "M7 21H5a2 2 0 0 1-2-2v-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOCUS",
            html: lucide_focus,
        }
    };
    const LUCIDE_FOLDER_ARCHIVE: Self = {
        #[inline(never)]
        fn lucide_folder_archive(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 20V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2h6" /> < circle cx = "16" cy = "19" r = "2" /> < path d = "M16 11v-1" /> < path d = "M16 17v-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_ARCHIVE",
            html: lucide_folder_archive,
        }
    };
    const LUCIDE_FOLDER_CHECK: Self = {
        #[inline(never)]
        fn lucide_folder_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> < path d = "m9 13 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_CHECK",
            html: lucide_folder_check,
        }
    };
    const LUCIDE_FOLDER_CLOCK: Self = {
        #[inline(never)]
        fn lucide_folder_clock(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2" /> < circle cx = "16" cy = "16" r = "6" /> < path d = "M16 14v2l1 1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_CLOCK",
            html: lucide_folder_clock,
        }
    };
    const LUCIDE_FOLDER_CLOSED: Self = {
        #[inline(never)]
        fn lucide_folder_closed(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> < path d = "M2 10h20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_CLOSED",
            html: lucide_folder_closed,
        }
    };
    const LUCIDE_FOLDER_COG_2: Self = {
        #[inline(never)]
        fn lucide_folder_cog_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> < circle cx = "12" cy = "13" r = "2" /> < path d = "M12 10v1" /> < path d = "M12 15v1" /> < path d = "m14.6 11.5-.87.5" /> < path d = "m10.27 14-.87.5" /> < path d = "m14.6 14.5-.87-.5" /> < path d = "m10.27 12-.87-.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_COG_2",
            html: lucide_folder_cog_2,
        }
    };
    const LUCIDE_FOLDER_COG: Self = {
        #[inline(never)]
        fn lucide_folder_cog(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10.5 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v3" /> < circle cx = "18" cy = "18" r = "3" /> < path d = "M18 14v1" /> < path d = "M18 21v1" /> < path d = "M22 18h-1" /> < path d = "M15 18h-1" /> < path d = "m21 15-.88.88" /> < path d = "M15.88 20.12 15 21" /> < path d = "m21 21-.88-.88" /> < path d = "M15.88 15.88 15 15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_COG",
            html: lucide_folder_cog,
        }
    };
    const LUCIDE_FOLDER_DOWN: Self = {
        #[inline(never)]
        fn lucide_folder_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> < path d = "M12 10v6" /> < path d = "m15 13-3 3-3-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_DOWN",
            html: lucide_folder_down,
        }
    };
    const LUCIDE_FOLDER_EDIT: Self = {
        #[inline(never)]
        fn lucide_folder_edit(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8.42 10.61a2.1 2.1 0 1 1 2.97 2.97L5.95 19 2 20l.99-3.95 5.43-5.44Z" /> < path d = "M2 11.5V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_EDIT",
            html: lucide_folder_edit,
        }
    };
    const LUCIDE_FOLDER_HEART: Self = {
        #[inline(never)]
        fn lucide_folder_heart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v1.5" /> < path d = "M21.29 13.7a2.43 2.43 0 0 0-2.65-.52c-.3.12-.57.3-.8.53l-.34.34-.35-.34a2.43 2.43 0 0 0-2.65-.53c-.3.12-.56.3-.79.53-.95.94-1 2.53.2 3.74L17.5 21l3.6-3.55c1.2-1.21 1.14-2.8.19-3.74Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_HEART",
            html: lucide_folder_heart,
        }
    };
    const LUCIDE_FOLDER_INPUT: Self = {
        #[inline(never)]
        fn lucide_folder_input(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 9V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1" /> < path d = "M2 13h10" /> < path d = "m9 16 3-3-3-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_INPUT",
            html: lucide_folder_input,
        }
    };
    const LUCIDE_FOLDER_KEY: Self = {
        #[inline(never)]
        fn lucide_folder_key(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v2" /> < circle cx = "16" cy = "20" r = "2" /> < path d = "m22 14-4.5 4.5" /> < path d = "m21 15 1 1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_KEY",
            html: lucide_folder_key,
        }
    };
    const LUCIDE_FOLDER_LOCK: Self = {
        #[inline(never)]
        fn lucide_folder_lock(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v2.5" /> < rect x = "14" y = "17" width = "8" height = "5" rx = "1" /> < path d = "M20 17v-2a2 2 0 1 0-4 0v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_LOCK",
            html: lucide_folder_lock,
        }
    };
    const LUCIDE_FOLDER_MINUS: Self = {
        #[inline(never)]
        fn lucide_folder_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> < line x1 = "9" y1 = "13" x2 = "15" y2 = "13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_MINUS",
            html: lucide_folder_minus,
        }
    };
    const LUCIDE_FOLDER_OPEN: Self = {
        #[inline(never)]
        fn lucide_folder_open(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_OPEN",
            html: lucide_folder_open,
        }
    };
    const LUCIDE_FOLDER_OUTPUT: Self = {
        #[inline(never)]
        fn lucide_folder_output(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 7.5V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2" /> < path d = "M2 13h10" /> < path d = "m5 10-3 3 3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_OUTPUT",
            html: lucide_folder_output,
        }
    };
    const LUCIDE_FOLDER_PLUS: Self = {
        #[inline(never)]
        fn lucide_folder_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> < line x1 = "12" y1 = "10" x2 = "12" y2 = "16" /> < line x1 = "9" y1 = "13" x2 = "15" y2 = "13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_PLUS",
            html: lucide_folder_plus,
        }
    };
    const LUCIDE_FOLDER_SEARCH_2: Self = {
        #[inline(never)]
        fn lucide_folder_search_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> < circle cx = "11.5" cy = "12.5" r = "2.5" /> < path d = "M13.27 14.27 15 16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_SEARCH_2",
            html: lucide_folder_search_2,
        }
    };
    const LUCIDE_FOLDER_SEARCH: Self = {
        #[inline(never)]
        fn lucide_folder_search(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 20H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v4" /> < circle cx = "17" cy = "17" r = "3" /> < path d = "m21 21-1.5-1.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_SEARCH",
            html: lucide_folder_search,
        }
    };
    const LUCIDE_FOLDER_SYMLINK: Self = {
        #[inline(never)]
        fn lucide_folder_symlink(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 9V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H2" /> < path d = "m8 16 3-3-3-3" /> < path d = "M2 16v-1a2 2 0 0 1 2-2h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_SYMLINK",
            html: lucide_folder_symlink,
        }
    };
    const LUCIDE_FOLDER_TREE: Self = {
        #[inline(never)]
        fn lucide_folder_tree(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M13 10h7a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z" /> < path d = "M13 21h7a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.88a1 1 0 0 1-.9-.55l-.44-.9a1 1 0 0 0-.9-.55H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z" /> < path d = "M3 3v2c0 1.1.9 2 2 2h3" /> < path d = "M3 3v13c0 1.1.9 2 2 2h3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_TREE",
            html: lucide_folder_tree,
        }
    };
    const LUCIDE_FOLDER_UP: Self = {
        #[inline(never)]
        fn lucide_folder_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> < path d = "M12 10v6" /> < path d = "m9 13 3-3 3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_UP",
            html: lucide_folder_up,
        }
    };
    const LUCIDE_FOLDER_X: Self = {
        #[inline(never)]
        fn lucide_folder_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> < path d = "m9.5 10.5 5 5" /> < path d = "m14.5 10.5-5 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER_X",
            html: lucide_folder_x,
        }
    };
    const LUCIDE_FOLDER: Self = {
        #[inline(never)]
        fn lucide_folder(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDER",
            html: lucide_folder,
        }
    };
    const LUCIDE_FOLDERS: Self = {
        #[inline(never)]
        fn lucide_folders(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 17h12a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3.93a2 2 0 0 1-1.66-.9l-.82-1.2a2 2 0 0 0-1.66-.9H8a2 2 0 0 0-2 2v9c0 1.1.9 2 2 2Z" /> < path d = "M2 8v11c0 1.1.9 2 2 2h14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FOLDERS",
            html: lucide_folders,
        }
    };
    const LUCIDE_FORM_INPUT: Self = {
        #[inline(never)]
        fn lucide_form_input(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "6" width = "20" height = "12" rx = "2" /> < path d = "M12 12h.01" /> < path d = "M17 12h.01" /> < path d = "M7 12h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FORM_INPUT",
            html: lucide_form_input,
        }
    };
    const LUCIDE_FORWARD: Self = {
        #[inline(never)]
        fn lucide_forward(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "15 17 20 12 15 7" /> < path d = "M4 18v-2a4 4 0 0 1 4-4h12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FORWARD",
            html: lucide_forward,
        }
    };
    const LUCIDE_FRAME: Self = {
        #[inline(never)]
        fn lucide_frame(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "22" y1 = "6" x2 = "2" y2 = "6" /> < line x1 = "22" y1 = "18" x2 = "2" y2 = "18" /> < line x1 = "6" y1 = "2" x2 = "6" y2 = "22" /> < line x1 = "18" y1 = "2" x2 = "18" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FRAME",
            html: lucide_frame,
        }
    };
    const LUCIDE_FRAMER: Self = {
        #[inline(never)]
        fn lucide_framer(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FRAMER",
            html: lucide_framer,
        }
    };
    const LUCIDE_FROWN: Self = {
        #[inline(never)]
        fn lucide_frown(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M16 16s-1.5-2-4-2-4 2-4 2" /> < line x1 = "9" y1 = "9" x2 = "9.01" y2 = "9" /> < line x1 = "15" y1 = "9" x2 = "15.01" y2 = "9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FROWN",
            html: lucide_frown,
        }
    };
    const LUCIDE_FUEL: Self = {
        #[inline(never)]
        fn lucide_fuel(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "3" y1 = "22" x2 = "15" y2 = "22" /> < line x1 = "4" y1 = "9" x2 = "14" y2 = "9" /> < path d = "M14 22V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v18" /> < path d = "M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2h0a2 2 0 0 0 2-2V9.83a2 2 0 0 0-.59-1.42L18 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FUEL",
            html: lucide_fuel,
        }
    };
    const LUCIDE_FUNCTION_SQUARE: Self = {
        #[inline(never)]
        fn lucide_function_square(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < path d = "M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3" /> < path d = "M9 11.2h5.7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_FUNCTION_SQUARE",
            html: lucide_function_square,
        }
    };
    const LUCIDE_GAMEPAD_2: Self = {
        #[inline(never)]
        fn lucide_gamepad_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "6" y1 = "11" x2 = "10" y2 = "11" /> < line x1 = "8" y1 = "9" x2 = "8" y2 = "13" /> < line x1 = "15" y1 = "12" x2 = "15.01" y2 = "12" /> < line x1 = "18" y1 = "10" x2 = "18.01" y2 = "10" /> < path d = "M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GAMEPAD_2",
            html: lucide_gamepad_2,
        }
    };
    const LUCIDE_GAMEPAD: Self = {
        #[inline(never)]
        fn lucide_gamepad(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "6" y1 = "12" x2 = "10" y2 = "12" /> < line x1 = "8" y1 = "10" x2 = "8" y2 = "14" /> < line x1 = "15" y1 = "13" x2 = "15.01" y2 = "13" /> < line x1 = "18" y1 = "11" x2 = "18.01" y2 = "11" /> < rect x = "2" y = "6" width = "20" height = "12" rx = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GAMEPAD",
            html: lucide_gamepad,
        }
    };
    const LUCIDE_GAUGE: Self = {
        #[inline(never)]
        fn lucide_gauge(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m12 15 3.5-3.5" /> < path d = "M20.3 18c.4-1 .7-2.2.7-3.4C21 9.8 17 6 12 6s-9 3.8-9 8.6c0 1.2.3 2.4.7 3.4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GAUGE",
            html: lucide_gauge,
        }
    };
    const LUCIDE_GAVEL: Self = {
        #[inline(never)]
        fn lucide_gavel(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m14 13-7.5 7.5c-.83.83-2.17.83-3 0 0 0 0 0 0 0a2.12 2.12 0 0 1 0-3L11 10" /> < path d = "m16 16 6-6" /> < path d = "m8 8 6-6" /> < path d = "m9 7 8 8" /> < path d = "m21 11-8-8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GAVEL",
            html: lucide_gavel,
        }
    };
    const LUCIDE_GEM: Self = {
        #[inline(never)]
        fn lucide_gem(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "6 3 18 3 22 9 12 22 2 9" /> < path d = "m12 22 4-13-3-6" /> < path d = "M12 22 8 9l3-6" /> < path d = "M2 9h20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GEM",
            html: lucide_gem,
        }
    };
    const LUCIDE_GHOST: Self = {
        #[inline(never)]
        fn lucide_ghost(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 10h.01" /> < path d = "M15 10h.01" /> < path d = "M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GHOST",
            html: lucide_ghost,
        }
    };
    const LUCIDE_GIFT: Self = {
        #[inline(never)]
        fn lucide_gift(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "20 12 20 22 4 22 4 12" /> < rect x = "2" y = "7" width = "20" height = "5" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "7" /> < path d = "M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z" /> < path d = "M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIFT",
            html: lucide_gift,
        }
    };
    const LUCIDE_GIT_BRANCH_PLUS: Self = {
        #[inline(never)]
        fn lucide_git_branch_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 3v12" /> < path d = "M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" /> < path d = "M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" /> < path d = "M15 6a9 9 0 0 0-9 9" /> < path d = "M18 15v6" /> < path d = "M21 18h-6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIT_BRANCH_PLUS",
            html: lucide_git_branch_plus,
        }
    };
    const LUCIDE_GIT_BRANCH: Self = {
        #[inline(never)]
        fn lucide_git_branch(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "6" y1 = "3" x2 = "6" y2 = "15" /> < circle cx = "18" cy = "6" r = "3" /> < circle cx = "6" cy = "18" r = "3" /> < path d = "M18 9a9 9 0 0 1-9 9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIT_BRANCH",
            html: lucide_git_branch,
        }
    };
    const LUCIDE_GIT_COMMIT: Self = {
        #[inline(never)]
        fn lucide_git_commit(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "3" /> < line x1 = "3" y1 = "12" x2 = "9" y2 = "12" /> < line x1 = "15" y1 = "12" x2 = "21" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIT_COMMIT",
            html: lucide_git_commit,
        }
    };
    const LUCIDE_GIT_COMPARE: Self = {
        #[inline(never)]
        fn lucide_git_compare(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "18" cy = "18" r = "3" /> < circle cx = "6" cy = "6" r = "3" /> < path d = "M13 6h3a2 2 0 0 1 2 2v7" /> < path d = "M11 18H8a2 2 0 0 1-2-2V9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIT_COMPARE",
            html: lucide_git_compare,
        }
    };
    const LUCIDE_GIT_FORK: Self = {
        #[inline(never)]
        fn lucide_git_fork(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "18" r = "3" /> < circle cx = "6" cy = "6" r = "3" /> < circle cx = "18" cy = "6" r = "3" /> < path d = "M18 9v1a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2V9" /> < path d = "M12 12v3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIT_FORK",
            html: lucide_git_fork,
        }
    };
    const LUCIDE_GIT_MERGE: Self = {
        #[inline(never)]
        fn lucide_git_merge(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "18" cy = "18" r = "3" /> < circle cx = "6" cy = "6" r = "3" /> < path d = "M6 21V9a9 9 0 0 0 9 9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIT_MERGE",
            html: lucide_git_merge,
        }
    };
    const LUCIDE_GIT_PULL_REQUEST_CLOSED: Self = {
        #[inline(never)]
        fn lucide_git_pull_request_closed(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "18" cy = "18" r = "3" /> < circle cx = "6" cy = "6" r = "3" /> < path d = "M18 11.5V15" /> < path d = "m21 3-6 6" /> < path d = "m21 9-6-6" /> < line x1 = "6" y1 = "9" x2 = "6" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIT_PULL_REQUEST_CLOSED",
            html: lucide_git_pull_request_closed,
        }
    };
    const LUCIDE_GIT_PULL_REQUEST_DRAFT: Self = {
        #[inline(never)]
        fn lucide_git_pull_request_draft(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "18" cy = "18" r = "3" /> < circle cx = "6" cy = "6" r = "3" /> < path d = "M18 6V5" /> < path d = "M18 11v-1" /> < line x1 = "6" y1 = "9" x2 = "6" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIT_PULL_REQUEST_DRAFT",
            html: lucide_git_pull_request_draft,
        }
    };
    const LUCIDE_GIT_PULL_REQUEST: Self = {
        #[inline(never)]
        fn lucide_git_pull_request(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "18" cy = "18" r = "3" /> < circle cx = "6" cy = "6" r = "3" /> < path d = "M13 6h3a2 2 0 0 1 2 2v7" /> < line x1 = "6" y1 = "9" x2 = "6" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GIT_PULL_REQUEST",
            html: lucide_git_pull_request,
        }
    };
    const LUCIDE_GITHUB: Self = {
        #[inline(never)]
        fn lucide_github(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4" /> < path d = "M9 18c-4.51 2-5-2-7-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GITHUB",
            html: lucide_github,
        }
    };
    const LUCIDE_GITLAB: Self = {
        #[inline(never)]
        fn lucide_gitlab(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GITLAB",
            html: lucide_gitlab,
        }
    };
    const LUCIDE_GLASS_WATER: Self = {
        #[inline(never)]
        fn lucide_glass_water(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15.2 22H8.8a2 2 0 0 1-2-1.79L5 3h14l-1.81 17.21A2 2 0 0 1 15.2 22Z" /> < path d = "M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GLASS_WATER",
            html: lucide_glass_water,
        }
    };
    const LUCIDE_GLASSES: Self = {
        #[inline(never)]
        fn lucide_glasses(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "6" cy = "15" r = "4" /> < circle cx = "18" cy = "15" r = "4" /> < path d = "M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2" /> < path d = "M2.5 13 5 7c.7-1.3 1.4-2 3-2" /> < path d = "M21.5 13 19 7c-.7-1.3-1.5-2-3-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GLASSES",
            html: lucide_glasses,
        }
    };
    const LUCIDE_GLOBE_2: Self = {
        #[inline(never)]
        fn lucide_globe_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15 21v-4a2 2 0 0 1 2-2h4" /> < path d = "M7 4v2a3 3 0 0 0 3 2h0a2 2 0 0 1 2 2 2 2 0 0 0 4 0 2 2 0 0 1 2-2h3" /> < path d = "M3 11h2a2 2 0 0 1 2 2v1a2 2 0 0 0 2 2 2 2 0 0 1 2 2v4" /> < circle cx = "12" cy = "12" r = "10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GLOBE_2",
            html: lucide_globe_2,
        }
    };
    const LUCIDE_GLOBE: Self = {
        #[inline(never)]
        fn lucide_globe(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "2" y1 = "12" x2 = "22" y2 = "12" /> < path d = "M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GLOBE",
            html: lucide_globe,
        }
    };
    const LUCIDE_GRAB: Self = {
        #[inline(never)]
        fn lucide_grab(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 11.5V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1.4" /> < path d = "M14 10V8a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2" /> < path d = "M10 9.9V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v5" /> < path d = "M6 14v0a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0" /> < path d = "M18 11v0a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GRAB",
            html: lucide_grab,
        }
    };
    const LUCIDE_GRADUATION_CAP: Self = {
        #[inline(never)]
        fn lucide_graduation_cap(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 10v6M2 10l10-5 10 5-10 5z" /> < path d = "M6 12v5c3 3 9 3 12 0v-5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GRADUATION_CAP",
            html: lucide_graduation_cap,
        }
    };
    const LUCIDE_GRAPE: Self = {
        #[inline(never)]
        fn lucide_grape(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 5V2l-5.89 5.89" /> < circle cx = "16.6" cy = "15.89" r = "3" /> < circle cx = "8.11" cy = "7.4" r = "3" /> < circle cx = "12.35" cy = "11.65" r = "3" /> < circle cx = "13.91" cy = "5.85" r = "3" /> < circle cx = "18.15" cy = "10.09" r = "3" /> < circle cx = "6.56" cy = "13.2" r = "3" /> < circle cx = "10.8" cy = "17.44" r = "3" /> < circle cx = "5" cy = "19" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GRAPE",
            html: lucide_grape,
        }
    };
    const LUCIDE_GRID: Self = {
        #[inline(never)]
        fn lucide_grid(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "3" y1 = "9" x2 = "21" y2 = "9" /> < line x1 = "3" y1 = "15" x2 = "21" y2 = "15" /> < line x1 = "9" y1 = "3" x2 = "9" y2 = "21" /> < line x1 = "15" y1 = "3" x2 = "15" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GRID",
            html: lucide_grid,
        }
    };
    const LUCIDE_GRIP_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_grip_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "9" r = "1" /> < circle cx = "19" cy = "9" r = "1" /> < circle cx = "5" cy = "9" r = "1" /> < circle cx = "12" cy = "15" r = "1" /> < circle cx = "19" cy = "15" r = "1" /> < circle cx = "5" cy = "15" r = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GRIP_HORIZONTAL",
            html: lucide_grip_horizontal,
        }
    };
    const LUCIDE_GRIP_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_grip_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "9" cy = "12" r = "1" /> < circle cx = "9" cy = "5" r = "1" /> < circle cx = "9" cy = "19" r = "1" /> < circle cx = "15" cy = "12" r = "1" /> < circle cx = "15" cy = "5" r = "1" /> < circle cx = "15" cy = "19" r = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_GRIP_VERTICAL",
            html: lucide_grip_vertical,
        }
    };
    const LUCIDE_HAMMER: Self = {
        #[inline(never)]
        fn lucide_hammer(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m15 12-8.5 8.5c-.83.83-2.17.83-3 0 0 0 0 0 0 0a2.12 2.12 0 0 1 0-3L12 9" /> < path d = "M17.64 15 22 10.64" /> < path d = "m20.91 11.7-1.25-1.25c-.6-.6-.93-1.4-.93-2.25v-.86L16.01 4.6a5.56 5.56 0 0 0-3.94-1.64H9l.92.82A6.18 6.18 0 0 1 12 8.4v1.56l2 2h2.47l2.26 1.91" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HAMMER",
            html: lucide_hammer,
        }
    };
    const LUCIDE_HAND_METAL: Self = {
        #[inline(never)]
        fn lucide_hand_metal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 12.5V10a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1.4" /> < path d = "M14 11V9a2 2 0 1 0-4 0v2" /> < path d = "M10 10.5V5a2 2 0 1 0-4 0v9" /> < path d = "m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HAND_METAL",
            html: lucide_hand_metal,
        }
    };
    const LUCIDE_HAND: Self = {
        #[inline(never)]
        fn lucide_hand(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 11V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0" /> < path d = "M14 10V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2" /> < path d = "M10 10.5V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v8" /> < path d = "M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HAND",
            html: lucide_hand,
        }
    };
    const LUCIDE_HARD_DRIVE: Self = {
        #[inline(never)]
        fn lucide_hard_drive(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "22" y1 = "12" x2 = "2" y2 = "12" /> < path d = "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z" /> < line x1 = "6" y1 = "16" x2 = "6.01" y2 = "16" /> < line x1 = "10" y1 = "16" x2 = "10.01" y2 = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HARD_DRIVE",
            html: lucide_hard_drive,
        }
    };
    const LUCIDE_HARD_HAT: Self = {
        #[inline(never)]
        fn lucide_hard_hat(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 18a1 1 0 0 0 1 1h18a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v2z" /> < path d = "M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5" /> < path d = "M4 15v-3a6 6 0 0 1 6-6h0" /> < path d = "M14 6h0a6 6 0 0 1 6 6v3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HARD_HAT",
            html: lucide_hard_hat,
        }
    };
    const LUCIDE_HASH: Self = {
        #[inline(never)]
        fn lucide_hash(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "4" y1 = "9" x2 = "20" y2 = "9" /> < line x1 = "4" y1 = "15" x2 = "20" y2 = "15" /> < line x1 = "10" y1 = "3" x2 = "8" y2 = "21" /> < line x1 = "16" y1 = "3" x2 = "14" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HASH",
            html: lucide_hash,
        }
    };
    const LUCIDE_HAZE: Self = {
        #[inline(never)]
        fn lucide_haze(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m5.2 6.2 1.4 1.4" /> < path d = "M2 13h2" /> < path d = "M20 13h2" /> < path d = "m17.4 7.6 1.4-1.4" /> < path d = "M22 17H2" /> < path d = "M22 21H2" /> < path d = "M16 13a4 4 0 0 0-8 0" /> < path d = "M12 5V2.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HAZE",
            html: lucide_haze,
        }
    };
    const LUCIDE_HEADPHONES: Self = {
        #[inline(never)]
        fn lucide_headphones(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 18v-6a9 9 0 0 1 18 0v6" /> < path d = "M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HEADPHONES",
            html: lucide_headphones,
        }
    };
    const LUCIDE_HEART_CRACK: Self = {
        #[inline(never)]
        fn lucide_heart_crack(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z" /> < path d = "m12 13-1-1 2-2-3-2.5 2.77-2.92" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HEART_CRACK",
            html: lucide_heart_crack,
        }
    };
    const LUCIDE_HEART_HANDSHAKE: Self = {
        #[inline(never)]
        fn lucide_heart_handshake(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z" /> < path d = "M12 5.36 8.87 8.5a2.13 2.13 0 0 0 0 3h0a2.13 2.13 0 0 0 3 0l2.26-2.21a3 3 0 0 1 4.22 0l2.4 2.4" /> < path d = "m18 15-2-2" /> < path d = "m15 18-2-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HEART_HANDSHAKE",
            html: lucide_heart_handshake,
        }
    };
    const LUCIDE_HEART_OFF: Self = {
        #[inline(never)]
        fn lucide_heart_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4.12 4.107a5.4 5.4 0 0 0-.538.473C1.46 6.7 1.33 10.28 4 13l8 8 4.5-4.5" /> < path d = "M19.328 13.672 20 13c2.67-2.72 2.54-6.3.42-8.42a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-2.386-1.393" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HEART_OFF",
            html: lucide_heart_off,
        }
    };
    const LUCIDE_HEART_PULSE: Self = {
        #[inline(never)]
        fn lucide_heart_pulse(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z" /> < path d = "M3.5 12h6l.5-1 2 4.5 2-7 1.5 3.5h5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HEART_PULSE",
            html: lucide_heart_pulse,
        }
    };
    const LUCIDE_HEART: Self = {
        #[inline(never)]
        fn lucide_heart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HEART",
            html: lucide_heart,
        }
    };
    const LUCIDE_HELP_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_help_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" /> < line x1 = "12" y1 = "17" x2 = "12.01" y2 = "17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HELP_CIRCLE",
            html: lucide_help_circle,
        }
    };
    const LUCIDE_HEXAGON: Self = {
        #[inline(never)]
        fn lucide_hexagon(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HEXAGON",
            html: lucide_hexagon,
        }
    };
    const LUCIDE_HIGHLIGHTER: Self = {
        #[inline(never)]
        fn lucide_highlighter(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m9 11-6 6v3h9l3-3" /> < path d = "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HIGHLIGHTER",
            html: lucide_highlighter,
        }
    };
    const LUCIDE_HISTORY: Self = {
        #[inline(never)]
        fn lucide_history(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 3v5h5" /> < path d = "M3.05 13A9 9 0 1 0 6 5.3L3 8" /> < path d = "M12 7v5l4 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HISTORY",
            html: lucide_history,
        }
    };
    const LUCIDE_HOME: Self = {
        #[inline(never)]
        fn lucide_home(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z" /> < polyline points = "9 22 9 12 15 12 15 22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HOME",
            html: lucide_home,
        }
    };
    const LUCIDE_HOURGLASS: Self = {
        #[inline(never)]
        fn lucide_hourglass(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 22h14" /> < path d = "M5 2h14" /> < path d = "M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22" /> < path d = "M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_HOURGLASS",
            html: lucide_hourglass,
        }
    };
    const LUCIDE_ICE_CREAM: Self = {
        #[inline(never)]
        fn lucide_ice_cream(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11" /> < path d = "M17 7A5 5 0 0 0 7 7" /> < path d = "M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ICE_CREAM",
            html: lucide_ice_cream,
        }
    };
    const LUCIDE_IMAGE_MINUS: Self = {
        #[inline(never)]
        fn lucide_image_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7" /> < line x1 = "16" y1 = "5" x2 = "22" y2 = "5" /> < circle cx = "9" cy = "9" r = "2" /> < path d = "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_IMAGE_MINUS",
            html: lucide_image_minus,
        }
    };
    const LUCIDE_IMAGE_OFF: Self = {
        #[inline(never)]
        fn lucide_image_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> < path d = "M10.41 10.41a2 2 0 1 1-2.83-2.83" /> < line x1 = "13.5" y1 = "13.5" x2 = "6" y2 = "21" /> < line x1 = "18" y1 = "12" x2 = "21" y2 = "15" /> < path d = "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59" /> < path d = "M21 15V5a2 2 0 0 0-2-2H9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_IMAGE_OFF",
            html: lucide_image_off,
        }
    };
    const LUCIDE_IMAGE_PLUS: Self = {
        #[inline(never)]
        fn lucide_image_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7" /> < line x1 = "16" y1 = "5" x2 = "22" y2 = "5" /> < line x1 = "19" y1 = "2" x2 = "19" y2 = "8" /> < circle cx = "9" cy = "9" r = "2" /> < path d = "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_IMAGE_PLUS",
            html: lucide_image_plus,
        }
    };
    const LUCIDE_IMAGE: Self = {
        #[inline(never)]
        fn lucide_image(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < circle cx = "9" cy = "9" r = "2" /> < path d = "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_IMAGE",
            html: lucide_image,
        }
    };
    const LUCIDE_IMPORT: Self = {
        #[inline(never)]
        fn lucide_import(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 3v12" /> < path d = "m8 11 4 4 4-4" /> < path d = "M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_IMPORT",
            html: lucide_import,
        }
    };
    const LUCIDE_INBOX: Self = {
        #[inline(never)]
        fn lucide_inbox(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "22 12 16 12 14 15 10 15 8 12 2 12" /> < path d = "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_INBOX",
            html: lucide_inbox,
        }
    };
    const LUCIDE_INDENT: Self = {
        #[inline(never)]
        fn lucide_indent(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "3 8 7 12 3 16" /> < line x1 = "21" y1 = "12" x2 = "11" y2 = "12" /> < line x1 = "21" y1 = "6" x2 = "11" y2 = "6" /> < line x1 = "21" y1 = "18" x2 = "11" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_INDENT",
            html: lucide_indent,
        }
    };
    const LUCIDE_INDIAN_RUPEE: Self = {
        #[inline(never)]
        fn lucide_indian_rupee(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 3h12" /> < path d = "M6 8h12" /> < path d = "m6 13 8.5 8" /> < path d = "M6 13h3" /> < path d = "M9 13c6.667 0 6.667-10 0-10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_INDIAN_RUPEE",
            html: lucide_indian_rupee,
        }
    };
    const LUCIDE_INFINITY: Self = {
        #[inline(never)]
        fn lucide_infinity(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18.178 8c5.096 0 5.096 8 0 8-5.095 0-7.133-8-12.739-8-4.585 0-4.585 8 0 8 5.606 0 7.644-8 12.74-8z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_INFINITY",
            html: lucide_infinity,
        }
    };
    const LUCIDE_INFO: Self = {
        #[inline(never)]
        fn lucide_info(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "12" y1 = "16" x2 = "12" y2 = "12" /> < line x1 = "12" y1 = "8" x2 = "12.01" y2 = "8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_INFO",
            html: lucide_info,
        }
    };
    const LUCIDE_INSPECT: Self = {
        #[inline(never)]
        fn lucide_inspect(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6" /> < path d = "m12 12 4 10 1.7-4.3L22 16Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_INSPECT",
            html: lucide_inspect,
        }
    };
    const LUCIDE_INSTAGRAM: Self = {
        #[inline(never)]
        fn lucide_instagram(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "2" width = "20" height = "20" rx = "5" ry = "5" /> < path d = "M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" /> < line x1 = "17.5" y1 = "6.5" x2 = "17.51" y2 = "6.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_INSTAGRAM",
            html: lucide_instagram,
        }
    };
    const LUCIDE_ITALIC: Self = {
        #[inline(never)]
        fn lucide_italic(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "19" y1 = "4" x2 = "10" y2 = "4" /> < line x1 = "14" y1 = "20" x2 = "5" y2 = "20" /> < line x1 = "15" y1 = "4" x2 = "9" y2 = "20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ITALIC",
            html: lucide_italic,
        }
    };
    const LUCIDE_JAPANESE_YEN: Self = {
        #[inline(never)]
        fn lucide_japanese_yen(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 9.5V21m0-11.5L6 3m6 6.5L18 3" /> < path d = "M6 15h12" /> < path d = "M6 11h12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_JAPANESE_YEN",
            html: lucide_japanese_yen,
        }
    };
    const LUCIDE_JOYSTICK: Self = {
        #[inline(never)]
        fn lucide_joystick(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z" /> < path d = "M6 15v-2" /> < path d = "M12 15V9" /> < circle cx = "12" cy = "6" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_JOYSTICK",
            html: lucide_joystick,
        }
    };
    const LUCIDE_KEY: Self = {
        #[inline(never)]
        fn lucide_key(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m21 2-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0 3 3L22 7l-3-3m-3.5 3.5L19 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_KEY",
            html: lucide_key,
        }
    };
    const LUCIDE_KEYBOARD: Self = {
        #[inline(never)]
        fn lucide_keyboard(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "4" width = "20" height = "16" rx = "2" ry = "2" /> < path d = "M6 8h.001" /> < path d = "M10 8h.001" /> < path d = "M14 8h.001" /> < path d = "M18 8h.001" /> < path d = "M8 12h.001" /> < path d = "M12 12h.001" /> < path d = "M16 12h.001" /> < path d = "M7 16h10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_KEYBOARD",
            html: lucide_keyboard,
        }
    };
    const LUCIDE_LAMP_CEILING: Self = {
        #[inline(never)]
        fn lucide_lamp_ceiling(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 2v5" /> < path d = "M6 7h12l4 9H2l4-9Z" /> < path d = "M9.17 16a3 3 0 1 0 5.66 0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAMP_CEILING",
            html: lucide_lamp_ceiling,
        }
    };
    const LUCIDE_LAMP_DESK: Self = {
        #[inline(never)]
        fn lucide_lamp_desk(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m14 5-3 3 2 7 8-8-7-2Z" /> < path d = "m14 5-3 3-3-3 3-3 3 3Z" /> < path d = "M9.5 6.5 4 12l3 6" /> < path d = "M3 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H3Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAMP_DESK",
            html: lucide_lamp_desk,
        }
    };
    const LUCIDE_LAMP_FLOOR: Self = {
        #[inline(never)]
        fn lucide_lamp_floor(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 2h6l3 7H6l3-7Z" /> < path d = "M12 9v13" /> < path d = "M9 22h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAMP_FLOOR",
            html: lucide_lamp_floor,
        }
    };
    const LUCIDE_LAMP_WALL_DOWN: Self = {
        #[inline(never)]
        fn lucide_lamp_wall_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 13h6l3 7H8l3-7Z" /> < path d = "M14 13V8a2 2 0 0 0-2-2H8" /> < path d = "M4 9h2a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H4v6Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAMP_WALL_DOWN",
            html: lucide_lamp_wall_down,
        }
    };
    const LUCIDE_LAMP_WALL_UP: Self = {
        #[inline(never)]
        fn lucide_lamp_wall_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 4h6l3 7H8l3-7Z" /> < path d = "M14 11v5a2 2 0 0 1-2 2H8" /> < path d = "M4 15h2a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H4v-6Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAMP_WALL_UP",
            html: lucide_lamp_wall_up,
        }
    };
    const LUCIDE_LAMP: Self = {
        #[inline(never)]
        fn lucide_lamp(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 2h8l4 10H4L8 2Z" /> < path d = "M12 12v6" /> < path d = "M8 22v-2c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v2H8Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAMP",
            html: lucide_lamp,
        }
    };
    const LUCIDE_LANDMARK: Self = {
        #[inline(never)]
        fn lucide_landmark(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "3" y1 = "22" x2 = "21" y2 = "22" /> < line x1 = "6" y1 = "18" x2 = "6" y2 = "11" /> < line x1 = "10" y1 = "18" x2 = "10" y2 = "11" /> < line x1 = "14" y1 = "18" x2 = "14" y2 = "11" /> < line x1 = "18" y1 = "18" x2 = "18" y2 = "11" /> < polygon points = "12 2 20 7 4 7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LANDMARK",
            html: lucide_landmark,
        }
    };
    const LUCIDE_LANGUAGES: Self = {
        #[inline(never)]
        fn lucide_languages(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m5 8 6 6" /> < path d = "m4 14 6-6 2-3" /> < path d = "M2 5h12" /> < path d = "M7 2h1" /> < path d = "m22 22-5-10-5 10" /> < path d = "M14 18h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LANGUAGES",
            html: lucide_languages,
        }
    };
    const LUCIDE_LAPTOP_2: Self = {
        #[inline(never)]
        fn lucide_laptop_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "4" width = "18" height = "12" rx = "2" ry = "2" /> < line x1 = "2" y1 = "20" x2 = "22" y2 = "20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAPTOP_2",
            html: lucide_laptop_2,
        }
    };
    const LUCIDE_LAPTOP: Self = {
        #[inline(never)]
        fn lucide_laptop(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 16V7a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v9m16 0H4m16 0 1.28 2.55a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45L4 16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAPTOP",
            html: lucide_laptop,
        }
    };
    const LUCIDE_LASSO_SELECT: Self = {
        #[inline(never)]
        fn lucide_lasso_select(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 22a5 5 0 0 1-2-4" /> < path d = "M7 16.93c.96.43 1.96.74 2.99.91" /> < path d = "M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2" /> < path d = "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z" /> < path d = "M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14v0z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LASSO_SELECT",
            html: lucide_lasso_select,
        }
    };
    const LUCIDE_LASSO: Self = {
        #[inline(never)]
        fn lucide_lasso(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 22a5 5 0 0 1-2-4" /> < path d = "M3.3 14A6.8 6.8 0 0 1 2 10c0-4.4 4.5-8 10-8s10 3.6 10 8-4.5 8-10 8a12 12 0 0 1-5-1" /> < path d = "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LASSO",
            html: lucide_lasso,
        }
    };
    const LUCIDE_LAUGH: Self = {
        #[inline(never)]
        fn lucide_laugh(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z" /> < line x1 = "9" y1 = "9" x2 = "9.01" y2 = "9" /> < line x1 = "15" y1 = "9" x2 = "15.01" y2 = "9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAUGH",
            html: lucide_laugh,
        }
    };
    const LUCIDE_LAYERS: Self = {
        #[inline(never)]
        fn lucide_layers(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "12 2 2 7 12 12 22 7 12 2" /> < polyline points = "2 17 12 22 22 17" /> < polyline points = "2 12 12 17 22 12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAYERS",
            html: lucide_layers,
        }
    };
    const LUCIDE_LAYOUT_DASHBOARD: Self = {
        #[inline(never)]
        fn lucide_layout_dashboard(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "7" height = "9" /> < rect x = "14" y = "3" width = "7" height = "5" /> < rect x = "14" y = "12" width = "7" height = "9" /> < rect x = "3" y = "16" width = "7" height = "5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAYOUT_DASHBOARD",
            html: lucide_layout_dashboard,
        }
    };
    const LUCIDE_LAYOUT_GRID: Self = {
        #[inline(never)]
        fn lucide_layout_grid(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "7" height = "7" /> < rect x = "14" y = "3" width = "7" height = "7" /> < rect x = "14" y = "14" width = "7" height = "7" /> < rect x = "3" y = "14" width = "7" height = "7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAYOUT_GRID",
            html: lucide_layout_grid,
        }
    };
    const LUCIDE_LAYOUT_LIST: Self = {
        #[inline(never)]
        fn lucide_layout_list(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "14" width = "7" height = "7" /> < rect x = "3" y = "3" width = "7" height = "7" /> < line x1 = "14" y1 = "4" x2 = "21" y2 = "4" /> < line x1 = "14" y1 = "9" x2 = "21" y2 = "9" /> < line x1 = "14" y1 = "15" x2 = "21" y2 = "15" /> < line x1 = "14" y1 = "20" x2 = "21" y2 = "20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAYOUT_LIST",
            html: lucide_layout_list,
        }
    };
    const LUCIDE_LAYOUT_TEMPLATE: Self = {
        #[inline(never)]
        fn lucide_layout_template(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 3H3v7h18V3z" /> < path d = "M21 14h-5v7h5v-7z" /> < path d = "M12 14H3v7h9v-7z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAYOUT_TEMPLATE",
            html: lucide_layout_template,
        }
    };
    const LUCIDE_LAYOUT: Self = {
        #[inline(never)]
        fn lucide_layout(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "3" y1 = "9" x2 = "21" y2 = "9" /> < line x1 = "9" y1 = "21" x2 = "9" y2 = "9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LAYOUT",
            html: lucide_layout,
        }
    };
    const LUCIDE_LEAF: Self = {
        #[inline(never)]
        fn lucide_leaf(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z" /> < path d = "M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LEAF",
            html: lucide_leaf,
        }
    };
    const LUCIDE_LIBRARY: Self = {
        #[inline(never)]
        fn lucide_library(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m16 6 4 14" /> < path d = "M12 6v14" /> < path d = "M8 8v12" /> < path d = "M4 4v16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIBRARY",
            html: lucide_library,
        }
    };
    const LUCIDE_LIFE_BUOY: Self = {
        #[inline(never)]
        fn lucide_life_buoy(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < circle cx = "12" cy = "12" r = "4" /> < line x1 = "4.93" y1 = "4.93" x2 = "9.17" y2 = "9.17" /> < line x1 = "14.83" y1 = "14.83" x2 = "19.07" y2 = "19.07" /> < line x1 = "14.83" y1 = "9.17" x2 = "19.07" y2 = "4.93" /> < line x1 = "14.83" y1 = "9.17" x2 = "18.36" y2 = "5.64" /> < line x1 = "4.93" y1 = "19.07" x2 = "9.17" y2 = "14.83" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIFE_BUOY",
            html: lucide_life_buoy,
        }
    };
    const LUCIDE_LIGHTBULB_OFF: Self = {
        #[inline(never)]
        fn lucide_lightbulb_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 18h6" /> < path d = "M10 22h4" /> < path d = "m2 2 20 20" /> < path d = "M9 2.804A6 6 0 0 1 18 8a4.65 4.65 0 0 1-1.03 3" /> < path d = "M8.91 14a4.61 4.61 0 0 0-1.41-2.5C6.23 10.23 6 9 6 8a6 6 0 0 1 .084-1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIGHTBULB_OFF",
            html: lucide_lightbulb_off,
        }
    };
    const LUCIDE_LIGHTBULB: Self = {
        #[inline(never)]
        fn lucide_lightbulb(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "9" y1 = "18" x2 = "15" y2 = "18" /> < line x1 = "10" y1 = "22" x2 = "14" y2 = "22" /> < path d = "M15.09 14c.18-.98.65-1.74 1.41-2.5A4.65 4.65 0 0 0 18 8 6 6 0 0 0 6 8c0 1 .23 2.23 1.5 3.5A4.61 4.61 0 0 1 8.91 14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIGHTBULB",
            html: lucide_lightbulb,
        }
    };
    const LUCIDE_LINE_CHART: Self = {
        #[inline(never)]
        fn lucide_line_chart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 3v18h18" /> < path d = "m19 9-5 5-4-4-3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LINE_CHART",
            html: lucide_line_chart,
        }
    };
    const LUCIDE_LINK_2_OFF: Self = {
        #[inline(never)]
        fn lucide_link_2_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 17H7A5 5 0 0 1 7 7" /> < path d = "M15 7h2a5 5 0 0 1 4 8" /> < line x1 = "8" y1 = "12" x2 = "12" y2 = "12" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LINK_2_OFF",
            html: lucide_link_2_off,
        }
    };
    const LUCIDE_LINK_2: Self = {
        #[inline(never)]
        fn lucide_link_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 17H7A5 5 0 0 1 7 7h2" /> < path d = "M15 7h2a5 5 0 1 1 0 10h-2" /> < line x1 = "8" y1 = "12" x2 = "16" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LINK_2",
            html: lucide_link_2,
        }
    };
    const LUCIDE_LINK: Self = {
        #[inline(never)]
        fn lucide_link(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" /> < path d = "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LINK",
            html: lucide_link,
        }
    };
    const LUCIDE_LINKEDIN: Self = {
        #[inline(never)]
        fn lucide_linkedin(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" /> < rect x = "2" y = "9" width = "4" height = "12" /> < circle cx = "4" cy = "4" r = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LINKEDIN",
            html: lucide_linkedin,
        }
    };
    const LUCIDE_LIST_CHECKS: Self = {
        #[inline(never)]
        fn lucide_list_checks(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "10" y1 = "6" x2 = "21" y2 = "6" /> < line x1 = "10" y1 = "12" x2 = "21" y2 = "12" /> < line x1 = "10" y1 = "18" x2 = "21" y2 = "18" /> < polyline points = "3 6 4 7 6 5" /> < polyline points = "3 12 4 13 6 11" /> < polyline points = "3 18 4 19 6 17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST_CHECKS",
            html: lucide_list_checks,
        }
    };
    const LUCIDE_LIST_END: Self = {
        #[inline(never)]
        fn lucide_list_end(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 12H3" /> < path d = "M16 6H3" /> < path d = "M10 18H3" /> < path d = "M21 6v10a2 2 0 0 1-2 2h-4" /> < path d = "m16 16-2 2 2 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST_END",
            html: lucide_list_end,
        }
    };
    const LUCIDE_LIST_MINUS: Self = {
        #[inline(never)]
        fn lucide_list_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 12H3" /> < path d = "M16 6H3" /> < path d = "M16 18H3" /> < path d = "M21 12h-6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST_MINUS",
            html: lucide_list_minus,
        }
    };
    const LUCIDE_LIST_MUSIC: Self = {
        #[inline(never)]
        fn lucide_list_music(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 15V6" /> < path d = "M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z" /> < path d = "M12 12H3" /> < path d = "M16 6H3" /> < path d = "M12 18H3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST_MUSIC",
            html: lucide_list_music,
        }
    };
    const LUCIDE_LIST_ORDERED: Self = {
        #[inline(never)]
        fn lucide_list_ordered(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "10" y1 = "6" x2 = "21" y2 = "6" /> < line x1 = "10" y1 = "12" x2 = "21" y2 = "12" /> < line x1 = "10" y1 = "18" x2 = "21" y2 = "18" /> < path d = "M4 6h1v4" /> < path d = "M4 10h2" /> < path d = "M6 18H4c0-1 2-2 2-3s-1-1.5-2-1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST_ORDERED",
            html: lucide_list_ordered,
        }
    };
    const LUCIDE_LIST_PLUS: Self = {
        #[inline(never)]
        fn lucide_list_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 12H3" /> < path d = "M16 6H3" /> < path d = "M16 18H3" /> < path d = "M18 9v6" /> < path d = "M21 12h-6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST_PLUS",
            html: lucide_list_plus,
        }
    };
    const LUCIDE_LIST_START: Self = {
        #[inline(never)]
        fn lucide_list_start(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 12H3" /> < path d = "M16 18H3" /> < path d = "M10 6H3" /> < path d = "M21 18V8a2 2 0 0 0-2-2h-5" /> < path d = "m16 8-2-2 2-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST_START",
            html: lucide_list_start,
        }
    };
    const LUCIDE_LIST_VIDEO: Self = {
        #[inline(never)]
        fn lucide_list_video(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 12H3" /> < path d = "M16 6H3" /> < path d = "M12 18H3" /> < path d = "m16 12 5 3-5 3v-6Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST_VIDEO",
            html: lucide_list_video,
        }
    };
    const LUCIDE_LIST_X: Self = {
        #[inline(never)]
        fn lucide_list_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 12H3" /> < path d = "M16 6H3" /> < path d = "M16 18H3" /> < path d = "m19 10-4 4" /> < path d = "m15 10 4 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST_X",
            html: lucide_list_x,
        }
    };
    const LUCIDE_LIST: Self = {
        #[inline(never)]
        fn lucide_list(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "8" y1 = "6" x2 = "21" y2 = "6" /> < line x1 = "8" y1 = "12" x2 = "21" y2 = "12" /> < line x1 = "8" y1 = "18" x2 = "21" y2 = "18" /> < line x1 = "3" y1 = "6" x2 = "3.01" y2 = "6" /> < line x1 = "3" y1 = "12" x2 = "3.01" y2 = "12" /> < line x1 = "3" y1 = "18" x2 = "3.01" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LIST",
            html: lucide_list,
        }
    };
    const LUCIDE_LOADER_2: Self = {
        #[inline(never)]
        fn lucide_loader_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 12a9 9 0 1 1-6.219-8.56" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LOADER_2",
            html: lucide_loader_2,
        }
    };
    const LUCIDE_LOADER: Self = {
        #[inline(never)]
        fn lucide_loader(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "12" y1 = "2" x2 = "12" y2 = "6" /> < line x1 = "12" y1 = "18" x2 = "12" y2 = "22" /> < line x1 = "4.93" y1 = "4.93" x2 = "7.76" y2 = "7.76" /> < line x1 = "16.24" y1 = "16.24" x2 = "19.07" y2 = "19.07" /> < line x1 = "2" y1 = "12" x2 = "6" y2 = "12" /> < line x1 = "18" y1 = "12" x2 = "22" y2 = "12" /> < line x1 = "4.93" y1 = "19.07" x2 = "7.76" y2 = "16.24" /> < line x1 = "16.24" y1 = "7.76" x2 = "19.07" y2 = "4.93" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LOADER",
            html: lucide_loader,
        }
    };
    const LUCIDE_LOCATE_FIXED: Self = {
        #[inline(never)]
        fn lucide_locate_fixed(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" x2 = "5" y1 = "12" y2 = "12" /> < line x1 = "19" x2 = "22" y1 = "12" y2 = "12" /> < line x1 = "12" x2 = "12" y1 = "2" y2 = "5" /> < line x1 = "12" x2 = "12" y1 = "19" y2 = "22" /> < circle cx = "12" cy = "12" r = "7" /> < circle cx = "12" cy = "12" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LOCATE_FIXED",
            html: lucide_locate_fixed,
        }
    };
    const LUCIDE_LOCATE_OFF: Self = {
        #[inline(never)]
        fn lucide_locate_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" x2 = "5" y1 = "12" y2 = "12" /> < line x1 = "19" x2 = "22" y1 = "12" y2 = "12" /> < line x1 = "12" x2 = "12" y1 = "2" y2 = "5" /> < line x1 = "12" x2 = "12" y1 = "19" y2 = "22" /> < path d = "M7.11 7.11C5.83 8.39 5 10.1 5 12c0 3.87 3.13 7 7 7 1.9 0 3.61-.83 4.89-2.11" /> < path d = "M18.71 13.96c.19-.63.29-1.29.29-1.96 0-3.87-3.13-7-7-7-.67 0-1.33.1-1.96.29" /> < line x1 = "2" x2 = "22" y1 = "2" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LOCATE_OFF",
            html: lucide_locate_off,
        }
    };
    const LUCIDE_LOCATE: Self = {
        #[inline(never)]
        fn lucide_locate(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" x2 = "5" y1 = "12" y2 = "12" /> < line x1 = "19" x2 = "22" y1 = "12" y2 = "12" /> < line x1 = "12" x2 = "12" y1 = "2" y2 = "5" /> < line x1 = "12" x2 = "12" y1 = "19" y2 = "22" /> < circle cx = "12" cy = "12" r = "7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LOCATE",
            html: lucide_locate,
        }
    };
    const LUCIDE_LOCK: Self = {
        #[inline(never)]
        fn lucide_lock(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "11" width = "18" height = "11" rx = "2" ry = "2" /> < path d = "M7 11V7a5 5 0 0 1 10 0v4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LOCK",
            html: lucide_lock,
        }
    };
    const LUCIDE_LOG_IN: Self = {
        #[inline(never)]
        fn lucide_log_in(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4" /> < polyline points = "10 17 15 12 10 7" /> < line x1 = "15" y1 = "12" x2 = "3" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LOG_IN",
            html: lucide_log_in,
        }
    };
    const LUCIDE_LOG_OUT: Self = {
        #[inline(never)]
        fn lucide_log_out(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" /> < polyline points = "16 17 21 12 16 7" /> < line x1 = "21" y1 = "12" x2 = "9" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LOG_OUT",
            html: lucide_log_out,
        }
    };
    const LUCIDE_LUGGAGE: Self = {
        #[inline(never)]
        fn lucide_luggage(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 20h0a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h0" /> < path d = "M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14" /> < path d = "M10 20h4" /> < circle cx = "16" cy = "20" r = "2" /> < circle cx = "8" cy = "20" r = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_LUGGAGE",
            html: lucide_luggage,
        }
    };
    const LUCIDE_MAGNET: Self = {
        #[inline(never)]
        fn lucide_magnet(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m6 15-4-4 6.75-6.77a7.79 7.79 0 0 1 11 11L13 22l-4-4 6.39-6.36a2.14 2.14 0 0 0-3-3L6 15" /> < path d = "m5 8 4 4" /> < path d = "m12 15 4 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAGNET",
            html: lucide_magnet,
        }
    };
    const LUCIDE_MAIL_CHECK: Self = {
        #[inline(never)]
        fn lucide_mail_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8" /> < path d = "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> < path d = "m16 19 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAIL_CHECK",
            html: lucide_mail_check,
        }
    };
    const LUCIDE_MAIL_MINUS: Self = {
        #[inline(never)]
        fn lucide_mail_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8" /> < path d = "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> < path d = "M16 19h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAIL_MINUS",
            html: lucide_mail_minus,
        }
    };
    const LUCIDE_MAIL_OPEN: Self = {
        #[inline(never)]
        fn lucide_mail_open(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z" /> < path d = "m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAIL_OPEN",
            html: lucide_mail_open,
        }
    };
    const LUCIDE_MAIL_PLUS: Self = {
        #[inline(never)]
        fn lucide_mail_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8" /> < path d = "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> < path d = "M19 16v6" /> < path d = "M16 19h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAIL_PLUS",
            html: lucide_mail_plus,
        }
    };
    const LUCIDE_MAIL_QUESTION: Self = {
        #[inline(never)]
        fn lucide_mail_question(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5" /> < path d = "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> < path d = "M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2" /> < path d = "M20 22v.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAIL_QUESTION",
            html: lucide_mail_question,
        }
    };
    const LUCIDE_MAIL_SEARCH: Self = {
        #[inline(never)]
        fn lucide_mail_search(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5" /> < path d = "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> < path d = "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6v0Z" /> < circle cx = "18" cy = "18" r = "3" /> < path d = "m22 22-1.5-1.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAIL_SEARCH",
            html: lucide_mail_search,
        }
    };
    const LUCIDE_MAIL_WARNING: Self = {
        #[inline(never)]
        fn lucide_mail_warning(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5" /> < path d = "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> < path d = "M20 14v4" /> < path d = "M20 22v.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAIL_WARNING",
            html: lucide_mail_warning,
        }
    };
    const LUCIDE_MAIL_X: Self = {
        #[inline(never)]
        fn lucide_mail_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9" /> < path d = "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> < path d = "m17 17 4 4" /> < path d = "m21 17-4 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAIL_X",
            html: lucide_mail_x,
        }
    };
    const LUCIDE_MAIL: Self = {
        #[inline(never)]
        fn lucide_mail(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "4" width = "20" height = "16" rx = "2" /> < path d = "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAIL",
            html: lucide_mail,
        }
    };
    const LUCIDE_MAILS: Self = {
        #[inline(never)]
        fn lucide_mails(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "6" y = "4" width = "16" height = "13" rx = "2" /> < path d = "m22 7-7.1 3.78c-.57.3-1.23.3-1.8 0L6 7" /> < path d = "M2 8v11c0 1.1.9 2 2 2h14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAILS",
            html: lucide_mails,
        }
    };
    const LUCIDE_MAP_PIN_OFF: Self = {
        #[inline(never)]
        fn lucide_map_pin_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5.43 5.43A8.06 8.06 0 0 0 4 10c0 6 8 12 8 12a29.94 29.94 0 0 0 5-5" /> < path d = "M19.18 13.52A8.66 8.66 0 0 0 20 10a8 8 0 0 0-8-8 7.88 7.88 0 0 0-3.52.82" /> < path d = "M9.13 9.13A2.78 2.78 0 0 0 9 10a3 3 0 0 0 3 3 2.78 2.78 0 0 0 .87-.13" /> < path d = "M14.9 9.25a3 3 0 0 0-2.15-2.16" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAP_PIN_OFF",
            html: lucide_map_pin_off,
        }
    };
    const LUCIDE_MAP_PIN: Self = {
        #[inline(never)]
        fn lucide_map_pin(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z" /> < circle cx = "12" cy = "10" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAP_PIN",
            html: lucide_map_pin,
        }
    };
    const LUCIDE_MAP: Self = {
        #[inline(never)]
        fn lucide_map(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "3 6 9 3 15 6 21 3 21 18 15 21 9 18 3 21" /> < line x1 = "9" y1 = "3" x2 = "9" y2 = "18" /> < line x1 = "15" y1 = "6" x2 = "15" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAP",
            html: lucide_map,
        }
    };
    const LUCIDE_MARTINI: Self = {
        #[inline(never)]
        fn lucide_martini(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 22h8" /> < path d = "M12 11v11" /> < path d = "m19 3-7 8-7-8Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MARTINI",
            html: lucide_martini,
        }
    };
    const LUCIDE_MAXIMIZE_2: Self = {
        #[inline(never)]
        fn lucide_maximize_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "15 3 21 3 21 9" /> < polyline points = "9 21 3 21 3 15" /> < line x1 = "21" y1 = "3" x2 = "14" y2 = "10" /> < line x1 = "3" y1 = "21" x2 = "10" y2 = "14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAXIMIZE_2",
            html: lucide_maximize_2,
        }
    };
    const LUCIDE_MAXIMIZE: Self = {
        #[inline(never)]
        fn lucide_maximize(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 3H5a2 2 0 0 0-2 2v3" /> < path d = "M21 8V5a2 2 0 0 0-2-2h-3" /> < path d = "M3 16v3a2 2 0 0 0 2 2h3" /> < path d = "M16 21h3a2 2 0 0 0 2-2v-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MAXIMIZE",
            html: lucide_maximize,
        }
    };
    const LUCIDE_MEDAL: Self = {
        #[inline(never)]
        fn lucide_medal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15" /> < path d = "M11 12 5.12 2.2" /> < path d = "m13 12 5.88-9.8" /> < path d = "M8 7h8" /> < circle cx = "12" cy = "17" r = "5" /> < path d = "M12 18v-2h-.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MEDAL",
            html: lucide_medal,
        }
    };
    const LUCIDE_MEGAPHONE_OFF: Self = {
        #[inline(never)]
        fn lucide_megaphone_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9.26 9.26 3 11v3l14.14 3.14" /> < path d = "M21 15.34V6l-7.31 2.03" /> < path d = "M11.6 16.8a3 3 0 1 1-5.8-1.6" /> < line x1 = "2" x2 = "22" y1 = "2" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MEGAPHONE_OFF",
            html: lucide_megaphone_off,
        }
    };
    const LUCIDE_MEGAPHONE: Self = {
        #[inline(never)]
        fn lucide_megaphone(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m3 11 18-5v12L3 14v-3z" /> < path d = "M11.6 16.8a3 3 0 1 1-5.8-1.6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MEGAPHONE",
            html: lucide_megaphone,
        }
    };
    const LUCIDE_MEH: Self = {
        #[inline(never)]
        fn lucide_meh(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "8" y1 = "15" x2 = "16" y2 = "15" /> < line x1 = "9" y1 = "9" x2 = "9.01" y2 = "9" /> < line x1 = "15" y1 = "9" x2 = "15.01" y2 = "9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MEH",
            html: lucide_meh,
        }
    };
    const LUCIDE_MENU: Self = {
        #[inline(never)]
        fn lucide_menu(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "4" y1 = "12" x2 = "20" y2 = "12" /> < line x1 = "4" y1 = "6" x2 = "20" y2 = "6" /> < line x1 = "4" y1 = "18" x2 = "20" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MENU",
            html: lucide_menu,
        }
    };
    const LUCIDE_MESSAGE_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_message_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MESSAGE_CIRCLE",
            html: lucide_message_circle,
        }
    };
    const LUCIDE_MESSAGE_SQUARE: Self = {
        #[inline(never)]
        fn lucide_message_square(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MESSAGE_SQUARE",
            html: lucide_message_square,
        }
    };
    const LUCIDE_MIC_2: Self = {
        #[inline(never)]
        fn lucide_mic_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m12 8-9.04 9.06a2.82 2.82 0 1 0 3.98 3.98L16 12" /> < circle cx = "17" cy = "7" r = "5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MIC_2",
            html: lucide_mic_2,
        }
    };
    const LUCIDE_MIC_OFF: Self = {
        #[inline(never)]
        fn lucide_mic_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> < path d = "M18.89 13.23A7.12 7.12 0 0 0 19 12v-2" /> < path d = "M5 10v2a7 7 0 0 0 12 5" /> < path d = "M15 9.34V5a3 3 0 0 0-5.68-1.33" /> < path d = "M9 9v3a3 3 0 0 0 5.12 2.12" /> < line x1 = "12" y1 = "19" x2 = "12" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MIC_OFF",
            html: lucide_mic_off,
        }
    };
    const LUCIDE_MIC: Self = {
        #[inline(never)]
        fn lucide_mic(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 2a3 3 0 0 0-3 3v7a3 3 0 0 0 6 0V5a3 3 0 0 0-3-3Z" /> < path d = "M19 10v2a7 7 0 0 1-14 0v-2" /> < line x1 = "12" y1 = "19" x2 = "12" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MIC",
            html: lucide_mic,
        }
    };
    const LUCIDE_MICROSCOPE: Self = {
        #[inline(never)]
        fn lucide_microscope(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 18h8" /> < path d = "M3 22h18" /> < path d = "M14 22a7 7 0 1 0 0-14h-1" /> < path d = "M9 14h2" /> < path d = "M8 6h4" /> < path d = "M13 10V6.5a.5.5 0 0 0-.5-.5.5.5 0 0 1-.5-.5V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v2.5a.5.5 0 0 1-.5.5.5.5 0 0 0-.5.5V10c0 1.1.9 2 2 2h2a2 2 0 0 0 2-2Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MICROSCOPE",
            html: lucide_microscope,
        }
    };
    const LUCIDE_MICROWAVE: Self = {
        #[inline(never)]
        fn lucide_microwave(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "4" width = "20" height = "15" rx = "2" /> < rect x = "6" y = "8" width = "8" height = "7" rx = "1" /> < path d = "M18 8v7" /> < path d = "M6 19v2" /> < path d = "M18 19v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MICROWAVE",
            html: lucide_microwave,
        }
    };
    const LUCIDE_MILESTONE: Self = {
        #[inline(never)]
        fn lucide_milestone(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 6H5a2 2 0 0 0-2 2v3a2 2 0 0 0 2 2h13l4-3.5L18 6Z" /> < path d = "M12 13v9" /> < path d = "M12 2v4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MILESTONE",
            html: lucide_milestone,
        }
    };
    const LUCIDE_MINIMIZE_2: Self = {
        #[inline(never)]
        fn lucide_minimize_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "4 14 10 14 10 20" /> < polyline points = "20 10 14 10 14 4" /> < line x1 = "14" y1 = "10" x2 = "21" y2 = "3" /> < line x1 = "3" y1 = "21" x2 = "10" y2 = "14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MINIMIZE_2",
            html: lucide_minimize_2,
        }
    };
    const LUCIDE_MINIMIZE: Self = {
        #[inline(never)]
        fn lucide_minimize(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 3v3a2 2 0 0 1-2 2H3" /> < path d = "M21 8h-3a2 2 0 0 1-2-2V3" /> < path d = "M3 16h3a2 2 0 0 1 2 2v3" /> < path d = "M16 21v-3a2 2 0 0 1 2-2h3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MINIMIZE",
            html: lucide_minimize,
        }
    };
    const LUCIDE_MINUS_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_minus_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "8" y1 = "12" x2 = "16" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MINUS_CIRCLE",
            html: lucide_minus_circle,
        }
    };
    const LUCIDE_MINUS_SQUARE: Self = {
        #[inline(never)]
        fn lucide_minus_square(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "8" y1 = "12" x2 = "16" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MINUS_SQUARE",
            html: lucide_minus_square,
        }
    };
    const LUCIDE_MINUS: Self = {
        #[inline(never)]
        fn lucide_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "5" y1 = "12" x2 = "19" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MINUS",
            html: lucide_minus,
        }
    };
    const LUCIDE_MONITOR_OFF: Self = {
        #[inline(never)]
        fn lucide_monitor_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2" /> < path d = "M22 15V5a2 2 0 0 0-2-2H9" /> < path d = "M8 21h8" /> < path d = "M12 17v4" /> < path d = "m2 2 20 20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MONITOR_OFF",
            html: lucide_monitor_off,
        }
    };
    const LUCIDE_MONITOR_SPEAKER: Self = {
        #[inline(never)]
        fn lucide_monitor_speaker(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5.5 20H8" /> < path d = "M17 9h.01" /> < rect x = "12" y = "4" width = "10" height = "16" rx = "2" /> < path d = "M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4" /> < circle cx = "17" cy = "15" r = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MONITOR_SPEAKER",
            html: lucide_monitor_speaker,
        }
    };
    const LUCIDE_MONITOR: Self = {
        #[inline(never)]
        fn lucide_monitor(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "3" width = "20" height = "14" rx = "2" ry = "2" /> < line x1 = "8" y1 = "21" x2 = "16" y2 = "21" /> < line x1 = "12" y1 = "17" x2 = "12" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MONITOR",
            html: lucide_monitor,
        }
    };
    const LUCIDE_MOON: Self = {
        #[inline(never)]
        fn lucide_moon(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 3a6.364 6.364 0 0 0 9 9 9 9 0 1 1-9-9Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOON",
            html: lucide_moon,
        }
    };
    const LUCIDE_MORE_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_more_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "1" /> < circle cx = "19" cy = "12" r = "1" /> < circle cx = "5" cy = "12" r = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MORE_HORIZONTAL",
            html: lucide_more_horizontal,
        }
    };
    const LUCIDE_MORE_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_more_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "1" /> < circle cx = "12" cy = "5" r = "1" /> < circle cx = "12" cy = "19" r = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MORE_VERTICAL",
            html: lucide_more_vertical,
        }
    };
    const LUCIDE_MOUNTAIN_SNOW: Self = {
        #[inline(never)]
        fn lucide_mountain_snow(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m8 3 4 8 5-5 5 15H2L8 3z" /> < path d = "M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOUNTAIN_SNOW",
            html: lucide_mountain_snow,
        }
    };
    const LUCIDE_MOUNTAIN: Self = {
        #[inline(never)]
        fn lucide_mountain(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m8 3 4 8 5-5 5 15H2L8 3z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOUNTAIN",
            html: lucide_mountain,
        }
    };
    const LUCIDE_MOUSE_POINTER_2: Self = {
        #[inline(never)]
        fn lucide_mouse_pointer_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m4 4 7.07 17 2.51-7.39L21 11.07z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOUSE_POINTER_2",
            html: lucide_mouse_pointer_2,
        }
    };
    const LUCIDE_MOUSE_POINTER_CLICK: Self = {
        #[inline(never)]
        fn lucide_mouse_pointer_click(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m9 9 5 12 1.774-5.226L21 14 9 9z" /> < path d = "m16.071 16.071 4.243 4.243" /> < path d = "m7.188 2.239.777 2.897M5.136 7.965l-2.898-.777M13.95 4.05l-2.122 2.122m-5.657 5.656-2.12 2.122" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOUSE_POINTER_CLICK",
            html: lucide_mouse_pointer_click,
        }
    };
    const LUCIDE_MOUSE_POINTER: Self = {
        #[inline(never)]
        fn lucide_mouse_pointer(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m3 3 7.07 16.97 2.51-7.39 7.39-2.51L3 3z" /> < path d = "m13 13 6 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOUSE_POINTER",
            html: lucide_mouse_pointer,
        }
    };
    const LUCIDE_MOUSE: Self = {
        #[inline(never)]
        fn lucide_mouse(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "6" y = "3" width = "12" height = "18" rx = "6" /> < path d = "M12 7v4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOUSE",
            html: lucide_mouse,
        }
    };
    const LUCIDE_MOVE_3_D: Self = {
        #[inline(never)]
        fn lucide_move_3_d(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 3v16h16" /> < path d = "m5 19 6-6" /> < path d = "m2 6 3-3 3 3" /> < path d = "m18 16 3 3-3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOVE_3_D",
            html: lucide_move_3_d,
        }
    };
    const LUCIDE_MOVE_DIAGONAL_2: Self = {
        #[inline(never)]
        fn lucide_move_diagonal_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "5 11 5 5 11 5" /> < polyline points = "19 13 19 19 13 19" /> < line x1 = "5" y1 = "5" x2 = "19" y2 = "19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOVE_DIAGONAL_2",
            html: lucide_move_diagonal_2,
        }
    };
    const LUCIDE_MOVE_DIAGONAL: Self = {
        #[inline(never)]
        fn lucide_move_diagonal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "13 5 19 5 19 11" /> < polyline points = "11 19 5 19 5 13" /> < line x1 = "19" y1 = "5" x2 = "5" y2 = "19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOVE_DIAGONAL",
            html: lucide_move_diagonal,
        }
    };
    const LUCIDE_MOVE_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_move_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "18 8 22 12 18 16" /> < polyline points = "6 8 2 12 6 16" /> < line x1 = "2" y1 = "12" x2 = "22" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOVE_HORIZONTAL",
            html: lucide_move_horizontal,
        }
    };
    const LUCIDE_MOVE_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_move_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "8 18 12 22 16 18" /> < polyline points = "8 6 12 2 16 6" /> < line x1 = "12" y1 = "2" x2 = "12" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOVE_VERTICAL",
            html: lucide_move_vertical,
        }
    };
    const LUCIDE_MOVE: Self = {
        #[inline(never)]
        fn lucide_move(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "5 9 2 12 5 15" /> < polyline points = "9 5 12 2 15 5" /> < polyline points = "15 19 12 22 9 19" /> < polyline points = "19 9 22 12 19 15" /> < line x1 = "2" y1 = "12" x2 = "22" y2 = "12" /> < line x1 = "12" y1 = "2" x2 = "12" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MOVE",
            html: lucide_move,
        }
    };
    const LUCIDE_MUSIC_2: Self = {
        #[inline(never)]
        fn lucide_music_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "8" cy = "18" r = "4" /> < path d = "M12 18V2l7 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MUSIC_2",
            html: lucide_music_2,
        }
    };
    const LUCIDE_MUSIC_3: Self = {
        #[inline(never)]
        fn lucide_music_3(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "18" r = "4" /> < path d = "M16 18V2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MUSIC_3",
            html: lucide_music_3,
        }
    };
    const LUCIDE_MUSIC_4: Self = {
        #[inline(never)]
        fn lucide_music_4(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 18V5l12-2v13" /> < path d = "m9 9 12-2" /> < circle cx = "6" cy = "18" r = "3" /> < circle cx = "18" cy = "16" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MUSIC_4",
            html: lucide_music_4,
        }
    };
    const LUCIDE_MUSIC: Self = {
        #[inline(never)]
        fn lucide_music(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 18V5l12-2v13" /> < circle cx = "6" cy = "18" r = "3" /> < circle cx = "18" cy = "16" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_MUSIC",
            html: lucide_music,
        }
    };
    const LUCIDE_NAVIGATION_2_OFF: Self = {
        #[inline(never)]
        fn lucide_navigation_2_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9.31 9.31 5 21l7-4 7 4-1.17-3.17" /> < path d = "M14.53 8.88 12 2l-1.17 3.17" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_NAVIGATION_2_OFF",
            html: lucide_navigation_2_off,
        }
    };
    const LUCIDE_NAVIGATION_2: Self = {
        #[inline(never)]
        fn lucide_navigation_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "12 2 19 21 12 17 5 21 12 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_NAVIGATION_2",
            html: lucide_navigation_2,
        }
    };
    const LUCIDE_NAVIGATION_OFF: Self = {
        #[inline(never)]
        fn lucide_navigation_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8.43 8.43 3 11l8 2 2 8 2.57-5.43" /> < path d = "M17.39 11.73 22 2l-9.73 4.61" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_NAVIGATION_OFF",
            html: lucide_navigation_off,
        }
    };
    const LUCIDE_NAVIGATION: Self = {
        #[inline(never)]
        fn lucide_navigation(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "3 11 22 2 13 21 11 13 3 11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_NAVIGATION",
            html: lucide_navigation,
        }
    };
    const LUCIDE_NETWORK: Self = {
        #[inline(never)]
        fn lucide_network(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "9" y = "2" width = "6" height = "6" /> < rect x = "16" y = "16" width = "6" height = "6" /> < rect x = "2" y = "16" width = "6" height = "6" /> < path d = "M5 16v-4h14v4" /> < path d = "M12 12V8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_NETWORK",
            html: lucide_network,
        }
    };
    const LUCIDE_NEWSPAPER: Self = {
        #[inline(never)]
        fn lucide_newspaper(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-2 2Zm0 0a2 2 0 0 1-2-2v-9c0-1.1.9-2 2-2h2" /> < path d = "M18 14h-8" /> < path d = "M15 18h-5" /> < path d = "M10 6h8v4h-8V6Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_NEWSPAPER",
            html: lucide_newspaper,
        }
    };
    const LUCIDE_OCTAGON: Self = {
        #[inline(never)]
        fn lucide_octagon(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_OCTAGON",
            html: lucide_octagon,
        }
    };
    const LUCIDE_OPTION: Self = {
        #[inline(never)]
        fn lucide_option(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 3h6l6 18h6" /> < path d = "M14 3h7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_OPTION",
            html: lucide_option,
        }
    };
    const LUCIDE_OUTDENT: Self = {
        #[inline(never)]
        fn lucide_outdent(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "7 8 3 12 7 16" /> < line x1 = "21" y1 = "12" x2 = "11" y2 = "12" /> < line x1 = "21" y1 = "6" x2 = "11" y2 = "6" /> < line x1 = "21" y1 = "18" x2 = "11" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_OUTDENT",
            html: lucide_outdent,
        }
    };
    const LUCIDE_PACKAGE_2: Self = {
        #[inline(never)]
        fn lucide_package_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 9h18v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9Z" /> < path d = "m3 9 2.45-4.9A2 2 0 0 1 7.24 3h9.52a2 2 0 0 1 1.8 1.1L21 9" /> < path d = "M12 3v6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PACKAGE_2",
            html: lucide_package_2,
        }
    };
    const LUCIDE_PACKAGE_CHECK: Self = {
        #[inline(never)]
        fn lucide_package_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m16 16 2 2 4-4" /> < path d = "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> < path d = "M16.5 9.4 7.55 4.24" /> < polyline points = "3.29 7 12 12 20.71 7" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PACKAGE_CHECK",
            html: lucide_package_check,
        }
    };
    const LUCIDE_PACKAGE_MINUS: Self = {
        #[inline(never)]
        fn lucide_package_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 16h6" /> < path d = "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> < path d = "M16.5 9.4 7.55 4.24" /> < polyline points = "3.29 7 12 12 20.71 7" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PACKAGE_MINUS",
            html: lucide_package_minus,
        }
    };
    const LUCIDE_PACKAGE_OPEN: Self = {
        #[inline(never)]
        fn lucide_package_open(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20.91 8.84 8.56 2.23a1.93 1.93 0 0 0-1.81 0L3.1 4.13a2.12 2.12 0 0 0-.05 3.69l12.22 6.93a2 2 0 0 0 1.94 0L21 12.51a2.12 2.12 0 0 0-.09-3.67Z" /> < path d = "m3.09 8.84 12.35-6.61a1.93 1.93 0 0 1 1.81 0l3.65 1.9a2.12 2.12 0 0 1 .1 3.69L8.73 14.75a2 2 0 0 1-1.94 0L3 12.51a2.12 2.12 0 0 1 .09-3.67Z" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "13" /> < path d = "M20 13.5v3.37a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PACKAGE_OPEN",
            html: lucide_package_open,
        }
    };
    const LUCIDE_PACKAGE_PLUS: Self = {
        #[inline(never)]
        fn lucide_package_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 16h6" /> < path d = "M19 13v6" /> < path d = "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> < path d = "M16.5 9.4 7.55 4.24" /> < polyline points = "3.29 7 12 12 20.71 7" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PACKAGE_PLUS",
            html: lucide_package_plus,
        }
    };
    const LUCIDE_PACKAGE_SEARCH: Self = {
        #[inline(never)]
        fn lucide_package_search(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> < path d = "M16.5 9.4 7.55 4.24" /> < polyline points = "3.29 7 12 12 20.71 7" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "12" /> < circle cx = "18.5" cy = "15.5" r = "2.5" /> < path d = "M20.27 17.27 22 19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PACKAGE_SEARCH",
            html: lucide_package_search,
        }
    };
    const LUCIDE_PACKAGE_X: Self = {
        #[inline(never)]
        fn lucide_package_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" /> < path d = "M16.5 9.4 7.55 4.24" /> < polyline points = "3.29 7 12 12 20.71 7" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "12" /> < path d = "m17 13 5 5m-5 0 5-5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PACKAGE_X",
            html: lucide_package_x,
        }
    };
    const LUCIDE_PACKAGE: Self = {
        #[inline(never)]
        fn lucide_package(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "16.5" y1 = "9.4" x2 = "7.5" y2 = "4.21" /> < path d = "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z" /> < polyline points = "3.29 7 12 12 20.71 7" /> < line x1 = "12" y1 = "22" x2 = "12" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PACKAGE",
            html: lucide_package,
        }
    };
    const LUCIDE_PAINT_BUCKET: Self = {
        #[inline(never)]
        fn lucide_paint_bucket(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z" /> < path d = "m5 2 5 5" /> < path d = "M2 13h15" /> < path d = "M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PAINT_BUCKET",
            html: lucide_paint_bucket,
        }
    };
    const LUCIDE_PAINTBRUSH_2: Self = {
        #[inline(never)]
        fn lucide_paintbrush_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14 19.9V16h3a2 2 0 0 0 2-2v-2H5v2c0 1.1.9 2 2 2h3v3.9a2 2 0 1 0 4 0Z" /> < path d = "M6 12V2h12v10" /> < path d = "M14 2v4" /> < path d = "M10 2v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PAINTBRUSH_2",
            html: lucide_paintbrush_2,
        }
    };
    const LUCIDE_PAINTBRUSH: Self = {
        #[inline(never)]
        fn lucide_paintbrush(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18.37 2.63 14 7l-1.59-1.59a2 2 0 0 0-2.82 0L8 7l9 9 1.59-1.59a2 2 0 0 0 0-2.82L17 10l4.37-4.37a2.12 2.12 0 1 0-3-3Z" /> < path d = "M9 8c-2 3-4 3.5-7 4l8 10c2-1 6-5 6-7" /> < path d = "M14.5 17.5 4.5 15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PAINTBRUSH",
            html: lucide_paintbrush,
        }
    };
    const LUCIDE_PALETTE: Self = {
        #[inline(never)]
        fn lucide_palette(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "13.5" cy = "6.5" r = ".5" /> < circle cx = "17.5" cy = "10.5" r = ".5" /> < circle cx = "8.5" cy = "7.5" r = ".5" /> < circle cx = "6.5" cy = "12.5" r = ".5" /> < path d = "M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10c.926 0 1.648-.746 1.648-1.688 0-.437-.18-.835-.437-1.125-.29-.289-.438-.652-.438-1.125a1.64 1.64 0 0 1 1.668-1.668h1.996c3.051 0 5.555-2.503 5.555-5.554C21.965 6.012 17.461 2 12 2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PALETTE",
            html: lucide_palette,
        }
    };
    const LUCIDE_PALMTREE: Self = {
        #[inline(never)]
        fn lucide_palmtree(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4" /> < path d = "M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3" /> < path d = "M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35z" /> < path d = "M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PALMTREE",
            html: lucide_palmtree,
        }
    };
    const LUCIDE_PAPERCLIP: Self = {
        #[inline(never)]
        fn lucide_paperclip(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.57a2 2 0 0 1-2.83-2.83l8.49-8.48" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PAPERCLIP",
            html: lucide_paperclip,
        }
    };
    const LUCIDE_PARTY_POPPER: Self = {
        #[inline(never)]
        fn lucide_party_popper(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5.8 11.3 2 22l10.7-3.79" /> < path d = "M4 3h.01" /> < path d = "M22 8h.01" /> < path d = "M15 2h.01" /> < path d = "M22 20h.01" /> < path d = "m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12v0c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10" /> < path d = "m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11v0c-.11.7-.72 1.22-1.43 1.22H17" /> < path d = "m11 2 .33.82c.34.86-.2 1.82-1.11 1.98v0C9.52 4.9 9 5.52 9 6.23V7" /> < path d = "M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PARTY_POPPER",
            html: lucide_party_popper,
        }
    };
    const LUCIDE_PAUSE_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_pause_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "10" y1 = "15" x2 = "10" y2 = "9" /> < line x1 = "14" y1 = "15" x2 = "14" y2 = "9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PAUSE_CIRCLE",
            html: lucide_pause_circle,
        }
    };
    const LUCIDE_PAUSE_OCTAGON: Self = {
        #[inline(never)]
        fn lucide_pause_octagon(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 15V9" /> < path d = "M14 15V9" /> < path d = "M7.714 2h8.572L22 7.714v8.572L16.286 22H7.714L2 16.286V7.714L7.714 2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PAUSE_OCTAGON",
            html: lucide_pause_octagon,
        }
    };
    const LUCIDE_PAUSE: Self = {
        #[inline(never)]
        fn lucide_pause(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "6" y = "4" width = "4" height = "16" /> < rect x = "14" y = "4" width = "4" height = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PAUSE",
            html: lucide_pause,
        }
    };
    const LUCIDE_PEN_TOOL: Self = {
        #[inline(never)]
        fn lucide_pen_tool(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m12 19 7-7 3 3-7 7-3-3z" /> < path d = "m18 13-1.5-7.5L2 2l3.5 14.5L13 18l5-5z" /> < path d = "m2 2 7.586 7.586" /> < circle cx = "11" cy = "11" r = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PEN_TOOL",
            html: lucide_pen_tool,
        }
    };
    const LUCIDE_PENCIL: Self = {
        #[inline(never)]
        fn lucide_pencil(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "18" y1 = "2" x2 = "22" y2 = "6" /> < path d = "M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PENCIL",
            html: lucide_pencil,
        }
    };
    const LUCIDE_PERCENT: Self = {
        #[inline(never)]
        fn lucide_percent(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "19" y1 = "5" x2 = "5" y2 = "19" /> < circle cx = "6.5" cy = "6.5" r = "2.5" /> < circle cx = "17.5" cy = "17.5" r = "2.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PERCENT",
            html: lucide_percent,
        }
    };
    const LUCIDE_PERSON_STANDING: Self = {
        #[inline(never)]
        fn lucide_person_standing(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "5" r = "1" /> < path d = "m9 20 3-6 3 6" /> < path d = "m6 8 6 2 6-2" /> < path d = "M12 10v4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PERSON_STANDING",
            html: lucide_person_standing,
        }
    };
    const LUCIDE_PHONE_CALL: Self = {
        #[inline(never)]
        fn lucide_phone_call(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" /> < path d = "M14.05 2a9 9 0 0 1 8 7.94" /> < path d = "M14.05 6A5 5 0 0 1 18 10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PHONE_CALL",
            html: lucide_phone_call,
        }
    };
    const LUCIDE_PHONE_FORWARDED: Self = {
        #[inline(never)]
        fn lucide_phone_forwarded(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "18 2 22 6 18 10" /> < line x1 = "14" y1 = "6" x2 = "22" y2 = "6" /> < path d = "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PHONE_FORWARDED",
            html: lucide_phone_forwarded,
        }
    };
    const LUCIDE_PHONE_INCOMING: Self = {
        #[inline(never)]
        fn lucide_phone_incoming(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "16 2 16 8 22 8" /> < line x1 = "22" y1 = "2" x2 = "16" y2 = "8" /> < path d = "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PHONE_INCOMING",
            html: lucide_phone_incoming,
        }
    };
    const LUCIDE_PHONE_MISSED: Self = {
        #[inline(never)]
        fn lucide_phone_missed(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "22" y1 = "2" x2 = "16" y2 = "8" /> < line x1 = "16" y1 = "2" x2 = "22" y2 = "8" /> < path d = "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PHONE_MISSED",
            html: lucide_phone_missed,
        }
    };
    const LUCIDE_PHONE_OFF: Self = {
        #[inline(never)]
        fn lucide_phone_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91" /> < line x1 = "22" y1 = "2" x2 = "2" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PHONE_OFF",
            html: lucide_phone_off,
        }
    };
    const LUCIDE_PHONE_OUTGOING: Self = {
        #[inline(never)]
        fn lucide_phone_outgoing(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "22 8 22 2 16 2" /> < line x1 = "16" y1 = "8" x2 = "22" y2 = "2" /> < path d = "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PHONE_OUTGOING",
            html: lucide_phone_outgoing,
        }
    };
    const LUCIDE_PHONE: Self = {
        #[inline(never)]
        fn lucide_phone(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PHONE",
            html: lucide_phone,
        }
    };
    const LUCIDE_PIE_CHART: Self = {
        #[inline(never)]
        fn lucide_pie_chart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21.21 15.89A10 10 0 1 1 8 2.83" /> < path d = "M22 12A10 10 0 0 0 12 2v10z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PIE_CHART",
            html: lucide_pie_chart,
        }
    };
    const LUCIDE_PIGGY_BANK: Self = {
        #[inline(never)]
        fn lucide_piggy_bank(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M19 5c-1.5 0-2.8 1.4-3 2-3.5-1.5-11-.3-11 5 0 1.8 0 3 2 4.5V20h4v-2h3v2h4v-4c1-.5 1.7-1 2-2h2v-4h-2c0-1-.5-1.5-1-2h0V5z" /> < path d = "M2 9v1c0 1.1.9 2 2 2h1" /> < path d = "M16 11h0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PIGGY_BANK",
            html: lucide_piggy_bank,
        }
    };
    const LUCIDE_PIN_OFF: Self = {
        #[inline(never)]
        fn lucide_pin_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> < line x1 = "12" y1 = "17" x2 = "12" y2 = "22" /> < path d = "M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V17h12" /> < path d = "M15 9.34V6h1a2 2 0 0 0 0-4H7.89" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PIN_OFF",
            html: lucide_pin_off,
        }
    };
    const LUCIDE_PIN: Self = {
        #[inline(never)]
        fn lucide_pin(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "12" y1 = "17" x2 = "12" y2 = "22" /> < path d = "M5 17h14v-1.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V6h1a2 2 0 0 0 0-4H8a2 2 0 0 0 0 4h1v4.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PIN",
            html: lucide_pin,
        }
    };
    const LUCIDE_PIPETTE: Self = {
        #[inline(never)]
        fn lucide_pipette(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m2 22 1-1h3l9-9" /> < path d = "M3 21v-3l9-9" /> < path d = "m15 6 3.4-3.4a2.1 2.1 0 1 1 3 3L18 9l.4.4a2.1 2.1 0 1 1-3 3l-3.8-3.8a2.1 2.1 0 1 1 3-3l.4.4Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PIPETTE",
            html: lucide_pipette,
        }
    };
    const LUCIDE_PIZZA: Self = {
        #[inline(never)]
        fn lucide_pizza(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15 11h.01" /> < path d = "M11 15h.01" /> < path d = "M16 16h.01" /> < path d = "m2 16 20 6-6-20c-3.36.9-6.42 2.67-8.88 5.12A19.876 19.876 0 0 0 2 16Z" /> < path d = "M17 6c-6.29 1.47-9.43 5.13-11 11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PIZZA",
            html: lucide_pizza,
        }
    };
    const LUCIDE_PLANE: Self = {
        #[inline(never)]
        fn lucide_plane(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PLANE",
            html: lucide_plane,
        }
    };
    const LUCIDE_PLAY_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_play_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < polygon points = "10 8 16 12 10 16 10 8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PLAY_CIRCLE",
            html: lucide_play_circle,
        }
    };
    const LUCIDE_PLAY: Self = {
        #[inline(never)]
        fn lucide_play(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "5 3 19 12 5 21 5 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PLAY",
            html: lucide_play,
        }
    };
    const LUCIDE_PLUG_2: Self = {
        #[inline(never)]
        fn lucide_plug_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 2v6" /> < path d = "M15 2v6" /> < path d = "M12 17v5" /> < path d = "M5 8h14" /> < path d = "M6 11V8h12v3a6 6 0 1 1-12 0v0Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PLUG_2",
            html: lucide_plug_2,
        }
    };
    const LUCIDE_PLUG_ZAP: Self = {
        #[inline(never)]
        fn lucide_plug_zap(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m13 2-2 2.5h3L12 7" /> < path d = "M12 22v-3" /> < path d = "M10 13v-2.5" /> < path d = "M10 12.5v-2" /> < path d = "M14 12.5v-2" /> < path d = "M16 15a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PLUG_ZAP",
            html: lucide_plug_zap,
        }
    };
    const LUCIDE_PLUG: Self = {
        #[inline(never)]
        fn lucide_plug(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 22v-5" /> < path d = "M9 7V2" /> < path d = "M15 7V2" /> < path d = "M6 13V8h12v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PLUG",
            html: lucide_plug,
        }
    };
    const LUCIDE_PLUS_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_plus_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "12" y1 = "8" x2 = "12" y2 = "16" /> < line x1 = "8" y1 = "12" x2 = "16" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PLUS_CIRCLE",
            html: lucide_plus_circle,
        }
    };
    const LUCIDE_PLUS_SQUARE: Self = {
        #[inline(never)]
        fn lucide_plus_square(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "12" y1 = "8" x2 = "12" y2 = "16" /> < line x1 = "8" y1 = "12" x2 = "16" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PLUS_SQUARE",
            html: lucide_plus_square,
        }
    };
    const LUCIDE_PLUS: Self = {
        #[inline(never)]
        fn lucide_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "12" y1 = "5" x2 = "12" y2 = "19" /> < line x1 = "5" y1 = "12" x2 = "19" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PLUS",
            html: lucide_plus,
        }
    };
    const LUCIDE_POCKET: Self = {
        #[inline(never)]
        fn lucide_pocket(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z" /> < polyline points = "8 10 12 14 16 10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_POCKET",
            html: lucide_pocket,
        }
    };
    const LUCIDE_PODCAST: Self = {
        #[inline(never)]
        fn lucide_podcast(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "11" r = "1" /> < path d = "M11 17a1 1 0 0 1 2 0c0 .5-.34 3-.5 4.5a.5.5 0 0 1-1 0c-.16-1.5-.5-4-.5-4.5Z" /> < path d = "M8 14a5 5 0 1 1 8 0" /> < path d = "M17 18.5a9 9 0 1 0-10 0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PODCAST",
            html: lucide_podcast,
        }
    };
    const LUCIDE_POINTER: Self = {
        #[inline(never)]
        fn lucide_pointer(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 14a8 8 0 0 1-8 8" /> < path d = "M18 11v-1a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0" /> < path d = "M14 10V9a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v1" /> < path d = "M10 9.5V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v10" /> < path d = "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_POINTER",
            html: lucide_pointer,
        }
    };
    const LUCIDE_POUND_STERLING: Self = {
        #[inline(never)]
        fn lucide_pound_sterling(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 7c0-5.333-8-5.333-8 0" /> < path d = "M10 7v14" /> < path d = "M6 21h12" /> < path d = "M6 13h10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_POUND_STERLING",
            html: lucide_pound_sterling,
        }
    };
    const LUCIDE_POWER_OFF: Self = {
        #[inline(never)]
        fn lucide_power_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18.36 6.64A9 9 0 0 1 20.77 15" /> < path d = "M6.16 6.16a9 9 0 1 0 12.68 12.68" /> < path d = "M12 2v4" /> < path d = "m2 2 20 20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_POWER_OFF",
            html: lucide_power_off,
        }
    };
    const LUCIDE_POWER: Self = {
        #[inline(never)]
        fn lucide_power(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18.36 6.64a9 9 0 1 1-12.73 0" /> < line x1 = "12" y1 = "2" x2 = "12" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_POWER",
            html: lucide_power,
        }
    };
    const LUCIDE_PRINTER: Self = {
        #[inline(never)]
        fn lucide_printer(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "6 9 6 2 18 2 18 9" /> < path d = "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2" /> < rect x = "6" y = "14" width = "12" height = "8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PRINTER",
            html: lucide_printer,
        }
    };
    const LUCIDE_PUZZLE: Self = {
        #[inline(never)]
        fn lucide_puzzle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M19.439 7.85c-.049.322.059.648.289.878l1.568 1.568c.47.47.706 1.087.706 1.704s-.235 1.233-.706 1.704l-1.611 1.611a.98.98 0 0 1-.837.276c-.47-.07-.802-.48-.968-.925a2.501 2.501 0 1 0-3.214 3.214c.446.166.855.497.925.968a.979.979 0 0 1-.276.837l-1.61 1.61a2.404 2.404 0 0 1-1.705.707 2.402 2.402 0 0 1-1.704-.706l-1.568-1.568a1.026 1.026 0 0 0-.877-.29c-.493.074-.84.504-1.02.968a2.5 2.5 0 1 1-3.237-3.237c.464-.18.894-.527.967-1.02a1.026 1.026 0 0 0-.289-.877l-1.568-1.568A2.402 2.402 0 0 1 1.998 12c0-.617.236-1.234.706-1.704L4.23 8.77c.24-.24.581-.353.917-.303.515.077.877.528 1.073 1.01a2.5 2.5 0 1 0 3.259-3.259c-.482-.196-.933-.558-1.01-1.073-.05-.336.062-.676.303-.917l1.525-1.525A2.402 2.402 0 0 1 12 1.998c.617 0 1.234.236 1.704.706l1.568 1.568c.23.23.556.338.877.29.493-.074.84-.504 1.02-.968a2.5 2.5 0 1 1 3.237 3.237c-.464.18-.894.527-.967 1.02Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_PUZZLE",
            html: lucide_puzzle,
        }
    };
    const LUCIDE_QR_CODE: Self = {
        #[inline(never)]
        fn lucide_qr_code(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "5" height = "5" rx = "1" /> < rect x = "16" y = "3" width = "5" height = "5" rx = "1" /> < rect x = "3" y = "16" width = "5" height = "5" rx = "1" /> < path d = "M21 16h-3a2 2 0 0 0-2 2v3" /> < path d = "M21 21v.01" /> < path d = "M12 7v3a2 2 0 0 1-2 2H7" /> < path d = "M3 12h.01" /> < path d = "M12 3h.01" /> < path d = "M12 16v.01" /> < path d = "M16 12h1" /> < path d = "M21 12v.01" /> < path d = "M12 21v-1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_QR_CODE",
            html: lucide_qr_code,
        }
    };
    const LUCIDE_QUOTE: Self = {
        #[inline(never)]
        fn lucide_quote(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z" /> < path d = "M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_QUOTE",
            html: lucide_quote,
        }
    };
    const LUCIDE_RADIO_RECEIVER: Self = {
        #[inline(never)]
        fn lucide_radio_receiver(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 16v2" /> < path d = "M19 16v2" /> < rect x = "2" y = "8" width = "20" height = "8" rx = "2" /> < path d = "M18 12h0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_RADIO_RECEIVER",
            html: lucide_radio_receiver,
        }
    };
    const LUCIDE_RADIO: Self = {
        #[inline(never)]
        fn lucide_radio(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "2" /> < path d = "M4.93 19.07a10 10 0 0 1 0-14.14" /> < path d = "M7.76 16.24a6 6 0 0 1-1.3-1.95 6 6 0 0 1 0-4.59 6 6 0 0 1 1.3-1.95" /> < path d = "M16.24 7.76a6 6 0 0 1 1.3 2 6 6 0 0 1 0 4.59 6 6 0 0 1-1.3 1.95" /> < path d = "M19.07 4.93a10 10 0 0 1 0 14.14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_RADIO",
            html: lucide_radio,
        }
    };
    const LUCIDE_RECTANGLE_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_rectangle_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "6" width = "20" height = "12" rx = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_RECTANGLE_HORIZONTAL",
            html: lucide_rectangle_horizontal,
        }
    };
    const LUCIDE_RECTANGLE_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_rectangle_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "6" y = "2" width = "12" height = "20" rx = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_RECTANGLE_VERTICAL",
            html: lucide_rectangle_vertical,
        }
    };
    const LUCIDE_RECYCLE: Self = {
        #[inline(never)]
        fn lucide_recycle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5" /> < path d = "M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12" /> < path d = "m14 16-3 3 3 3" /> < path d = "M8.293 13.596 7.196 9.5 3.1 10.598" /> < path d = "m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843" /> < path d = "m13.378 9.633 4.096 1.098 1.097-4.096" /> </ svg > }
        }
        Self {
            name: "LUCIDE_RECYCLE",
            html: lucide_recycle,
        }
    };
    const LUCIDE_REDO_2: Self = {
        #[inline(never)]
        fn lucide_redo_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m15 14 5-5-5-5" /> < path d = "M20 9H9.5A5.5 5.5 0 0 0 4 14.5v0A5.5 5.5 0 0 0 9.5 20H13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REDO_2",
            html: lucide_redo_2,
        }
    };
    const LUCIDE_REDO: Self = {
        #[inline(never)]
        fn lucide_redo(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 7v6h-6" /> < path d = "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REDO",
            html: lucide_redo,
        }
    };
    const LUCIDE_REFRESH_CCW: Self = {
        #[inline(never)]
        fn lucide_refresh_ccw(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 2v6h6" /> < path d = "M21 12A9 9 0 0 0 6 5.3L3 8" /> < path d = "M21 22v-6h-6" /> < path d = "M3 12a9 9 0 0 0 15 6.7l3-2.7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REFRESH_CCW",
            html: lucide_refresh_ccw,
        }
    };
    const LUCIDE_REFRESH_CW: Self = {
        #[inline(never)]
        fn lucide_refresh_cw(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 2v6h-6" /> < path d = "M3 12a9 9 0 0 1 15-6.7L21 8" /> < path d = "M3 22v-6h6" /> < path d = "M21 12a9 9 0 0 1-15 6.7L3 16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REFRESH_CW",
            html: lucide_refresh_cw,
        }
    };
    const LUCIDE_REFRIGERATOR: Self = {
        #[inline(never)]
        fn lucide_refrigerator(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z" /> < path d = "M5 10h14" /> < path d = "M15 7v6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REFRIGERATOR",
            html: lucide_refrigerator,
        }
    };
    const LUCIDE_REGEX: Self = {
        #[inline(never)]
        fn lucide_regex(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17 3v10" /> < path d = "m12.67 5.5 8.66 5" /> < path d = "m12.67 10.5 8.66-5" /> < path d = "M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REGEX",
            html: lucide_regex,
        }
    };
    const LUCIDE_REPEAT_1: Self = {
        #[inline(never)]
        fn lucide_repeat_1(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m17 2 4 4-4 4" /> < path d = "M3 11v-1a4 4 0 0 1 4-4h14" /> < path d = "m7 22-4-4 4-4" /> < path d = "M21 13v1a4 4 0 0 1-4 4H3" /> < path d = "M11 10h1v4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REPEAT_1",
            html: lucide_repeat_1,
        }
    };
    const LUCIDE_REPEAT: Self = {
        #[inline(never)]
        fn lucide_repeat(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m17 2 4 4-4 4" /> < path d = "M3 11v-1a4 4 0 0 1 4-4h14" /> < path d = "m7 22-4-4 4-4" /> < path d = "M21 13v1a4 4 0 0 1-4 4H3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REPEAT",
            html: lucide_repeat,
        }
    };
    const LUCIDE_REPLY_ALL: Self = {
        #[inline(never)]
        fn lucide_reply_all(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "7 17 2 12 7 7" /> < polyline points = "12 17 7 12 12 7" /> < path d = "M22 18v-2a4 4 0 0 0-4-4H7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REPLY_ALL",
            html: lucide_reply_all,
        }
    };
    const LUCIDE_REPLY: Self = {
        #[inline(never)]
        fn lucide_reply(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "9 17 4 12 9 7" /> < path d = "M20 18v-2a4 4 0 0 0-4-4H4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REPLY",
            html: lucide_reply,
        }
    };
    const LUCIDE_REWIND: Self = {
        #[inline(never)]
        fn lucide_rewind(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "11 19 2 12 11 5 11 19" /> < polygon points = "22 19 13 12 22 5 22 19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_REWIND",
            html: lucide_rewind,
        }
    };
    const LUCIDE_ROCKET: Self = {
        #[inline(never)]
        fn lucide_rocket(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z" /> < path d = "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z" /> < path d = "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0" /> < path d = "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ROCKET",
            html: lucide_rocket,
        }
    };
    const LUCIDE_ROCKING_CHAIR: Self = {
        #[inline(never)]
        fn lucide_rocking_chair(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "3.5 2 6.5 12.5 18 12.5" /> < line x1 = "9.5" y1 = "12.5" x2 = "5.5" y2 = "20" /> < line x1 = "15" y1 = "12.5" x2 = "18.5" y2 = "20" /> < path d = "M2.75 18a13 13 0 0 0 18.5 0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ROCKING_CHAIR",
            html: lucide_rocking_chair,
        }
    };
    const LUCIDE_ROTATE_3_D: Self = {
        #[inline(never)]
        fn lucide_rotate_3_d(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2" /> < path d = "m15.194 13.707 3.814 1.86-1.86 3.814" /> < path d = "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ROTATE_3_D",
            html: lucide_rotate_3_d,
        }
    };
    const LUCIDE_ROTATE_CCW: Self = {
        #[inline(never)]
        fn lucide_rotate_ccw(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 2v6h6" /> < path d = "M3 13a9 9 0 1 0 3-7.7L3 8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ROTATE_CCW",
            html: lucide_rotate_ccw,
        }
    };
    const LUCIDE_ROTATE_CW: Self = {
        #[inline(never)]
        fn lucide_rotate_cw(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 2v6h-6" /> < path d = "M21 13a9 9 0 1 1-3-7.7L21 8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ROTATE_CW",
            html: lucide_rotate_cw,
        }
    };
    const LUCIDE_RSS: Self = {
        #[inline(never)]
        fn lucide_rss(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 11a9 9 0 0 1 9 9" /> < path d = "M4 4a16 16 0 0 1 16 16" /> < circle cx = "5" cy = "19" r = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_RSS",
            html: lucide_rss,
        }
    };
    const LUCIDE_RULER: Self = {
        #[inline(never)]
        fn lucide_ruler(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21.3 8.7 8.7 21.3c-1 1-2.5 1-3.4 0l-2.6-2.6c-1-1-1-2.5 0-3.4L15.3 2.7c1-1 2.5-1 3.4 0l2.6 2.6c1 1 1 2.5 0 3.4Z" /> < path d = "m7.5 10.5 2 2" /> < path d = "m10.5 7.5 2 2" /> < path d = "m13.5 4.5 2 2" /> < path d = "m4.5 13.5 2 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_RULER",
            html: lucide_ruler,
        }
    };
    const LUCIDE_RUSSIAN_RUBLE: Self = {
        #[inline(never)]
        fn lucide_russian_ruble(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14 11c5.333 0 5.333-8 0-8" /> < path d = "M6 11h8" /> < path d = "M6 15h8" /> < path d = "M9 21V3" /> < path d = "M9 3h5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_RUSSIAN_RUBLE",
            html: lucide_russian_ruble,
        }
    };
    const LUCIDE_SAILBOAT: Self = {
        #[inline(never)]
        fn lucide_sailboat(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 18H2a4 4 0 0 0 4 4h12a4 4 0 0 0 4-4Z" /> < path d = "M21 14 10 2 3 14h18Z" /> < path d = "M10 2v16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SAILBOAT",
            html: lucide_sailboat,
        }
    };
    const LUCIDE_SAVE: Self = {
        #[inline(never)]
        fn lucide_save(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z" /> < polyline points = "17 21 17 13 7 13 7 21" /> < polyline points = "7 3 7 8 15 8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SAVE",
            html: lucide_save,
        }
    };
    const LUCIDE_SCALE_3_D: Self = {
        #[inline(never)]
        fn lucide_scale_3_d(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 7v12h12" /> < path d = "m5 19 6-6" /> < rect x = "3" y = "3" width = "4" height = "4" rx = "1" /> < rect x = "17" y = "17" width = "4" height = "4" rx = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCALE_3_D",
            html: lucide_scale_3_d,
        }
    };
    const LUCIDE_SCALE: Self = {
        #[inline(never)]
        fn lucide_scale(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z" /> < path d = "m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z" /> < path d = "M7 21h10" /> < path d = "M12 3v18" /> < path d = "M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCALE",
            html: lucide_scale,
        }
    };
    const LUCIDE_SCALING: Self = {
        #[inline(never)]
        fn lucide_scaling(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 3 9 15" /> < path d = "M12 3H3v18h18v-9" /> < path d = "M16 3h5v5" /> < path d = "M14 15H9v-5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCALING",
            html: lucide_scaling,
        }
    };
    const LUCIDE_SCAN_FACE: Self = {
        #[inline(never)]
        fn lucide_scan_face(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 7V5a2 2 0 0 1 2-2h2" /> < path d = "M17 3h2a2 2 0 0 1 2 2v2" /> < path d = "M21 17v2a2 2 0 0 1-2 2h-2" /> < path d = "M7 21H5a2 2 0 0 1-2-2v-2" /> < path d = "M8 14s1.5 2 4 2 4-2 4-2" /> < path d = "M9 9h.01" /> < path d = "M15 9h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCAN_FACE",
            html: lucide_scan_face,
        }
    };
    const LUCIDE_SCAN_LINE: Self = {
        #[inline(never)]
        fn lucide_scan_line(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 7V5a2 2 0 0 1 2-2h2" /> < path d = "M17 3h2a2 2 0 0 1 2 2v2" /> < path d = "M21 17v2a2 2 0 0 1-2 2h-2" /> < path d = "M7 21H5a2 2 0 0 1-2-2v-2" /> < line x1 = "7" y1 = "12" x2 = "17" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCAN_LINE",
            html: lucide_scan_line,
        }
    };
    const LUCIDE_SCAN: Self = {
        #[inline(never)]
        fn lucide_scan(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 7V5a2 2 0 0 1 2-2h2" /> < path d = "M17 3h2a2 2 0 0 1 2 2v2" /> < path d = "M21 17v2a2 2 0 0 1-2 2h-2" /> < path d = "M7 21H5a2 2 0 0 1-2-2v-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCAN",
            html: lucide_scan,
        }
    };
    const LUCIDE_SCISSORS: Self = {
        #[inline(never)]
        fn lucide_scissors(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "6" cy = "6" r = "3" /> < circle cx = "6" cy = "18" r = "3" /> < line x1 = "20" y1 = "4" x2 = "8.12" y2 = "15.88" /> < line x1 = "14.47" y1 = "14.48" x2 = "20" y2 = "20" /> < line x1 = "8.12" y1 = "8.12" x2 = "12" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCISSORS",
            html: lucide_scissors,
        }
    };
    const LUCIDE_SCREEN_SHARE_OFF: Self = {
        #[inline(never)]
        fn lucide_screen_share_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3" /> < path d = "M8 21h8" /> < path d = "M12 17v4" /> < path d = "m22 3-5 5" /> < path d = "m17 3 5 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCREEN_SHARE_OFF",
            html: lucide_screen_share_off,
        }
    };
    const LUCIDE_SCREEN_SHARE: Self = {
        #[inline(never)]
        fn lucide_screen_share(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3" /> < path d = "M8 21h8" /> < path d = "M12 17v4" /> < path d = "m17 8 5-5" /> < path d = "M17 3h5v5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCREEN_SHARE",
            html: lucide_screen_share,
        }
    };
    const LUCIDE_SCROLL: Self = {
        #[inline(never)]
        fn lucide_scroll(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 17v2a2 2 0 0 1-2 2v0a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v3h3" /> < path d = "M22 17v2a2 2 0 0 1-2 2H8" /> < path d = "M19 17V5a2 2 0 0 0-2-2H4" /> < path d = "M22 17H10" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SCROLL",
            html: lucide_scroll,
        }
    };
    const LUCIDE_SEARCH: Self = {
        #[inline(never)]
        fn lucide_search(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "11" cy = "11" r = "8" /> < line x1 = "21" y1 = "21" x2 = "16.65" y2 = "16.65" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SEARCH",
            html: lucide_search,
        }
    };
    const LUCIDE_SEND: Self = {
        #[inline(never)]
        fn lucide_send(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "22" y1 = "2" x2 = "11" y2 = "13" /> < polygon points = "22 2 15 22 11 13 2 9 22 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SEND",
            html: lucide_send,
        }
    };
    const LUCIDE_SEPARATOR_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_separator_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "3" y1 = "12" x2 = "21" y2 = "12" /> < polyline points = "8 8 12 4 16 8" /> < polyline points = "16 16 12 20 8 16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SEPARATOR_HORIZONTAL",
            html: lucide_separator_horizontal,
        }
    };
    const LUCIDE_SEPARATOR_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_separator_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "12" y1 = "3" x2 = "12" y2 = "21" /> < polyline points = "8 8 4 12 8 16" /> < polyline points = "16 16 20 12 16 8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SEPARATOR_VERTICAL",
            html: lucide_separator_vertical,
        }
    };
    const LUCIDE_SERVER_COG: Self = {
        #[inline(never)]
        fn lucide_server_cog(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-1" /> < path d = "M5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-1" /> < path d = "M6 6h.01" /> < path d = "M6 18h.01" /> < circle cx = "12" cy = "12" r = "3" /> < path d = "M12 8v1" /> < path d = "M12 15v1" /> < path d = "M16 12h-1" /> < path d = "M9 12H8" /> < path d = "m15 9-.88.88" /> < path d = "M9.88 14.12 9 15" /> < path d = "m15 15-.88-.88" /> < path d = "M9.88 9.88 9 9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SERVER_COG",
            html: lucide_server_cog,
        }
    };
    const LUCIDE_SERVER_CRASH: Self = {
        #[inline(never)]
        fn lucide_server_crash(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2" /> < path d = "M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2" /> < path d = "M6 6h.01" /> < path d = "M6 18h.01" /> < path d = "m13 6-4 6h6l-4 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SERVER_CRASH",
            html: lucide_server_crash,
        }
    };
    const LUCIDE_SERVER_OFF: Self = {
        #[inline(never)]
        fn lucide_server_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5" /> < path d = "M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z" /> < path d = "M22 17v-1a2 2 0 0 0-2-2h-1" /> < path d = "M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z" /> < path d = "M6 18h.01" /> < path d = "m2 2 20 20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SERVER_OFF",
            html: lucide_server_off,
        }
    };
    const LUCIDE_SERVER: Self = {
        #[inline(never)]
        fn lucide_server(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "2" width = "20" height = "8" rx = "2" ry = "2" /> < rect x = "2" y = "14" width = "20" height = "8" rx = "2" ry = "2" /> < line x1 = "6" y1 = "6" x2 = "6.01" y2 = "6" /> < line x1 = "6" y1 = "18" x2 = "6.01" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SERVER",
            html: lucide_server,
        }
    };
    const LUCIDE_SETTINGS_2: Self = {
        #[inline(never)]
        fn lucide_settings_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 7h-9" /> < path d = "M14 17H5" /> < circle cx = "17" cy = "17" r = "3" /> < circle cx = "7" cy = "7" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SETTINGS_2",
            html: lucide_settings_2,
        }
    };
    const LUCIDE_SETTINGS: Self = {
        #[inline(never)]
        fn lucide_settings(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z" /> < circle cx = "12" cy = "12" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SETTINGS",
            html: lucide_settings,
        }
    };
    const LUCIDE_SHARE_2: Self = {
        #[inline(never)]
        fn lucide_share_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "18" cy = "5" r = "3" /> < circle cx = "6" cy = "12" r = "3" /> < circle cx = "18" cy = "19" r = "3" /> < line x1 = "8.59" y1 = "13.51" x2 = "15.42" y2 = "17.49" /> < line x1 = "15.41" y1 = "6.51" x2 = "8.59" y2 = "10.49" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHARE_2",
            html: lucide_share_2,
        }
    };
    const LUCIDE_SHARE: Self = {
        #[inline(never)]
        fn lucide_share(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" /> < polyline points = "16 6 12 2 8 6" /> < line x1 = "12" y1 = "2" x2 = "12" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHARE",
            html: lucide_share,
        }
    };
    const LUCIDE_SHEET: Self = {
        #[inline(never)]
        fn lucide_sheet(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "3" y1 = "9" x2 = "21" y2 = "9" /> < line x1 = "3" y1 = "15" x2 = "21" y2 = "15" /> < line x1 = "9" y1 = "9" x2 = "9" y2 = "21" /> < line x1 = "15" y1 = "9" x2 = "15" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHEET",
            html: lucide_sheet,
        }
    };
    const LUCIDE_SHIELD_ALERT: Self = {
        #[inline(never)]
        fn lucide_shield_alert(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z" /> < path d = "M12 8v4" /> < path d = "M12 16h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHIELD_ALERT",
            html: lucide_shield_alert,
        }
    };
    const LUCIDE_SHIELD_CHECK: Self = {
        #[inline(never)]
        fn lucide_shield_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z" /> < path d = "m9 12 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHIELD_CHECK",
            html: lucide_shield_check,
        }
    };
    const LUCIDE_SHIELD_CLOSE: Self = {
        #[inline(never)]
        fn lucide_shield_close(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z" /> < line x1 = "9.5" y1 = "9" x2 = "14.5" y2 = "14" /> < line x1 = "14.5" y1 = "9" x2 = "9.5" y2 = "14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHIELD_CLOSE",
            html: lucide_shield_close,
        }
    };
    const LUCIDE_SHIELD_OFF: Self = {
        #[inline(never)]
        fn lucide_shield_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18" /> < path d = "M4.73 4.73 4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHIELD_OFF",
            html: lucide_shield_off,
        }
    };
    const LUCIDE_SHIELD: Self = {
        #[inline(never)]
        fn lucide_shield(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHIELD",
            html: lucide_shield,
        }
    };
    const LUCIDE_SHIRT: Self = {
        #[inline(never)]
        fn lucide_shirt(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHIRT",
            html: lucide_shirt,
        }
    };
    const LUCIDE_SHOPPING_BAG: Self = {
        #[inline(never)]
        fn lucide_shopping_bag(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 2 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z" /> < line x1 = "3" y1 = "6" x2 = "21" y2 = "6" /> < path d = "M16 10a4 4 0 0 1-8 0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHOPPING_BAG",
            html: lucide_shopping_bag,
        }
    };
    const LUCIDE_SHOPPING_CART: Self = {
        #[inline(never)]
        fn lucide_shopping_cart(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "8" cy = "21" r = "1" /> < circle cx = "19" cy = "21" r = "1" /> < path d = "M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHOPPING_CART",
            html: lucide_shopping_cart,
        }
    };
    const LUCIDE_SHOVEL: Self = {
        #[inline(never)]
        fn lucide_shovel(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 22v-5l5-5 5 5-5 5z" /> < path d = "M9.5 14.5 16 8" /> < path d = "m17 2 5 5-.5.5a3.53 3.53 0 0 1-5 0s0 0 0 0a3.53 3.53 0 0 1 0-5L17 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHOVEL",
            html: lucide_shovel,
        }
    };
    const LUCIDE_SHOWER_HEAD: Self = {
        #[inline(never)]
        fn lucide_shower_head(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m4 4 2.5 2.5" /> < path d = "M13.5 6.5a4.95 4.95 0 0 0-7 7" /> < path d = "M15 5 5 15" /> < path d = "M14 17v.01" /> < path d = "M10 16v.01" /> < path d = "M13 13v.01" /> < path d = "M16 10v.01" /> < path d = "M11 20v.01" /> < path d = "M17 14v.01" /> < path d = "M20 11v.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHOWER_HEAD",
            html: lucide_shower_head,
        }
    };
    const LUCIDE_SHRINK: Self = {
        #[inline(never)]
        fn lucide_shrink(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m15 15 6 6m-6-6v4.8m0-4.8h4.8" /> < path d = "M9 19.8V15m0 0H4.2M9 15l-6 6" /> < path d = "M15 4.2V9m0 0h4.8M15 9l6-6" /> < path d = "M9 4.2V9m0 0H4.2M9 9 3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHRINK",
            html: lucide_shrink,
        }
    };
    const LUCIDE_SHRUB: Self = {
        #[inline(never)]
        fn lucide_shrub(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 22v-7l-2-2" /> < path d = "M17 8v.8A6 6 0 0 1 13.8 20v0H10v0A6.5 6.5 0 0 1 7 8h0a5 5 0 0 1 10 0Z" /> < path d = "m14 14-2 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHRUB",
            html: lucide_shrub,
        }
    };
    const LUCIDE_SHUFFLE: Self = {
        #[inline(never)]
        fn lucide_shuffle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "16 3 21 3 21 8" /> < line x1 = "4" y1 = "20" x2 = "21" y2 = "3" /> < polyline points = "21 16 21 21 16 21" /> < line x1 = "15" y1 = "15" x2 = "21" y2 = "21" /> < line x1 = "4" y1 = "4" x2 = "9" y2 = "9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SHUFFLE",
            html: lucide_shuffle,
        }
    };
    const LUCIDE_SIDEBAR_CLOSE: Self = {
        #[inline(never)]
        fn lucide_sidebar_close(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < path d = "M9 3v18" /> < path d = "m16 15-3-3 3-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIDEBAR_CLOSE",
            html: lucide_sidebar_close,
        }
    };
    const LUCIDE_SIDEBAR_OPEN: Self = {
        #[inline(never)]
        fn lucide_sidebar_open(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < path d = "M9 3v18" /> < path d = "m14 9 3 3-3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIDEBAR_OPEN",
            html: lucide_sidebar_open,
        }
    };
    const LUCIDE_SIDEBAR: Self = {
        #[inline(never)]
        fn lucide_sidebar(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "9" y1 = "3" x2 = "9" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIDEBAR",
            html: lucide_sidebar,
        }
    };
    const LUCIDE_SIGMA: Self = {
        #[inline(never)]
        fn lucide_sigma(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 7V4H6l6 8-6 8h12v-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIGMA",
            html: lucide_sigma,
        }
    };
    const LUCIDE_SIGNAL_HIGH: Self = {
        #[inline(never)]
        fn lucide_signal_high(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 20h.01" /> < path d = "M7 20v-4" /> < path d = "M12 20v-8" /> < path d = "M17 20V8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIGNAL_HIGH",
            html: lucide_signal_high,
        }
    };
    const LUCIDE_SIGNAL_LOW: Self = {
        #[inline(never)]
        fn lucide_signal_low(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 20h.01" /> < path d = "M7 20v-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIGNAL_LOW",
            html: lucide_signal_low,
        }
    };
    const LUCIDE_SIGNAL_MEDIUM: Self = {
        #[inline(never)]
        fn lucide_signal_medium(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 20h.01" /> < path d = "M7 20v-4" /> < path d = "M12 20v-8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIGNAL_MEDIUM",
            html: lucide_signal_medium,
        }
    };
    const LUCIDE_SIGNAL_ZERO: Self = {
        #[inline(never)]
        fn lucide_signal_zero(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 20h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIGNAL_ZERO",
            html: lucide_signal_zero,
        }
    };
    const LUCIDE_SIGNAL: Self = {
        #[inline(never)]
        fn lucide_signal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 20h.01" /> < path d = "M7 20v-4" /> < path d = "M12 20v-8" /> < path d = "M17 20V8" /> < path d = "M22 4v16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIGNAL",
            html: lucide_signal,
        }
    };
    const LUCIDE_SIREN: Self = {
        #[inline(never)]
        fn lucide_siren(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 12a5 5 0 0 1 5-5v0a5 5 0 0 1 5 5v6H7v-6Z" /> < path d = "M5 20a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v2H5v-2Z" /> < path d = "M21 12h1" /> < path d = "M18.5 4.5 18 5" /> < path d = "M2 12h1" /> < path d = "M12 2v1" /> < path d = "m4.929 4.929.707.707" /> < path d = "M12 12v6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SIREN",
            html: lucide_siren,
        }
    };
    const LUCIDE_SKIP_BACK: Self = {
        #[inline(never)]
        fn lucide_skip_back(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "19 20 9 12 19 4 19 20" /> < line x1 = "5" y1 = "19" x2 = "5" y2 = "5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SKIP_BACK",
            html: lucide_skip_back,
        }
    };
    const LUCIDE_SKIP_FORWARD: Self = {
        #[inline(never)]
        fn lucide_skip_forward(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "5 4 15 12 5 20 5 4" /> < line x1 = "19" y1 = "5" x2 = "19" y2 = "19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SKIP_FORWARD",
            html: lucide_skip_forward,
        }
    };
    const LUCIDE_SKULL: Self = {
        #[inline(never)]
        fn lucide_skull(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "9" cy = "12" r = "1" /> < circle cx = "15" cy = "12" r = "1" /> < path d = "M8 20v2h8v-2" /> < path d = "m12.5 17-.5-1-.5 1h1z" /> < path d = "M16 20a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SKULL",
            html: lucide_skull,
        }
    };
    const LUCIDE_SLACK: Self = {
        #[inline(never)]
        fn lucide_slack(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "13" y = "2" width = "3" height = "8" rx = "1.5" /> < path d = "M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5" /> < rect x = "8" y = "14" width = "3" height = "8" rx = "1.5" /> < path d = "M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5" /> < rect x = "14" y = "13" width = "8" height = "3" rx = "1.5" /> < path d = "M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5" /> < rect x = "2" y = "8" width = "8" height = "3" rx = "1.5" /> < path d = "M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SLACK",
            html: lucide_slack,
        }
    };
    const LUCIDE_SLASH: Self = {
        #[inline(never)]
        fn lucide_slash(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "4.93" y1 = "4.93" x2 = "19.07" y2 = "19.07" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SLASH",
            html: lucide_slash,
        }
    };
    const LUCIDE_SLICE: Self = {
        #[inline(never)]
        fn lucide_slice(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m8 14-6 6h9v-3" /> < path d = "M18.37 3.63 8 14l3 3L21.37 6.63a2.12 2.12 0 1 0-3-3Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SLICE",
            html: lucide_slice,
        }
    };
    const LUCIDE_SLIDERS_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_sliders_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "21" y1 = "4" x2 = "14" y2 = "4" /> < line x1 = "10" y1 = "4" x2 = "3" y2 = "4" /> < line x1 = "21" y1 = "12" x2 = "12" y2 = "12" /> < line x1 = "8" y1 = "12" x2 = "3" y2 = "12" /> < line x1 = "21" y1 = "20" x2 = "16" y2 = "20" /> < line x1 = "12" y1 = "20" x2 = "3" y2 = "20" /> < line x1 = "14" y1 = "2" x2 = "14" y2 = "6" /> < line x1 = "8" y1 = "10" x2 = "8" y2 = "14" /> < line x1 = "16" y1 = "18" x2 = "16" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SLIDERS_HORIZONTAL",
            html: lucide_sliders_horizontal,
        }
    };
    const LUCIDE_SLIDERS: Self = {
        #[inline(never)]
        fn lucide_sliders(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "4" y1 = "21" x2 = "4" y2 = "14" /> < line x1 = "4" y1 = "10" x2 = "4" y2 = "3" /> < line x1 = "12" y1 = "21" x2 = "12" y2 = "12" /> < line x1 = "12" y1 = "8" x2 = "12" y2 = "3" /> < line x1 = "20" y1 = "21" x2 = "20" y2 = "16" /> < line x1 = "20" y1 = "12" x2 = "20" y2 = "3" /> < line x1 = "2" y1 = "14" x2 = "6" y2 = "14" /> < line x1 = "10" y1 = "8" x2 = "14" y2 = "8" /> < line x1 = "18" y1 = "16" x2 = "22" y2 = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SLIDERS",
            html: lucide_sliders,
        }
    };
    const LUCIDE_SMARTPHONE_CHARGING: Self = {
        #[inline(never)]
        fn lucide_smartphone_charging(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "5" y = "2" width = "14" height = "20" rx = "2" ry = "2" /> < path d = "M12.667 8 10 12h4l-2.667 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SMARTPHONE_CHARGING",
            html: lucide_smartphone_charging,
        }
    };
    const LUCIDE_SMARTPHONE: Self = {
        #[inline(never)]
        fn lucide_smartphone(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "5" y = "2" width = "14" height = "20" rx = "2" ry = "2" /> < path d = "M12 18h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SMARTPHONE",
            html: lucide_smartphone,
        }
    };
    const LUCIDE_SMILE_PLUS: Self = {
        #[inline(never)]
        fn lucide_smile_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 11v1a10 10 0 1 1-9-10" /> < path d = "M8 14s1.5 2 4 2 4-2 4-2" /> < line x1 = "9" y1 = "9" x2 = "9.01" y2 = "9" /> < line x1 = "15" y1 = "9" x2 = "15.01" y2 = "9" /> < path d = "M16 5h6" /> < path d = "M19 2v6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SMILE_PLUS",
            html: lucide_smile_plus,
        }
    };
    const LUCIDE_SMILE: Self = {
        #[inline(never)]
        fn lucide_smile(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < path d = "M8 14s1.5 2 4 2 4-2 4-2" /> < line x1 = "9" y1 = "9" x2 = "9.01" y2 = "9" /> < line x1 = "15" y1 = "9" x2 = "15.01" y2 = "9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SMILE",
            html: lucide_smile,
        }
    };
    const LUCIDE_SNOWFLAKE: Self = {
        #[inline(never)]
        fn lucide_snowflake(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" y1 = "12" x2 = "22" y2 = "12" /> < line x1 = "12" y1 = "2" x2 = "12" y2 = "22" /> < path d = "m20 16-4-4 4-4" /> < path d = "m4 8 4 4-4 4" /> < path d = "m16 4-4 4-4-4" /> < path d = "m8 20 4-4 4 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SNOWFLAKE",
            html: lucide_snowflake,
        }
    };
    const LUCIDE_SOFA: Self = {
        #[inline(never)]
        fn lucide_sofa(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3" /> < path d = "M2 11v5a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v2H6v-2a2 2 0 0 0-4 0Z" /> < path d = "M4 18v2" /> < path d = "M20 18v2" /> < path d = "M12 4v9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SOFA",
            html: lucide_sofa,
        }
    };
    const LUCIDE_SORT_ASC: Self = {
        #[inline(never)]
        fn lucide_sort_asc(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 5h4" /> < path d = "M11 9h7" /> < path d = "M11 13h10" /> < path d = "m3 17 3 3 3-3" /> < path d = "M6 18V4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SORT_ASC",
            html: lucide_sort_asc,
        }
    };
    const LUCIDE_SORT_DESC: Self = {
        #[inline(never)]
        fn lucide_sort_desc(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 5h10" /> < path d = "M11 9h7" /> < path d = "M11 13h4" /> < path d = "m3 17 3 3 3-3" /> < path d = "M6 18V4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SORT_DESC",
            html: lucide_sort_desc,
        }
    };
    const LUCIDE_SPEAKER: Self = {
        #[inline(never)]
        fn lucide_speaker(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "2" width = "16" height = "20" rx = "2" ry = "2" /> < circle cx = "12" cy = "14" r = "4" /> < line x1 = "12" y1 = "6" x2 = "12.01" y2 = "6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SPEAKER",
            html: lucide_speaker,
        }
    };
    const LUCIDE_SPROUT: Self = {
        #[inline(never)]
        fn lucide_sprout(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 20h10" /> < path d = "M10 20c5.5-2.5.8-6.4 3-10" /> < path d = "M9.5 9.4c1.1.8 1.8 2.2 2.3 3.7-2 .4-3.5.4-4.8-.3-1.2-.6-2.3-1.9-3-4.2 2.8-.5 4.4 0 5.5.8z" /> < path d = "M14.1 6a7 7 0 0 0-1.1 4c1.9-.1 3.3-.6 4.3-1.4 1-1 1.6-2.3 1.7-4.6-2.7.1-4 1-4.9 2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SPROUT",
            html: lucide_sprout,
        }
    };
    const LUCIDE_SQUARE: Self = {
        #[inline(never)]
        fn lucide_square(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SQUARE",
            html: lucide_square,
        }
    };
    const LUCIDE_STAR_HALF: Self = {
        #[inline(never)]
        fn lucide_star_half(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 17.8 5.8 21 7 14.1 2 9.3l7-1L12 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STAR_HALF",
            html: lucide_star_half,
        }
    };
    const LUCIDE_STAR_OFF: Self = {
        #[inline(never)]
        fn lucide_star_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43" /> < path d = "M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STAR_OFF",
            html: lucide_star_off,
        }
    };
    const LUCIDE_STAR: Self = {
        #[inline(never)]
        fn lucide_star(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STAR",
            html: lucide_star,
        }
    };
    const LUCIDE_STETHOSCOPE: Self = {
        #[inline(never)]
        fn lucide_stethoscope(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4.8 2.3A.3.3 0 1 0 5 2H4a2 2 0 0 0-2 2v5a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6V4a2 2 0 0 0-2-2h-1a.2.2 0 1 0 .3.3" /> < path d = "M8 15v1a6 6 0 0 0 6 6v0a6 6 0 0 0 6-6v-4" /> < circle cx = "20" cy = "10" r = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STETHOSCOPE",
            html: lucide_stethoscope,
        }
    };
    const LUCIDE_STICKER: Self = {
        #[inline(never)]
        fn lucide_sticker(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z" /> < path d = "M15 3v6h6" /> < path d = "M10 16s.8 1 2 1c1.3 0 2-1 2-1" /> < path d = "M8 13h0" /> < path d = "M16 13h0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STICKER",
            html: lucide_sticker,
        }
    };
    const LUCIDE_STICKY_NOTE: Self = {
        #[inline(never)]
        fn lucide_sticky_note(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z" /> < path d = "M15 3v6h6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STICKY_NOTE",
            html: lucide_sticky_note,
        }
    };
    const LUCIDE_STOP_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_stop_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < rect x = "9" y = "9" width = "6" height = "6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STOP_CIRCLE",
            html: lucide_stop_circle,
        }
    };
    const LUCIDE_STRETCH_HORIZONTAL: Self = {
        #[inline(never)]
        fn lucide_stretch_horizontal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "4" width = "20" height = "6" rx = "2" /> < rect x = "2" y = "14" width = "20" height = "6" rx = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STRETCH_HORIZONTAL",
            html: lucide_stretch_horizontal,
        }
    };
    const LUCIDE_STRETCH_VERTICAL: Self = {
        #[inline(never)]
        fn lucide_stretch_vertical(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "2" width = "6" height = "20" rx = "2" /> < rect x = "14" y = "2" width = "6" height = "20" rx = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STRETCH_VERTICAL",
            html: lucide_stretch_vertical,
        }
    };
    const LUCIDE_STRIKETHROUGH: Self = {
        #[inline(never)]
        fn lucide_strikethrough(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 4H9a3 3 0 0 0-2.83 4" /> < path d = "M14 12a4 4 0 0 1 0 8H6" /> < line x1 = "4" y1 = "12" x2 = "20" y2 = "12" /> </ svg > }
        }
        Self {
            name: "LUCIDE_STRIKETHROUGH",
            html: lucide_strikethrough,
        }
    };
    const LUCIDE_SUBSCRIPT: Self = {
        #[inline(never)]
        fn lucide_subscript(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m4 5 8 8" /> < path d = "m12 5-8 8" /> < path d = "M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SUBSCRIPT",
            html: lucide_subscript,
        }
    };
    const LUCIDE_SUN_DIM: Self = {
        #[inline(never)]
        fn lucide_sun_dim(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 16a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" /> < path d = "M12 4h.01" /> < path d = "M20 12h.01" /> < path d = "M12 20h.01" /> < path d = "M4 12h.01" /> < path d = "M17.657 6.343h.01" /> < path d = "M17.657 17.657h.01" /> < path d = "M6.343 17.657h.01" /> < path d = "M6.343 6.343h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SUN_DIM",
            html: lucide_sun_dim,
        }
    };
    const LUCIDE_SUN_MEDIUM: Self = {
        #[inline(never)]
        fn lucide_sun_medium(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 16a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" /> < path d = "M12 3v1" /> < path d = "M12 20v1" /> < path d = "M3 12h1" /> < path d = "M20 12h1" /> < path d = "m18.364 5.636-.707.707" /> < path d = "m6.343 17.657-.707.707" /> < path d = "m5.636 5.636.707.707" /> < path d = "m17.657 17.657.707.707" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SUN_MEDIUM",
            html: lucide_sun_medium,
        }
    };
    const LUCIDE_SUN_MOON: Self = {
        #[inline(never)]
        fn lucide_sun_moon(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 16a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" /> < path d = "M12 8a2.828 2.828 0 1 0 4 4" /> < path d = "M12 2v2" /> < path d = "M12 20v2" /> < path d = "m4.93 4.93 1.41 1.41" /> < path d = "m17.66 17.66 1.41 1.41" /> < path d = "M2 12h2" /> < path d = "M20 12h2" /> < path d = "m6.34 17.66-1.41 1.41" /> < path d = "m19.07 4.93-1.41 1.41" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SUN_MOON",
            html: lucide_sun_moon,
        }
    };
    const LUCIDE_SUN_SNOW: Self = {
        #[inline(never)]
        fn lucide_sun_snow(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 9a3 3 0 1 0 0 6" /> < path d = "M2 12h1" /> < path d = "M14 21V3" /> < path d = "M10 4V3" /> < path d = "M10 21v-1" /> < path d = "m3.64 18.36.7-.7" /> < path d = "m4.34 6.34-.7-.7" /> < path d = "M14 12h8" /> < path d = "m17 4-3 3" /> < path d = "m14 17 3 3" /> < path d = "m21 15-3-3 3-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SUN_SNOW",
            html: lucide_sun_snow,
        }
    };
    const LUCIDE_SUN: Self = {
        #[inline(never)]
        fn lucide_sun(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "4" /> < path d = "M12 2v2" /> < path d = "M12 20v2" /> < path d = "m4.93 4.93 1.41 1.41" /> < path d = "m17.66 17.66 1.41 1.41" /> < path d = "M2 12h2" /> < path d = "M20 12h2" /> < path d = "m6.34 17.66-1.41 1.41" /> < path d = "m19.07 4.93-1.41 1.41" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SUN",
            html: lucide_sun,
        }
    };
    const LUCIDE_SUNRISE: Self = {
        #[inline(never)]
        fn lucide_sunrise(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 2v8" /> < path d = "m4.93 10.93 1.41 1.41" /> < path d = "M2 18h2" /> < path d = "M20 18h2" /> < path d = "m19.07 10.93-1.41 1.41" /> < path d = "M22 22H2" /> < path d = "m8 6 4-4 4 4" /> < path d = "M16 18a4 4 0 0 0-8 0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SUNRISE",
            html: lucide_sunrise,
        }
    };
    const LUCIDE_SUNSET: Self = {
        #[inline(never)]
        fn lucide_sunset(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 10V2" /> < path d = "m4.93 10.93 1.41 1.41" /> < path d = "M2 18h2" /> < path d = "M20 18h2" /> < path d = "m19.07 10.93-1.41 1.41" /> < path d = "M22 22H2" /> < path d = "m16 6-4 4-4-4" /> < path d = "M16 18a4 4 0 0 0-8 0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SUNSET",
            html: lucide_sunset,
        }
    };
    const LUCIDE_SUPERSCRIPT: Self = {
        #[inline(never)]
        fn lucide_superscript(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m4 19 8-8" /> < path d = "m12 19-8-8" /> < path d = "M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SUPERSCRIPT",
            html: lucide_superscript,
        }
    };
    const LUCIDE_SWISS_FRANC: Self = {
        #[inline(never)]
        fn lucide_swiss_franc(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 21V3h8" /> < path d = "M6 16h9" /> < path d = "M10 9.5h7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SWISS_FRANC",
            html: lucide_swiss_franc,
        }
    };
    const LUCIDE_SWITCH_CAMERA: Self = {
        #[inline(never)]
        fn lucide_switch_camera(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5" /> < path d = "M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5" /> < circle cx = "12" cy = "12" r = "3" /> < path d = "m18 22-3-3 3-3" /> < path d = "m6 2 3 3-3 3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SWITCH_CAMERA",
            html: lucide_switch_camera,
        }
    };
    const LUCIDE_SWORD: Self = {
        #[inline(never)]
        fn lucide_sword(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "14.5 17.5 3 6 3 3 6 3 17.5 14.5" /> < line x1 = "13" y1 = "19" x2 = "19" y2 = "13" /> < line x1 = "16" y1 = "16" x2 = "20" y2 = "20" /> < line x1 = "19" y1 = "21" x2 = "21" y2 = "19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SWORD",
            html: lucide_sword,
        }
    };
    const LUCIDE_SWORDS: Self = {
        #[inline(never)]
        fn lucide_swords(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "14.5 17.5 3 6 3 3 6 3 17.5 14.5" /> < line x1 = "13" y1 = "19" x2 = "19" y2 = "13" /> < line x1 = "16" y1 = "16" x2 = "20" y2 = "20" /> < line x1 = "19" y1 = "21" x2 = "21" y2 = "19" /> < polyline points = "14.5 6.5 18 3 21 3 21 6 17.5 9.5" /> < line x1 = "5" y1 = "14" x2 = "9" y2 = "18" /> < line x1 = "7" y1 = "17" x2 = "4" y2 = "20" /> < line x1 = "3" y1 = "19" x2 = "5" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SWORDS",
            html: lucide_swords,
        }
    };
    const LUCIDE_SYRINGE: Self = {
        #[inline(never)]
        fn lucide_syringe(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m18 2 4 4" /> < path d = "m17 7 3-3" /> < path d = "M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5" /> < path d = "m9 11 4 4" /> < path d = "m5 19-3 3" /> < path d = "m14 4 6 6" /> </ svg > }
        }
        Self {
            name: "LUCIDE_SYRINGE",
            html: lucide_syringe,
        }
    };
    const LUCIDE_TABLE_2: Self = {
        #[inline(never)]
        fn lucide_table_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TABLE_2",
            html: lucide_table_2,
        }
    };
    const LUCIDE_TABLE: Self = {
        #[inline(never)]
        fn lucide_table(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "3" y1 = "9" x2 = "21" y2 = "9" /> < line x1 = "3" y1 = "15" x2 = "21" y2 = "15" /> < line x1 = "12" y1 = "3" x2 = "12" y2 = "21" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TABLE",
            html: lucide_table,
        }
    };
    const LUCIDE_TABLET: Self = {
        #[inline(never)]
        fn lucide_tablet(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "2" width = "16" height = "20" rx = "2" ry = "2" /> < line x1 = "12" y1 = "18" x2 = "12.01" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TABLET",
            html: lucide_tablet,
        }
    };
    const LUCIDE_TAG: Self = {
        #[inline(never)]
        fn lucide_tag(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 2H2v10l9.29 9.29c.94.94 2.48.94 3.42 0l6.58-6.58c.94-.94.94-2.48 0-3.42L12 2Z" /> < path d = "M7 7h.01" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TAG",
            html: lucide_tag,
        }
    };
    const LUCIDE_TAGS: Self = {
        #[inline(never)]
        fn lucide_tags(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 5H2v7l6.29 6.29c.94.94 2.48.94 3.42 0l3.58-3.58c.94-.94.94-2.48 0-3.42L9 5Z" /> < path d = "M6 9.01V9" /> < path d = "m15 5 6.3 6.3a2.4 2.4 0 0 1 0 3.4L17 19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TAGS",
            html: lucide_tags,
        }
    };
    const LUCIDE_TARGET: Self = {
        #[inline(never)]
        fn lucide_target(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < circle cx = "12" cy = "12" r = "6" /> < circle cx = "12" cy = "12" r = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TARGET",
            html: lucide_target,
        }
    };
    const LUCIDE_TENT: Self = {
        #[inline(never)]
        fn lucide_tent(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M19 20 10 4" /> < path d = "m5 20 9-16" /> < path d = "M3 20h18" /> < path d = "m12 15-3 5" /> < path d = "m12 15 3 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TENT",
            html: lucide_tent,
        }
    };
    const LUCIDE_TERMINAL_SQUARE: Self = {
        #[inline(never)]
        fn lucide_terminal_square(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m7 11 2-2-2-2" /> < path d = "M11 13h4" /> < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TERMINAL_SQUARE",
            html: lucide_terminal_square,
        }
    };
    const LUCIDE_TERMINAL: Self = {
        #[inline(never)]
        fn lucide_terminal(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "4 17 10 11 4 5" /> < line x1 = "12" y1 = "19" x2 = "20" y2 = "19" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TERMINAL",
            html: lucide_terminal,
        }
    };
    const LUCIDE_TEXT_CURSOR_INPUT: Self = {
        #[inline(never)]
        fn lucide_text_cursor_input(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M13 20h-1a3 3 0 0 1-3-3V7a3 3 0 0 1 3-3h1" /> < path d = "M5 4h1a3 3 0 0 1 3 3v10a3 3 0 0 1-3 3H5" /> < path d = "M13.1 7.9h6.8A2.18 2.18 0 0 1 22 10v4a2.11 2.11 0 0 1-2.1 2.1h-6.8" /> < path d = "M4.8 16.1h-.7A2.18 2.18 0 0 1 2 14v-4a2.18 2.18 0 0 1 2.1-2.1h.7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TEXT_CURSOR_INPUT",
            html: lucide_text_cursor_input,
        }
    };
    const LUCIDE_TEXT_CURSOR: Self = {
        #[inline(never)]
        fn lucide_text_cursor(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1" /> < path d = "M7 22h1a4 4 0 0 0 4-4v-1" /> < path d = "M7 2h1a4 4 0 0 1 4 4v1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TEXT_CURSOR",
            html: lucide_text_cursor,
        }
    };
    const LUCIDE_THERMOMETER_SNOWFLAKE: Self = {
        #[inline(never)]
        fn lucide_thermometer_snowflake(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 12h10" /> < path d = "M9 4v16" /> < path d = "m3 9 3 3-3 3" /> < path d = "M12 6 9 9 6 6" /> < path d = "m6 18 3-3 1.5 1.5" /> < path d = "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_THERMOMETER_SNOWFLAKE",
            html: lucide_thermometer_snowflake,
        }
    };
    const LUCIDE_THERMOMETER_SUN: Self = {
        #[inline(never)]
        fn lucide_thermometer_sun(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 9a4 4 0 0 0-2 7.5" /> < path d = "M12 3v2" /> < path d = "m6.6 18.4-1.4 1.4" /> < path d = "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z" /> < path d = "M4 13H2" /> < path d = "M6.34 7.34 4.93 5.93" /> </ svg > }
        }
        Self {
            name: "LUCIDE_THERMOMETER_SUN",
            html: lucide_thermometer_sun,
        }
    };
    const LUCIDE_THERMOMETER: Self = {
        #[inline(never)]
        fn lucide_thermometer(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_THERMOMETER",
            html: lucide_thermometer,
        }
    };
    const LUCIDE_THUMBS_DOWN: Self = {
        #[inline(never)]
        fn lucide_thumbs_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17 14V2" /> < path d = "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22h0a3.13 3.13 0 0 1-3-3.88Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_THUMBS_DOWN",
            html: lucide_thumbs_down,
        }
    };
    const LUCIDE_THUMBS_UP: Self = {
        #[inline(never)]
        fn lucide_thumbs_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 10v12" /> < path d = "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2h0a3.13 3.13 0 0 1 3 3.88Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_THUMBS_UP",
            html: lucide_thumbs_up,
        }
    };
    const LUCIDE_TICKET: Self = {
        #[inline(never)]
        fn lucide_ticket(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 7v2a3 3 0 1 1 0 6v2c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2v-2a3 3 0 1 1 0-6V7a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2Z" /> < path d = "M13 5v2" /> < path d = "M13 17v2" /> < path d = "M13 11v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TICKET",
            html: lucide_ticket,
        }
    };
    const LUCIDE_TIMER_OFF: Self = {
        #[inline(never)]
        fn lucide_timer_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 2h4" /> < path d = "M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7" /> < path d = "M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2" /> < path d = "m2 2 20 20" /> < path d = "M12 12v-2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TIMER_OFF",
            html: lucide_timer_off,
        }
    };
    const LUCIDE_TIMER_RESET: Self = {
        #[inline(never)]
        fn lucide_timer_reset(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 2h4" /> < path d = "M12 14v-4" /> < path d = "M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6" /> < path d = "M9 17H4v5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TIMER_RESET",
            html: lucide_timer_reset,
        }
    };
    const LUCIDE_TIMER: Self = {
        #[inline(never)]
        fn lucide_timer(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "10" x2 = "14" y1 = "2" y2 = "2" /> < line x1 = "12" x2 = "15" y1 = "14" y2 = "11" /> < circle cx = "12" cy = "14" r = "8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TIMER",
            html: lucide_timer,
        }
    };
    const LUCIDE_TOGGLE_LEFT: Self = {
        #[inline(never)]
        fn lucide_toggle_left(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "1" y = "5" width = "22" height = "14" rx = "7" ry = "7" /> < circle cx = "8" cy = "12" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TOGGLE_LEFT",
            html: lucide_toggle_left,
        }
    };
    const LUCIDE_TOGGLE_RIGHT: Self = {
        #[inline(never)]
        fn lucide_toggle_right(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "1" y = "5" width = "22" height = "14" rx = "7" ry = "7" /> < circle cx = "16" cy = "12" r = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TOGGLE_RIGHT",
            html: lucide_toggle_right,
        }
    };
    const LUCIDE_TORNADO: Self = {
        #[inline(never)]
        fn lucide_tornado(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 4H3" /> < path d = "M18 8H6" /> < path d = "M19 12H9" /> < path d = "M16 16h-6" /> < path d = "M11 20H9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TORNADO",
            html: lucide_tornado,
        }
    };
    const LUCIDE_TOY_BRICK: Self = {
        #[inline(never)]
        fn lucide_toy_brick(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "8" width = "18" height = "12" rx = "1" /> < path d = "M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3" /> < path d = "M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TOY_BRICK",
            html: lucide_toy_brick,
        }
    };
    const LUCIDE_TRAIN: Self = {
        #[inline(never)]
        fn lucide_train(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "4" y = "3" width = "16" height = "16" rx = "2" /> < path d = "M4 11h16" /> < path d = "M12 3v8" /> < path d = "m8 19-2 3" /> < path d = "m18 22-2-3" /> < path d = "M8 15h0" /> < path d = "M16 15h0" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TRAIN",
            html: lucide_train,
        }
    };
    const LUCIDE_TRASH_2: Self = {
        #[inline(never)]
        fn lucide_trash_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 6h18" /> < path d = "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" /> < path d = "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" /> < line x1 = "10" y1 = "11" x2 = "10" y2 = "17" /> < line x1 = "14" y1 = "11" x2 = "14" y2 = "17" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TRASH_2",
            html: lucide_trash_2,
        }
    };
    const LUCIDE_TRASH: Self = {
        #[inline(never)]
        fn lucide_trash(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 6h18" /> < path d = "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" /> < path d = "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TRASH",
            html: lucide_trash,
        }
    };
    const LUCIDE_TREE_DECIDUOUS: Self = {
        #[inline(never)]
        fn lucide_tree_deciduous(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 19h8a4 4 0 0 0 3.8-2.8 4 4 0 0 0-1.6-4.5c1-1.1 1-2.7.4-4-.7-1.2-2.2-2-3.6-1.7a3 3 0 0 0-3-3 3 3 0 0 0-3 3c-1.4-.2-2.9.5-3.6 1.7-.7 1.3-.5 2.9.4 4a4 4 0 0 0-1.6 4.5A4 4 0 0 0 8 19Z" /> < path d = "M12 19v3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TREE_DECIDUOUS",
            html: lucide_tree_deciduous,
        }
    };
    const LUCIDE_TREE_PINE: Self = {
        #[inline(never)]
        fn lucide_tree_pine(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z" /> < path d = "M12 22v-3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TREE_PINE",
            html: lucide_tree_pine,
        }
    };
    const LUCIDE_TREES: Self = {
        #[inline(never)]
        fn lucide_trees(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 10v.2A3 3 0 0 1 8.9 16v0H5v0h0a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z" /> < path d = "M7 16v6" /> < path d = "M13 19v3" /> < path d = "M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TREES",
            html: lucide_trees,
        }
    };
    const LUCIDE_TRELLO: Self = {
        #[inline(never)]
        fn lucide_trello(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < rect x = "7" y = "7" width = "3" height = "9" /> < rect x = "14" y = "7" width = "3" height = "5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TRELLO",
            html: lucide_trello,
        }
    };
    const LUCIDE_TRENDING_DOWN: Self = {
        #[inline(never)]
        fn lucide_trending_down(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "22 17 13.5 8.5 8.5 13.5 2 7" /> < polyline points = "16 17 22 17 22 11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TRENDING_DOWN",
            html: lucide_trending_down,
        }
    };
    const LUCIDE_TRENDING_UP: Self = {
        #[inline(never)]
        fn lucide_trending_up(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "22 7 13.5 15.5 8.5 10.5 2 17" /> < polyline points = "16 7 22 7 22 13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TRENDING_UP",
            html: lucide_trending_up,
        }
    };
    const LUCIDE_TRIANGLE: Self = {
        #[inline(never)]
        fn lucide_triangle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TRIANGLE",
            html: lucide_triangle,
        }
    };
    const LUCIDE_TROPHY: Self = {
        #[inline(never)]
        fn lucide_trophy(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 9H4.5a2.5 2.5 0 0 1 0-5H6" /> < path d = "M18 9h1.5a2.5 2.5 0 0 0 0-5H18" /> < path d = "M4 22h16" /> < path d = "M10 14.66V17c0 .55-.47.98-.97 1.21C7.85 18.75 7 20.24 7 22" /> < path d = "M14 14.66V17c0 .55.47.98.97 1.21C16.15 18.75 17 20.24 17 22" /> < path d = "M18 2H6v7a6 6 0 0 0 12 0V2Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TROPHY",
            html: lucide_trophy,
        }
    };
    const LUCIDE_TRUCK: Self = {
        #[inline(never)]
        fn lucide_truck(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10 17h4V5H2v12h3" /> < path d = "M20 17h2v-3.34a4 4 0 0 0-1.17-2.83L19 9h-5" /> < path d = "M14 17h1" /> < circle cx = "7.5" cy = "17.5" r = "2.5" /> < circle cx = "17.5" cy = "17.5" r = "2.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TRUCK",
            html: lucide_truck,
        }
    };
    const LUCIDE_TV_2: Self = {
        #[inline(never)]
        fn lucide_tv_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M7 21h10" /> < rect x = "2" y = "3" width = "20" height = "14" rx = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TV_2",
            html: lucide_tv_2,
        }
    };
    const LUCIDE_TV: Self = {
        #[inline(never)]
        fn lucide_tv(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "2" y = "7" width = "20" height = "15" rx = "2" ry = "2" /> < polyline points = "17 2 12 7 7 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TV",
            html: lucide_tv,
        }
    };
    const LUCIDE_TWITCH: Self = {
        #[inline(never)]
        fn lucide_twitch(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TWITCH",
            html: lucide_twitch,
        }
    };
    const LUCIDE_TWITTER: Self = {
        #[inline(never)]
        fn lucide_twitter(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TWITTER",
            html: lucide_twitter,
        }
    };
    const LUCIDE_TYPE: Self = {
        #[inline(never)]
        fn lucide_type(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "4 7 4 4 20 4 20 7" /> < line x1 = "9" y1 = "20" x2 = "15" y2 = "20" /> < line x1 = "12" y1 = "4" x2 = "12" y2 = "20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_TYPE",
            html: lucide_type,
        }
    };
    const LUCIDE_UMBRELLA: Self = {
        #[inline(never)]
        fn lucide_umbrella(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M22 12a9.92 9.92 0 0 0-3.24-6.41 10.12 10.12 0 0 0-13.52 0A9.92 9.92 0 0 0 2 12Z" /> < path d = "M12 12v8a2 2 0 0 0 4 0" /> < line x1 = "12" y1 = "2" x2 = "12" y2 = "3" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UMBRELLA",
            html: lucide_umbrella,
        }
    };
    const LUCIDE_UNDERLINE: Self = {
        #[inline(never)]
        fn lucide_underline(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M6 4v6a6 6 0 0 0 12 0V4" /> < line x1 = "4" y1 = "20" x2 = "20" y2 = "20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UNDERLINE",
            html: lucide_underline,
        }
    };
    const LUCIDE_UNDO_2: Self = {
        #[inline(never)]
        fn lucide_undo_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M9 14 4 9l5-5" /> < path d = "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5v0a5.5 5.5 0 0 1-5.5 5.5H11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UNDO_2",
            html: lucide_undo_2,
        }
    };
    const LUCIDE_UNDO: Self = {
        #[inline(never)]
        fn lucide_undo(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 7v6h6" /> < path d = "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UNDO",
            html: lucide_undo,
        }
    };
    const LUCIDE_UNLINK_2: Self = {
        #[inline(never)]
        fn lucide_unlink_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UNLINK_2",
            html: lucide_unlink_2,
        }
    };
    const LUCIDE_UNLINK: Self = {
        #[inline(never)]
        fn lucide_unlink(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71" /> < path d = "m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71" /> < line x1 = "8" y1 = "2" x2 = "8" y2 = "5" /> < line x1 = "2" y1 = "8" x2 = "5" y2 = "8" /> < line x1 = "16" y1 = "19" x2 = "16" y2 = "22" /> < line x1 = "19" y1 = "16" x2 = "22" y2 = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UNLINK",
            html: lucide_unlink,
        }
    };
    const LUCIDE_UNLOCK: Self = {
        #[inline(never)]
        fn lucide_unlock(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "11" width = "18" height = "11" rx = "2" ry = "2" /> < path d = "M7 11V7a5 5 0 0 1 9.9-1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UNLOCK",
            html: lucide_unlock,
        }
    };
    const LUCIDE_UPLOAD_CLOUD: Self = {
        #[inline(never)]
        fn lucide_upload_cloud(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" /> < path d = "M12 12v9" /> < path d = "m16 16-4-4-4 4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UPLOAD_CLOUD",
            html: lucide_upload_cloud,
        }
    };
    const LUCIDE_UPLOAD: Self = {
        #[inline(never)]
        fn lucide_upload(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" /> < polyline points = "17 8 12 3 7 8" /> < line x1 = "12" y1 = "3" x2 = "12" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UPLOAD",
            html: lucide_upload,
        }
    };
    const LUCIDE_USB: Self = {
        #[inline(never)]
        fn lucide_usb(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "4" cy = "20" r = "1" /> < circle cx = "10" cy = "7" r = "1" /> < path d = "M4 20 19 5" /> < path d = "m21 3-3 1 2 2 1-3Z" /> < path d = "m10 7-5 5 2 5" /> < path d = "m10 14 5 2 4-4" /> < path d = "m18 12 1-1 1 1-1 1-1-1Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_USB",
            html: lucide_usb,
        }
    };
    const LUCIDE_USER_CHECK: Self = {
        #[inline(never)]
        fn lucide_user_check(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> < circle cx = "9" cy = "7" r = "4" /> < polyline points = "16 11 18 13 22 9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_USER_CHECK",
            html: lucide_user_check,
        }
    };
    const LUCIDE_USER_COG: Self = {
        #[inline(never)]
        fn lucide_user_cog(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> < circle cx = "9" cy = "7" r = "4" /> < circle cx = "19" cy = "11" r = "2" /> < path d = "M19 8v1" /> < path d = "M19 13v1" /> < path d = "m21.6 9.5-.87.5" /> < path d = "m17.27 12-.87.5" /> < path d = "m21.6 12.5-.87-.5" /> < path d = "m17.27 10-.87-.5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_USER_COG",
            html: lucide_user_cog,
        }
    };
    const LUCIDE_USER_MINUS: Self = {
        #[inline(never)]
        fn lucide_user_minus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> < circle cx = "9" cy = "7" r = "4" /> < line x1 = "22" y1 = "11" x2 = "16" y2 = "11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_USER_MINUS",
            html: lucide_user_minus,
        }
    };
    const LUCIDE_USER_PLUS: Self = {
        #[inline(never)]
        fn lucide_user_plus(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> < circle cx = "9" cy = "7" r = "4" /> < line x1 = "19" y1 = "8" x2 = "19" y2 = "14" /> < line x1 = "22" y1 = "11" x2 = "16" y2 = "11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_USER_PLUS",
            html: lucide_user_plus,
        }
    };
    const LUCIDE_USER_X: Self = {
        #[inline(never)]
        fn lucide_user_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> < circle cx = "9" cy = "7" r = "4" /> < line x1 = "17" y1 = "8" x2 = "22" y2 = "13" /> < line x1 = "22" y1 = "8" x2 = "17" y2 = "13" /> </ svg > }
        }
        Self {
            name: "LUCIDE_USER_X",
            html: lucide_user_x,
        }
    };
    const LUCIDE_USER: Self = {
        #[inline(never)]
        fn lucide_user(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" /> < circle cx = "12" cy = "7" r = "4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_USER",
            html: lucide_user,
        }
    };
    const LUCIDE_USERS: Self = {
        #[inline(never)]
        fn lucide_users(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" /> < circle cx = "9" cy = "7" r = "4" /> < path d = "M22 21v-2a4 4 0 0 0-3-3.87" /> < path d = "M16 3.13a4 4 0 0 1 0 7.75" /> </ svg > }
        }
        Self {
            name: "LUCIDE_USERS",
            html: lucide_users,
        }
    };
    const LUCIDE_UTENSILS_CROSSED: Self = {
        #[inline(never)]
        fn lucide_utensils_crossed(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8" /> < path d = "M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7" /> < path d = "m2.1 21.8 6.4-6.3" /> < path d = "m19 5-7 7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UTENSILS_CROSSED",
            html: lucide_utensils_crossed,
        }
    };
    const LUCIDE_UTENSILS: Self = {
        #[inline(never)]
        fn lucide_utensils(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2" /> < path d = "M7 2v20" /> < path d = "M21 15V2v0a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7" /> </ svg > }
        }
        Self {
            name: "LUCIDE_UTENSILS",
            html: lucide_utensils,
        }
    };
    const LUCIDE_VENETIAN_MASK: Self = {
        #[inline(never)]
        fn lucide_venetian_mask(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 12a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V7h-5a8 8 0 0 0-5 2 8 8 0 0 0-5-2H2Z" /> < path d = "M6 11c1.5 0 3 .5 3 2-2 0-3 0-3-2Z" /> < path d = "M18 11c-1.5 0-3 .5-3 2 2 0 3 0 3-2Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VENETIAN_MASK",
            html: lucide_venetian_mask,
        }
    };
    const LUCIDE_VERIFIED: Self = {
        #[inline(never)]
        fn lucide_verified(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 3c-1.2 0-2.4.6-3 1.7A3.6 3.6 0 0 0 4.6 9c-1 .6-1.7 1.8-1.7 3s.7 2.4 1.7 3c-.3 1.2 0 2.5 1 3.4.8.8 2.1 1.2 3.3 1 .6 1 1.8 1.6 3 1.6s2.4-.6 3-1.7c1.2.3 2.5 0 3.4-1 .8-.8 1.2-2 1-3.3 1-.6 1.6-1.8 1.6-3s-.6-2.4-1.7-3c.3-1.2 0-2.5-1-3.4a3.7 3.7 0 0 0-3.3-1c-.6-1-1.8-1.6-3-1.6Z" /> < path d = "m9 12 2 2 4-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VERIFIED",
            html: lucide_verified,
        }
    };
    const LUCIDE_VIBRATE_OFF: Self = {
        #[inline(never)]
        fn lucide_vibrate_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m2 8 2 2-2 2 2 2-2 2" /> < path d = "m22 8-2 2 2 2-2 2 2 2" /> < path d = "M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2" /> < path d = "M16 10.34V6c0-.55-.45-1-1-1h-4.34" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VIBRATE_OFF",
            html: lucide_vibrate_off,
        }
    };
    const LUCIDE_VIBRATE: Self = {
        #[inline(never)]
        fn lucide_vibrate(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m2 8 2 2-2 2 2 2-2 2" /> < path d = "m22 8-2 2 2 2-2 2 2 2" /> < rect x = "8" y = "5" width = "8" height = "14" rx = "1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VIBRATE",
            html: lucide_vibrate,
        }
    };
    const LUCIDE_VIDEO_OFF: Self = {
        #[inline(never)]
        fn lucide_video_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M10.66 6H14a2 2 0 0 1 2 2v2.34l1 1L22 8v8" /> < path d = "M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2l10 10Z" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VIDEO_OFF",
            html: lucide_video_off,
        }
    };
    const LUCIDE_VIDEO: Self = {
        #[inline(never)]
        fn lucide_video(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m22 8-6 4 6 4V8Z" /> < rect x = "2" y = "6" width = "14" height = "12" rx = "2" ry = "2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VIDEO",
            html: lucide_video,
        }
    };
    const LUCIDE_VIEW: Self = {
        #[inline(never)]
        fn lucide_view(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 12s2.545-5 7-5c4.454 0 7 5 7 5s-2.546 5-7 5c-4.455 0-7-5-7-5z" /> < path d = "M12 13a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" /> < path d = "M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2" /> < path d = "M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VIEW",
            html: lucide_view,
        }
    };
    const LUCIDE_VOICEMAIL: Self = {
        #[inline(never)]
        fn lucide_voicemail(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "6" cy = "12" r = "4" /> < circle cx = "18" cy = "12" r = "4" /> < line x1 = "6" y1 = "16" x2 = "18" y2 = "16" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VOICEMAIL",
            html: lucide_voicemail,
        }
    };
    const LUCIDE_VOLUME_1: Self = {
        #[inline(never)]
        fn lucide_volume_1(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "11 5 6 9 2 9 2 15 6 15 11 19 11 5" /> < path d = "M15.54 8.46a5 5 0 0 1 0 7.07" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VOLUME_1",
            html: lucide_volume_1,
        }
    };
    const LUCIDE_VOLUME_2: Self = {
        #[inline(never)]
        fn lucide_volume_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "11 5 6 9 2 9 2 15 6 15 11 19 11 5" /> < path d = "M15.54 8.46a5 5 0 0 1 0 7.07" /> < path d = "M19.07 4.93a10 10 0 0 1 0 14.14" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VOLUME_2",
            html: lucide_volume_2,
        }
    };
    const LUCIDE_VOLUME_X: Self = {
        #[inline(never)]
        fn lucide_volume_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "11 5 6 9 2 9 2 15 6 15 11 19 11 5" /> < line x1 = "22" y1 = "9" x2 = "16" y2 = "15" /> < line x1 = "16" y1 = "9" x2 = "22" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VOLUME_X",
            html: lucide_volume_x,
        }
    };
    const LUCIDE_VOLUME: Self = {
        #[inline(never)]
        fn lucide_volume(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "11 5 6 9 2 9 2 15 6 15 11 19 11 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_VOLUME",
            html: lucide_volume,
        }
    };
    const LUCIDE_WALLET: Self = {
        #[inline(never)]
        fn lucide_wallet(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M20 12V8H6a2 2 0 0 1-2-2c0-1.1.9-2 2-2h12v4" /> < path d = "M4 6v12c0 1.1.9 2 2 2h14v-4" /> < path d = "M18 12a2 2 0 0 0-2 2c0 1.1.9 2 2 2h4v-4h-4z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WALLET",
            html: lucide_wallet,
        }
    };
    const LUCIDE_WAND_2: Self = {
        #[inline(never)]
        fn lucide_wand_2(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72Z" /> < path d = "m14 7 3 3" /> < path d = "M5 6v4" /> < path d = "M19 14v4" /> < path d = "M10 2v2" /> < path d = "M7 8H3" /> < path d = "M21 16h-4" /> < path d = "M11 3H9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WAND_2",
            html: lucide_wand_2,
        }
    };
    const LUCIDE_WAND: Self = {
        #[inline(never)]
        fn lucide_wand(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M15 4V2" /> < path d = "M15 16v-2" /> < path d = "M8 9h2" /> < path d = "M20 9h2" /> < path d = "M17.8 11.8 19 13" /> < path d = "M15 9h0" /> < path d = "M17.8 6.2 19 5" /> < path d = "m3 21 9-9" /> < path d = "M12.2 6.2 11 5" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WAND",
            html: lucide_wand,
        }
    };
    const LUCIDE_WATCH: Self = {
        #[inline(never)]
        fn lucide_watch(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "6" /> < polyline points = "12 10 12 12 13 13" /> < path d = "m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05" /> < path d = "m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WATCH",
            html: lucide_watch,
        }
    };
    const LUCIDE_WAVES: Self = {
        #[inline(never)]
        fn lucide_waves(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" /> < path d = "M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" /> < path d = "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WAVES",
            html: lucide_waves,
        }
    };
    const LUCIDE_WEBCAM: Self = {
        #[inline(never)]
        fn lucide_webcam(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "10" r = "8" /> < circle cx = "12" cy = "10" r = "3" /> < path d = "M7 22h10" /> < path d = "M12 22v-4" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WEBCAM",
            html: lucide_webcam,
        }
    };
    const LUCIDE_WEBHOOK: Self = {
        #[inline(never)]
        fn lucide_webhook(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2" /> < path d = "m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06" /> < path d = "m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WEBHOOK",
            html: lucide_webhook,
        }
    };
    const LUCIDE_WIFI_OFF: Self = {
        #[inline(never)]
        fn lucide_wifi_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> < path d = "M8.5 16.5a5 5 0 0 1 7 0" /> < path d = "M2 8.82a15 15 0 0 1 4.17-2.65" /> < path d = "M10.66 5c4.01-.36 8.14.9 11.34 3.76" /> < path d = "M16.85 11.25a10 10 0 0 1 2.22 1.68" /> < path d = "M5 13a10 10 0 0 1 5.24-2.76" /> < line x1 = "12" y1 = "20" x2 = "12.01" y2 = "20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WIFI_OFF",
            html: lucide_wifi_off,
        }
    };
    const LUCIDE_WIFI: Self = {
        #[inline(never)]
        fn lucide_wifi(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M5 13a10 10 0 0 1 14 0" /> < path d = "M8.5 16.5a5 5 0 0 1 7 0" /> < path d = "M2 8.82a15 15 0 0 1 20 0" /> < line x1 = "12" y1 = "20" x2 = "12.01" y2 = "20" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WIFI",
            html: lucide_wifi,
        }
    };
    const LUCIDE_WIND: Self = {
        #[inline(never)]
        fn lucide_wind(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M17.7 7.7a2.5 2.5 0 1 1 1.8 4.3H2" /> < path d = "M9.6 4.6A2 2 0 1 1 11 8H2" /> < path d = "M12.6 19.4A2 2 0 1 0 14 16H2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WIND",
            html: lucide_wind,
        }
    };
    const LUCIDE_WINE: Self = {
        #[inline(never)]
        fn lucide_wine(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M8 22h8" /> < path d = "M7 10h10" /> < path d = "M12 15v7" /> < path d = "M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WINE",
            html: lucide_wine,
        }
    };
    const LUCIDE_WRAP_TEXT: Self = {
        #[inline(never)]
        fn lucide_wrap_text(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "3" y1 = "6" x2 = "21" y2 = "6" /> < path d = "M3 12h15a3 3 0 1 1 0 6h-4" /> < polyline points = "16 16 14 18 16 20" /> < line x1 = "3" y1 = "18" x2 = "10" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WRAP_TEXT",
            html: lucide_wrap_text,
        }
    };
    const LUCIDE_WRENCH: Self = {
        #[inline(never)]
        fn lucide_wrench(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z" /> </ svg > }
        }
        Self {
            name: "LUCIDE_WRENCH",
            html: lucide_wrench,
        }
    };
    const LUCIDE_X_CIRCLE: Self = {
        #[inline(never)]
        fn lucide_x_circle(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "12" cy = "12" r = "10" /> < line x1 = "15" y1 = "9" x2 = "9" y2 = "15" /> < line x1 = "9" y1 = "9" x2 = "15" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_X_CIRCLE",
            html: lucide_x_circle,
        }
    };
    const LUCIDE_X_OCTAGON: Self = {
        #[inline(never)]
        fn lucide_x_octagon(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2" /> < line x1 = "15" y1 = "9" x2 = "9" y2 = "15" /> < line x1 = "9" y1 = "9" x2 = "15" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_X_OCTAGON",
            html: lucide_x_octagon,
        }
    };
    const LUCIDE_X_SQUARE: Self = {
        #[inline(never)]
        fn lucide_x_square(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < rect x = "3" y = "3" width = "18" height = "18" rx = "2" ry = "2" /> < line x1 = "9" y1 = "9" x2 = "15" y2 = "15" /> < line x1 = "15" y1 = "9" x2 = "9" y2 = "15" /> </ svg > }
        }
        Self {
            name: "LUCIDE_X_SQUARE",
            html: lucide_x_square,
        }
    };
    const LUCIDE_X: Self = {
        #[inline(never)]
        fn lucide_x(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < line x1 = "18" y1 = "6" x2 = "6" y2 = "18" /> < line x1 = "6" y1 = "6" x2 = "18" y2 = "18" /> </ svg > }
        }
        Self {
            name: "LUCIDE_X",
            html: lucide_x,
        }
    };
    const LUCIDE_YOUTUBE: Self = {
        #[inline(never)]
        fn lucide_youtube(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < path d = "M12 19c-2.3 0-6.4-.2-8.1-.6-.7-.2-1.2-.7-1.4-1.4-.3-1.1-.5-3.4-.5-5s.2-3.9.5-5c.2-.7.7-1.2 1.4-1.4C5.6 5.2 9.7 5 12 5s6.4.2 8.1.6c.7.2 1.2.7 1.4 1.4.3 1.1.5 3.4.5 5s-.2 3.9-.5 5c-.2.7-.7 1.2-1.4 1.4-1.7.4-5.8.6-8.1.6 0 0 0 0 0 0z" /> < polygon points = "10 15 15 12 10 9" /> </ svg > }
        }
        Self {
            name: "LUCIDE_YOUTUBE",
            html: lucide_youtube,
        }
    };
    const LUCIDE_ZAP_OFF: Self = {
        #[inline(never)]
        fn lucide_zap_off(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polyline points = "12.41 6.75 13 2 10.57 4.92" /> < polyline points = "18.57 12.91 21 10 15.66 10" /> < polyline points = "8 8 3 14 12 14 11 22 16 16" /> < line x1 = "2" y1 = "2" x2 = "22" y2 = "22" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ZAP_OFF",
            html: lucide_zap_off,
        }
    };
    const LUCIDE_ZAP: Self = {
        #[inline(never)]
        fn lucide_zap(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < polygon points = "13 2 3 14 12 14 11 22 21 10 12 10 13 2" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ZAP",
            html: lucide_zap,
        }
    };
    const LUCIDE_ZOOM_IN: Self = {
        #[inline(never)]
        fn lucide_zoom_in(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "11" cy = "11" r = "8" /> < line x1 = "21" y1 = "21" x2 = "16.65" y2 = "16.65" /> < line x1 = "11" y1 = "8" x2 = "11" y2 = "14" /> < line x1 = "8" y1 = "11" x2 = "14" y2 = "11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ZOOM_IN",
            html: lucide_zoom_in,
        }
    };
    const LUCIDE_ZOOM_OUT: Self = {
        #[inline(never)]
        fn lucide_zoom_out(
            crate::IconProps {
                data: _,
                title,
                width,
                height,
                onclick,
                oncontextmenu,
                class,
                style,
                role,
            }: &crate::IconProps,
        ) -> yew::Html {
            yew::html! { < svg xmlns = "http://www.w3.org/2000/svg" data - license = "From https://github.com/lucide-icons/lucide - Licensed under ISC" width = { width . clone () } height = { height . clone () } onclick = { onclick . clone () } oncontextmenu = { oncontextmenu . clone () } class = { class . clone () } style = { style . clone () } role = { role . clone () } viewBox = "0 0 24 24" fill = "none" stroke = "currentColor" stroke - width = "2" stroke - linecap = "round" stroke - linejoin = "round" > if let Some (title) = title . clone () { < title > { title } </ title > } < circle cx = "11" cy = "11" r = "8" /> < line x1 = "21" y1 = "21" x2 = "16.65" y2 = "16.65" /> < line x1 = "8" y1 = "11" x2 = "14" y2 = "11" /> </ svg > }
        }
        Self {
            name: "LUCIDE_ZOOM_OUT",
            html: lucide_zoom_out,
        }
    };
}
